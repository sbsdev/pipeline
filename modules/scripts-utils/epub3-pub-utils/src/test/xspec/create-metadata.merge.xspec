<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns="http://www.idpf.org/2007/opf"
    xmlns:opf="http://www.idpf.org/2007/opf" xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:f="http://www.daisy.org/ns/pipeline/internal-functions"
    stylesheet="../../main/resources/xml/xproc/create-metadata.merge.xsl">

    <x:scenario label="IDs :: ">
        <x:scenario label="conflicting IDs">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta id="id" property="dcterms:creator">foo</meta>
                    </metadata>
                    <metadata>
                        <meta id="id" property="dcterms:publisher">bar</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="should be resolved"
                test="count(//*[.=('foo','bar')])=2  and (//*[.='foo']/@id ne //*[.='bar']/@id)"/>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Titles ::">
        <x:scenario label="when there is only one 'dc:title'">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:title>foo</dc:title>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is copied" test="//dc:title">
                <dc:title>foo</dc:title>
            </x:expect>
        </x:scenario>
        <x:scenario label="when there are multiple 'dc:title' in the same set">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:title>foo</dc:title>
                        <dc:title>bar</dc:title>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="all are copied" test="//dc:title">
                <dc:title>foo</dc:title>
                <dc:title>bar</dc:title>
            </x:expect>
        </x:scenario>
        <x:scenario label="when there are 'dc:title' in multiple sets">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:title>foo</dc:title>
                    </metadata>
                    <metadata>
                        <dc:title>bar</dc:title>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the first one is copied" test="//dc:title">
                <dc:title>foo</dc:title>
            </x:expect>
        </x:scenario>
        <x:scenario label="when there is a 'dc:title' in a non-opf metadata namespace">
            <x:context>
                <wrapper>
                    <metadata xmlns="">
                        <dc:title>bar</dc:title>
                    </metadata>
                    <metadata>
                        <dc:title>foo</dc:title>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is ignored" test="//dc:title">
                <dc:title>foo</dc:title>
            </x:expect>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Refines ::">
        <!--TODO test metadata refining resource-->
        <x:scenario label="when metadata refines a dc:title element">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:title id="t2">title</dc:title>
                        <meta refines="#t2" property="title-type">refine1</meta>
                        <meta refines="#t2" property="group-position">refine2</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is copied"
                test="count(//dc:title[.='title']|//opf:meta[.=('refine1','refine2')])=3"/>
            <x:expect label="refines attributes are correct"
                test="every $refine in //@refines satisfies $refine = concat('#',//dc:title/@id)"/>
        </x:scenario>
        <x:scenario label="when metadata refines a dc:language element">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:language id="id">en</dc:language>
                        <meta refines="#id" property="role">refine</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is copied" test="exists(//opf:meta[.=('refine')])"/>
            <x:expect label="refines attributes are correct"
                test="every $refine in //@refines satisfies $refine = concat('#',//dc:language/@id)"
            />
        </x:scenario>
        <x:scenario label="when metadata refines a dc:identifier element">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:identifier id="id">id</dc:identifier>
                        <meta refines="#id" property="role">refine</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is copied" test="exists(//opf:meta[.=('refine')])"/>
            <x:expect label="refines attributes are correct"
                test="every $refine in //@refines satisfies $refine = concat('#',//dc:identifier/@id)"
            />
        </x:scenario>
        <x:scenario label="when metadata refines a DCMES element">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:creator id="id">creator</dc:creator>
                        <meta refines="#id" property="role">refine</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is copied" test="exists(//opf:meta[.=('refine')])"/>
            <x:expect label="refines attributes are correct"
                test="every $refine in //@refines satisfies $refine = concat('#',//dc:creator/@id)"
            />
        </x:scenario>
        <x:scenario label="when metadata refines a meta element">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta property="dcterms:creator" id="id">creator</meta>
                        <meta refines="#id" property="role">refine</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is copied" test="exists(//opf:meta[.=('refine')])"/>
            <x:expect label="refines attributes are correct"
                test="every $refine in //@refines satisfies $refine = concat('#',//opf:meta[@property='dcterms:creator']/@id)"
            />
        </x:scenario>
        <x:scenario label="when metadata refines an unexisting expression">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta refines="#t1" property="group-position">1</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is ignored" test="empty(//dc:title|//opf:meta[@refines])"/>
        </x:scenario>
        <x:scenario label="transitive refines">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:title id="t2">title</dc:title>
                        <meta id="r" refines="#t2" property="title-type">refine1</meta>
                        <meta refines="#r" property="group-position">refine2</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is copied"
                test="count(//dc:title[.='title']|//opf:meta[.=('refine1','refine2')])=3"/>
            <x:expect label="refines attributes are correct"
                test="//@refines=concat('#',//dc:title/@id) and //@refines=//@refines/concat('#',../@id)"
            />
        </x:scenario>
        <x:scenario label="when metadata refines an expression with the same ID in another set">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:title id="t2">title</dc:title>
                        <meta refines="#t2" property="title-type">refine1</meta>
                    </metadata>
                    <metadata>
                        <dc:title id="t2">other</dc:title>
                        <meta refines="#t2" property="title-type">refine2</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is ignored" test="count(//opf:meta[.=('refine1','refine2')])=1"/>
        </x:scenario>
        <x:scenario label="when metadata refines an expression with a conflicting ID">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta id="id" property="dcterms:creator">foo</meta>
                    </metadata>
                    <metadata>
                        <meta id="id" property="dcterms:publisher">bar</meta>
                        <meta refines="#id" property="role">refines-bar</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the refine IDREF is changed"
                test="concat('#',//opf:meta[.='bar']/@id)=//opf:meta[.='refines-bar']/@refines"/>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Identifier ::">
        <x:scenario label="when there is only one 'dc:identifier'">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:identifier>foo</dc:identifier>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is copied" test="exists(//dc:identifier[.='foo'])"/>
            <x:expect label="it is given an ID"
                test="normalize-space(//dc:identifier[.='foo']/@id) ne ''"/>
        </x:scenario>
        <x:scenario label="when there are multiple 'dc:identifier' in the same set">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:identifier>foo</dc:identifier>
                        <dc:identifier>bar</dc:identifier>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="all are copied" test="count(//dc:identifier[.=('foo','bar')])=2"/>
        </x:scenario>
        <x:scenario label="when there are 'dc:identifier' in multiple sets">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:identifier>foo</dc:identifier>
                    </metadata>
                    <metadata>
                        <dc:identifier>bar</dc:identifier>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the first one is copied"
                test="exists(//dc:identifier[.='foo'])
                and empty(//dc:identifier[.='bar'])"
            />
        </x:scenario>
        <x:scenario label="when a 'dc:identifier' has an ID">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:identifier id="foo">foo</dc:identifier>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is copied" test="//dc:identifier[.='foo']/@id='foo'"/>
        </x:scenario>
        <x:scenario label="when an 'dc:identifier' ID must be generated">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:identifier>foo</dc:identifier>
                        <dc:identifier id="d18e3">bar</dc:identifier>
                        <dc:identifier id="xd18e3">baz</dc:identifier>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is non conflicting"
                test="count(distinct-values(//dc:identifier/@id))=3"/>
        </x:scenario>

    </x:scenario>

    <x:scenario label="Language ::">
        <x:scenario label="when there is only one 'dc:language'">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:language>en</dc:language>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is copied" test="//dc:language">
                <dc:language>en</dc:language>
            </x:expect>
        </x:scenario>
        <x:scenario label="when there are multiple 'dc:language' in the same set">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:language>en</dc:language>
                        <dc:language>fr</dc:language>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="all are copied" test="//dc:language">
                <dc:language>en</dc:language>
                <dc:language>fr</dc:language>
            </x:expect>
        </x:scenario>
        <x:scenario label="when there are 'dc:language' in multiple sets">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:language>en</dc:language>
                    </metadata>
                    <metadata>
                        <dc:language>fr</dc:language>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the first one is copied" test="//dc:language">
                <dc:language>en</dc:language>
            </x:expect>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Modification Date ::">
        <x:scenario label="when there is no 'dcterms:modified'">
            <x:context>
                <wrapper>
                    <metadata> </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is generated"
                test="exists(//opf:meta[@property='dcterms:modified'])"/>
            <x:expect label="with a valid date"
                test="//opf:meta[@property='dcterms:modified']/matches(.,'\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z')"
            />
        </x:scenario>
        <x:scenario label="when there are existing 'dcterms:modified'">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta property="dcterms:modified">2011-01-01T12:00:00Z</meta>
                    </metadata>
                    <metadata>
                        <meta property="dcterms:modified">2012-01-01T12:00:00Z</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="only one is copied, and is overriden"
                test="count(//opf:meta[@property='dcterms:modified'])=1 
                and normalize-space(//opf:meta[@property='dcterms:modified']) ne '2011-01-01T12:00:00Z'"
            />
        </x:scenario>
    </x:scenario>

    <x:scenario label="DCMES Elements ::">
        <x:scenario label="valid DCMES elements">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:contributor>foo</dc:contributor>
                        <dc:coverage>foo</dc:coverage>
                        <dc:creator>foo</dc:creator>
                        <dc:date>2000-01-01T00:00:00Z</dc:date>
                        <dc:description>foo</dc:description>
                        <dc:format>foo</dc:format>
                        <dc:publisher>foo</dc:publisher>
                        <dc:relation>foo</dc:relation>
                        <dc:rights>foo</dc:rights>
                        <dc:source>foo</dc:source>
                        <dc:subject>foo</dc:subject>
                        <dc:type>foo</dc:type>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="are copied" test="//dc:*">
                <dc:contributor>foo</dc:contributor>
                <dc:coverage>foo</dc:coverage>
                <dc:creator>foo</dc:creator>
                <dc:date>2000-01-01T00:00:00Z</dc:date>
                <dc:description>foo</dc:description>
                <dc:format>foo</dc:format>
                <dc:publisher>foo</dc:publisher>
                <dc:relation>foo</dc:relation>
                <dc:rights>foo</dc:rights>
                <dc:source>foo</dc:source>
                <dc:subject>foo</dc:subject>
                <dc:type>foo</dc:type>
            </x:expect>
        </x:scenario>
        <x:scenario label="when elements are distributed in multiple sets">
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:contributor>foo</dc:contributor>
                        <dc:contributor>bar</dc:contributor>
                    </metadata>
                    <metadata>
                        <dc:contributor>baz</dc:contributor>
                        <dc:creator>foo</dc:creator>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="elements are copied from the first set they belong to" test="//dc:*">
                <dc:contributor>foo</dc:contributor>
                <dc:contributor>bar</dc:contributor>
                <dc:creator>foo</dc:creator>
            </x:expect>
        </x:scenario>
        <x:scenario label="when elements are allowed only once">
            <!--Note: EPUB 3.01 allows several 'dc:type' elements-->
            <x:context>
                <wrapper>
                    <metadata>
                        <dc:date>2000-01-01T00:00:00Z</dc:date>
                        <dc:date>2000-02-01T00:00:00Z</dc:date>
                        <dc:source>foo</dc:source>
                        <dc:source>bar</dc:source>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="only the first occurence is copied" test="//dc:*">
                <dc:date>2000-01-01T00:00:00Z</dc:date>
                <dc:source>foo</dc:source>
            </x:expect>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Meta Elements ::">
        <x:scenario label="meta elements">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta property="dcterms:creator">foo</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label=" are copied by default"
                test="//opf:meta[@property = 'dcterms:creator']">
                <meta property="dcterms:creator">foo</meta>
            </x:expect>
        </x:scenario>
        <x:scenario label="meta elements with a property in the default vocab">
            <!--Note: all properties from the default vocab current *should* refine other props, but this could be changed in the future-->
            <x:context>
                <wrapper>
                    <metadata>
                        <meta property="role">foo</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label=" are copied by default" test="//opf:meta[@property = 'role']">
                <meta property="role">foo</meta>
            </x:expect>
        </x:scenario>
        <x:scenario label="when there are multiple expressions of the same property in the same set">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta property="dcterms:creator">foo</meta>
                        <meta property="dcterms:creator">bar</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="they are all copied" test="//opf:meta[@property = 'dcterms:creator']">
                <meta property="dcterms:creator">foo</meta>
                <meta property="dcterms:creator">bar</meta>
            </x:expect>
        </x:scenario>
        <x:scenario
            label="when there are multiple expressions of the same property in multiple sets">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta property="dcterms:creator">foo</meta>
                    </metadata>
                    <metadata>
                        <meta property="dcterms:creator">bar</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the ones from the first set are copied"
                test="//opf:meta[@property = 'dcterms:creator']">
                <meta property="dcterms:creator">foo</meta>
            </x:expect>
        </x:scenario>
        <x:scenario label="when there is a 'scheme' attribute">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta property="role" scheme="marc:relators">aut</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is preserved" test="//opf:meta[@property='role']">
                <meta property="role" scheme="marc:relators">aut</meta>
            </x:expect>
        </x:scenario>
        <x:scenario label="when an expression is empty">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta property="dcterms:creator"/>
                        <meta property="dcterms:creator"> </meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is discarded" test="empty(//opf:meta[@property='dcterms:creator'])"
            />
        </x:scenario>
        <x:scenario label="when a property from the default vocab is invalid">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta property="foo">bar</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is discarded" test="empty(//opf:meta[.='bar'])"/>
        </x:scenario>
        <x:scenario label="when no vocab is declared for the property's prefix">
            <x:context>
                <wrapper>
                    <metadata>
                        <meta property="foo:foo">bar</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="it is discarded" test="empty(//opf:meta[.='bar'])"/>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Prefixes ::">
        <x:scenario label="when a property uses a non-default prefix">
            <x:context>
                <wrapper>
                    <metadata prefix="foo: http://example.org/foo">
                        <meta property="foo:foo">foo</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the prefix declaration is preserved"
                test="//opf:metadata/@prefix = 'foo: http://example.org/foo'"/>
        </x:scenario>
        <x:scenario label="when two sets use different prefixes for the same vocab">
            <x:context>
                <wrapper>
                    <metadata prefix="foo: http://example.org/foo">
                        <meta property="foo:foo">foo</meta>
                    </metadata>
                    <metadata prefix="fooz: http://example.org/foo">
                        <meta property="fooz:fooz">fooz</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the prefix declarations are unified"
                test="//opf:metadata/@prefix = 'foo: http://example.org/foo'"/>
            <x:expect label="the prefix is renamed where needed"
                test="//opf:meta/@property = 'foo:fooz'"/>
        </x:scenario>
        <x:scenario label="when two properties from two sets use non-default prefixes">
            <x:context>
                <wrapper>
                    <metadata prefix="foo: http://example.org/foo">
                        <meta property="foo:foo">foo</meta>
                    </metadata>
                    <metadata prefix="bar: http://example.org/bar">
                        <meta property="bar:bar">bar</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the prefix declarations are merged"
                test="//opf:metadata/@prefix = 'foo: http://example.org/foo bar: http://example.org/bar'"
            />
        </x:scenario>
        <x:scenario label="when a set re-declares a reserved prefix">
            <x:context>
                <wrapper>
                    <metadata
                        prefix="dcterms: http://purl.org/dc/terms/
                                    foo: http://example.org/foo
                                   marc: http://id.loc.gov/vocabulary/
                                  media: http://www.idpf.org/epub/vocab/overlays/#
                                   onix: http://www.editeur.org/ONIX/book/codelists/current.html#
                                    xsd: http://www.w3.org/2001/XMLSchema#">
                        <meta property="marc:foo">foo</meta>
                        <meta property="foo:foo">foo</meta>
                        <meta property="media:foo">foo</meta>
                        <meta property="onix:foo">foo</meta>
                        <meta property="xsd:foo">foo</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the reserved prefix declarations are discarded"
                test="//opf:metadata/@prefix = 'foo: http://example.org/foo'"/>
        </x:scenario>
        <x:scenario label="when a set declares a custom prefix for a reserved vocab">
            <x:context>
                <wrapper>
                    <metadata prefix="foo: http://purl.org/dc/terms/">
                        <meta property="foo:subject">foo</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the prefix declaration is removed" test="empty(//opf:metadata/@prefix)"/>
            <x:expect label="the prefix is set to the reserved prefix"
                test="//opf:meta[.='foo']/@property = 'dcterms:subject'"/>
        </x:scenario>
        <x:scenario label="when a set uses a reserved prefix for a custom vocab">
            <x:context>
                <wrapper>
                    <metadata prefix="dcterms: http://example.org/terms/">
                        <meta property="dcterms:subject">foo</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the prefix declaration is kept"
                test="tokenize(//opf:metadata/@prefix,'\s+')='http://example.org/terms/'"/>
            <x:expect label="the prefix is changed to an unreserved prefix"
                test="not(tokenize(//opf:meta[.='foo']/@property,':')[1] = 'dcterms')"/>
        </x:scenario>
        <x:scenario label="when different sets uses a reserved prefix for different custom vocabs">
            <x:context>
                <wrapper>
                    <metadata prefix="dcterms: http://example.org/terms/">
                        <meta property="dcterms:subject">foo</meta>
                    </metadata>
                    <metadata prefix="dcterms: http://example.com/terms/">
                        <meta property="dcterms:subject">bar</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the prefix declarations are kept"
                test="contains(//opf:metadata/@prefix,
                concat(tokenize(//opf:meta[.='foo']/@property,':')[1],': http://example.org/terms/'))
                and
                contains(//opf:metadata/@prefix,
                concat(tokenize(//opf:meta[.='bar']/@property,':')[1],': http://example.com/terms/'))"/>
            <x:expect label="the prefixes are changed to unreserved prefixes"
                test="not(contains(//opf:metadata/@prefix,'dcterms:'))"/>
        </x:scenario>
        <x:scenario label="when a set declares an unused prefix">
            <x:context>
                <wrapper>
                    <metadata prefix="foo: http://example.org/foo bar: http://example.org/bar">
                        <meta property="foo:foo">foo</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the unused prefix declaration is discarded"
                test="//opf:metadata/@prefix = 'foo: http://example.org/foo'"/>
        </x:scenario>
        <x:scenario label="when none of the declared prefixes are used">
            <x:context>
                <wrapper>
                    <metadata prefix="foo: http://example.org/foo"> </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the prefix declaration is discarded"
                test="empty(//opf:metadata/@prefix)"/>
        </x:scenario>
        <x:scenario label="when there is a 'scheme' attribute in a non-default prefix">
            <x:context>
                <wrapper>
                    <metadata prefix="foo: http://example.org/foo">
                        <meta property="dcterms:creator" scheme="foo:bar">foo</meta>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the prefix declaration is preserved"
                test="//opf:metadata/@prefix = 'foo: http://example.org/foo'"/>
        </x:scenario>
    </x:scenario>

    <x:scenario label="Links ::">
        <x:scenario label="valid link elements">
            <x:context>
                <wrapper>
                    <metadata>
                        <link rel="onix-record" href="http://example.org/onix/12389347"/>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="are copied as-is" test="//opf:link">
                <link rel="onix-record" href="http://example.org/onix/12389347"/>
            </x:expect>
        </x:scenario>
        <x:scenario label="when @href or @rel is missing">
            <x:context>
                <wrapper>
                    <metadata>
                        <link href="http://example.org/onix/12389347"/>
                        <link rel="onix-record"/>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the link elements are discarded" test="empty(//opf:link)"/>
        </x:scenario>
        <x:scenario label="when @rel is not in the default vocab and doesn't have a valid prefix">
            <x:context>
                <wrapper>
                    <metadata>
                        <link rel="foo" href="http://example.org/foo"/>
                        <link rel="foo:foo" href="http://example.org/foo"/>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the link elements are discarded" test="empty(//opf:link)"/>
        </x:scenario>
        <x:scenario label="when @rel uses a custom prefix">
            <x:context>
                <wrapper>
                    <metadata prefix="foo: http://example.org/foo">
                        <link rel="foo:foo" href="http://example.org/foo"/>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="the prefix declaration is preserved"
                test="//opf:metadata/@prefix = 'foo: http://example.org/foo'"/>
        </x:scenario>
        <x:scenario label="when @rel uses a custom prefix and other prefixes are also declared">
            <x:context>
                <wrapper>
                    <metadata prefix="foo: http://example.org/foo">
                        <meta property="foo:foo">foo</meta>
                    </metadata>
                    <metadata prefix="bar: http://example.org/bar">
                        <link rel="bar:bar" href="http://example.org/bar"/>
                    </metadata>
                </wrapper>
            </x:context>
            <x:expect label="prefix declarations are merged"
                test="//opf:metadata/@prefix = 'foo: http://example.org/foo bar: http://example.org/bar'"
            />
        </x:scenario>
    </x:scenario>

</x:description>
