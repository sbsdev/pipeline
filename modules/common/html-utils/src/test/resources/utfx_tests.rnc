# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  $Id$
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  $Source: /cvs/utf-x/framework/src/dtd/utfx_tests.dtd,v $
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  $Name:  $
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
#  Copyright (C) 2004-2006 UTF-X Development team.
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
#  UTF-X test definition file (TDF) Document Type Definition
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace utfx = "http://utfx.org/test-definition"

start = utfx.tests

utfx.tests =
  element utfx:tests {
    attlist.utfx.tests,
    utfx.stylesheet,
    utfx.css?,
    utfx.source-validation?,
    utfx.expected-validation?,
    utfx.source-builder?,
    utfx.test*
  }
attlist.utfx.tests &= empty
utfx.stylesheet = element utfx:stylesheet { attlist.utfx.stylesheet, empty }
attlist.utfx.stylesheet &=
  attribute src { text },
  attribute output { "xhtml" | "fo" }?
utfx.css = element utfx:css { attlist.utfx.css, empty }
attlist.utfx.css &= attribute uri { text }
utfx.source-validation = element utfx:source-validation { attlist.utfx.source-validation, utfx.dtd }
attlist.utfx.source-validation &= empty
utfx.expected-validation =
  element utfx:expected-validation { attlist.utfx.expected-validation, utfx.dtd }
attlist.utfx.expected-validation &= empty
utfx.dtd = element utfx:dtd { attlist.utfx.dtd, empty }
attlist.utfx.dtd &=
  attribute public { text }?,
  attribute system { text }
utfx.source-builder =
  element utfx:source-builder {
    attlist.utfx.source-builder, utfx.class-name, utfx.constructor-params
  }
attlist.utfx.source-builder &= empty
utfx.class-name = element utfx:class-name { attlist.utfx.class-name, text }
attlist.utfx.class-name &= empty
utfx.constructor-params =
  element utfx:constructor-params { attlist.utfx.constructor-params, utfx.param* }
attlist.utfx.constructor-params &= empty
utfx.param = element utfx:param { attlist.utfx.param, text }
attlist.utfx.param &=
  [ a:defaultValue = "String" ] attribute type { "String" | "Integer" | "Boolean" | "Double" }?
utfx.test =
  element utfx:test {
    attlist.utfx.test,
    utfx.name,
    utfx.stylesheet-params?,
    utfx.source-builder?,
    utfx.call-template?,
    utfx.assert-equal
  }
attlist.utfx.test &= empty
utfx.stylesheet-params =
  element utfx:stylesheet-params { attlist.utfx.stylesheet-params, utfx.with-param* }
attlist.utfx.stylesheet-params &= empty
utfx.call-template = element utfx:call-template { attlist.utfx.call-template, utfx.with-param* }
attlist.utfx.call-template &= attribute name { text }
utfx.with-param = element utfx:with-param { attlist.utfx.with-param, any }
attlist.utfx.with-param &= attribute name { text }
attlist.utfx.with-param &= attribute select { text }?
utfx.name = element utfx:name { attlist.utfx.name, text }
attlist.utfx.name &= empty
utfx.assert-equal =
  element utfx:assert-equal { attlist.utfx.assert-equal, utfx.source, utfx.expected, utfx.message? }
attlist.utfx.assert-equal &=
  [ a:defaultValue = "no" ] attribute normalise-internal-whitespace { "yes" | "no" }?
utfx.source = element utfx:source { attlist.utfx.source, any }
attlist.utfx.source &=
  [ a:defaultValue = "yes" ] attribute validate { "yes" | "no" }?,
  [ a:defaultValue = "no" ] attribute use-source-parser { "yes" | "no" }?,
  [ a:defaultValue = "preserve" ] attribute xml:space { "preserve" | "default" }?,
  attribute context-node { text }?,
  attribute href { text }?
utfx.expected = element utfx:expected { attlist.utfx.expected, any }
attlist.utfx.expected &=
  [ a:defaultValue = "yes" ] attribute validate { "yes" | "no" }?,
  [ a:defaultValue = "preserve" ] attribute xml:space { "preserve" | "default" }?,
  attribute href { text }?
utfx.message = element utfx:message { attlist.utfx.message, text }
attlist.utfx.message &= empty
any =
  (element * {
     attribute * { text }*,
     any
   }
   | text)*
