xquery version "1.0" encoding "UTF-8";

(: This file was generated on Wed Jul 4, 2012 12:34 (UTC-05) by REx v5.16
   which is Copyright (c) 1979-2012 by Gunther Rademacher <grd@gmx.net> :)
(: REx command line: xpc2.ebnf -xquery -tree -smaller -backtrack :)

(: Lightly edited by ndw@nwalsh.com to make it a main module. :)

(:~
 : The parser that was generated for the xpc2 grammar.
 :)
declare namespace p="xpc2";
declare default function namespace "http://www.w3.org/2005/xpath-functions";

(:~
 : The codepoint to charclass mapping for 7 bit codepoints.
 :)
declare variable $p:MAP0 as xs:integer+ :=
(
  45, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 2, 4, 2, 2,
  5, 6, 7, 2, 2, 8, 9, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12, 2, 2, 13, 14, 2, 2, 15, 15, 15, 15, 15, 15,
  15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 2, 17, 2, 15, 2, 18, 19, 20, 21,
  22, 23, 24, 25, 26, 15, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 2, 44, 2, 2
);

(:~
 : The codepoint to charclass mapping for codepoints below the surrogate block.
 :)
declare variable $p:MAP1 as xs:integer+ :=
(
  108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181, 181, 214,
  215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 414, 322, 293, 339,
  355, 391, 391, 391, 383, 323, 315, 323, 315, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
  323, 323, 408, 408, 408, 408, 408, 408, 408, 308, 323, 323, 323, 323, 323, 323, 323, 323, 369, 391, 391, 392, 390,
  391, 391, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 391, 391, 391,
  391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
  391, 391, 391, 391, 391, 391, 322, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
  323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 323, 391, 45, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
  0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 2, 4, 2, 2, 5, 6, 7, 2, 2, 8, 9, 10, 11, 15, 15, 15,
  15, 15, 15, 15, 15, 15, 15, 15, 16, 2, 17, 2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 2, 15, 15, 15,
  15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 2, 18, 19, 20, 21, 22, 23, 24, 25, 26, 15, 27, 28, 29, 30, 31, 32,
  33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 2, 44, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 15, 15, 2, 2, 2, 2, 2, 2, 2,
  10, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 12, 2, 2, 13, 14, 2
);

(:~
 : The codepoint to charclass mapping for codepoints above the surrogate block.
 :)
declare variable $p:MAP2 as xs:integer+ :=
(
  57344, 63744, 64976, 65008, 65536, 63743, 64975, 65007, 65533, 1114111, 2, 15, 2, 15, 2
);

(:~
 : The token-set-id to DFA-initial-state mapping.
 :)
declare variable $p:INITIAL as xs:integer+ :=
(
  1, 2, 3, 4, 517, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2071, 24, 25, 26, 27, 28, 29, 30, 31,
  2080, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60
);

(:~
 : The DFA transition table.
 :)
declare variable $p:TRANSITION as xs:integer+ :=
(
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2564, 1412, 1406, 1409, 1416, 1753, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2304, 1941, 1905, 1719, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 1422, 2553, 2563,
  1418, 1710, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2688, 2018, 2563, 2337, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 1436, 2608, 2563, 1492, 1752, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 1490, 1754, 1487, 1443, 1447, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 1453, 2427, 1458, 1462, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2687, 1466,
  1470, 2336, 1941, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2017, 1711, 1961, 1555, 1430, 2087, 1426, 2310, 2666,
  1511, 1474, 2311, 1438, 1478, 2422, 2612, 1735, 1699, 1496, 1890, 2310, 2655, 1500, 2310, 2310, 2310, 2455, 2310,
  1504, 2389, 2563, 2306, 2563, 1907, 1721, 2040, 1942, 2310, 2310, 1712, 2310, 2310, 1666, 1723, 2310, 1667, 2310,
  2040, 2309, 1431, 1439, 1724, 1431, 2310, 2310, 2310, 2310, 2310, 2310, 2310, 1508, 2338, 1753, 2563, 2303, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2515, 2563, 1519, 1523, 1540, 1940, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 1454, 2669,
  1546, 1550, 1554, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2305, 2563, 1906, 1571, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 1593, 1752, 1722, 2302, 2611, 2389, 1438, 2310, 2040, 1424, 2310, 2310, 2538, 2310, 2310, 1536,
  2310, 2389, 1430, 1697, 1723, 2033, 1427, 2310, 2310, 2310, 2310, 2310, 2310, 2310, 2144, 2015, 2563, 2080, 2338,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2668, 1568, 2088, 2142, 1753, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2304, 1941, 1561, 1565, 2319, 1578, 2309, 1733, 1583, 1574, 1620, 2310, 1588, 2481, 1802, 1944, 1597, 2438, 1839,
  2410, 2310, 1481, 1601, 2310, 1994, 1608, 2403, 2310, 1615, 2366, 2563, 2553, 1713, 2301, 2610, 2036, 1437, 1795,
  2310, 1579, 2310, 2310, 2389, 1426, 2310, 1632, 2310, 2536, 1439, 1619, 1722, 2032, 1624, 1629, 2310, 2310, 2310,
  2310, 2310, 2310, 1584, 1555, 2686, 1641, 2337, 2309, 1484, 1714, 1859, 2157, 1943, 1645, 2310, 1650, 1655, 2299,
  1722, 1923, 1849, 2346, 2348, 2123, 2038, 1610, 2310, 2310, 1956, 1660, 1972, 2310, 1665, 1449, 2608, 1526, 1529,
  2554, 2387, 2201, 2310, 2310, 2667, 1430, 1672, 1677, 1439, 2310, 1684, 2310, 2310, 1425, 2310, 1690, 1431, 1430,
  1696, 2310, 2310, 2310, 1703, 1917, 2310, 1591, 1708, 2339, 2180, 1718, 1730, 1739, 1745, 2462, 1749, 1758, 1762,
  1766, 1771, 2453, 2479, 1775, 2075, 1666, 1779, 2628, 1783, 1787, 1791, 1799, 1809, 2577, 1813, 1820, 2286, 2280,
  2563, 2525, 1824, 1828, 1832, 1837, 1592, 1843, 2310, 1903, 1426, 2310, 2036, 1425, 2310, 2522, 1430, 2310, 1536,
  2310, 1679, 2310, 2035, 1429, 2310, 2310, 2310, 2310, 2310, 2310, 2086, 2687, 2017, 1425, 2604, 2308, 2409, 1713,
  2310, 2036, 1942, 2310, 2310, 2666, 2310, 2310, 2317, 2310, 1848, 1723, 2040, 1426, 2037, 1609, 2310, 2310, 2310,
  2310, 2310, 2310, 2646, 1904, 2017, 1711, 1853, 1555, 1430, 2087, 1426, 2310, 2666, 1857, 1863, 2310, 1868, 2310,
  1697, 1426, 2310, 1699, 2310, 2390, 1874, 2655, 1514, 2310, 2310, 2310, 1879, 2310, 1884, 1889, 2425, 2306, 2215,
  2218, 1894, 1898, 1942, 2310, 2135, 2398, 2310, 1987, 1902, 1723, 2310, 2129, 2597, 2040, 1911, 1431, 1439, 1933,
  2664, 2310, 1767, 1916, 2310, 2310, 1921, 2310, 2667, 2338, 1753, 2408, 2303, 1426, 1591, 1439, 2121, 1666, 1425,
  1844, 1927, 2539, 2310, 2036, 1439, 2310, 1535, 2310, 1678, 2310, 2034, 1428, 1864, 2310, 2310, 1932, 2310, 2310,
  1697, 2563, 2016, 2706, 1937, 2307, 1948, 1712, 1954, 2118, 1960, 2310, 1637, 2409, 1965, 1970, 1976, 1980, 1431,
  1985, 2637, 1805, 2036, 2310, 1991, 2000, 2310, 2004, 2310, 2027, 2310, 1903, 2606, 1710, 2009, 2013, 1439, 2099,
  1686, 2055, 2657, 2022, 2310, 2310, 2619, 1656, 2031, 1532, 2310, 1698, 2310, 2389, 2045, 2050, 1513, 2059, 2310,
  2310, 2310, 2065, 1981, 2354, 2109, 2305, 2111, 2069, 1720, 2509, 1904, 2310, 2073, 2079, 2084, 2092, 2040, 1722,
  1673, 2041, 2310, 2310, 2097, 2635, 2411, 2310, 1723, 1793, 2310, 2103, 2224, 1875, 2310, 1880, 2107, 1593, 1752,
  1722, 2199, 2502, 2389, 2115, 2310, 2127, 1424, 2133, 2310, 2538, 2310, 2310, 1536, 2310, 2139, 1635, 1697, 1723,
  2033, 2148, 2310, 2310, 2310, 2310, 2310, 2155, 1885, 2161, 2165, 2169, 2173, 2338, 1661, 2177, 1723, 2053, 1604,
  2184, 2190, 2196, 1651, 2310, 2205, 1723, 2209, 2317, 1912, 1804, 2310, 2039, 1611, 2222, 2310, 2230, 2310, 2228,
  2310, 1666, 2668, 2304, 1943, 2698, 1557, 1996, 2695, 2310, 1431, 1437, 2310, 2310, 2086, 1430, 2310, 1699, 2310,
  1697, 1426, 2036, 2440, 2653, 2234, 2310, 2310, 2310, 2310, 2310, 2310, 2310, 1592, 2304, 1941, 2238, 2548, 2401,
  2242, 2246, 1816, 2250, 1722, 2025, 2256, 1741, 2262, 2061, 2326, 2268, 1667, 2310, 2274, 2258, 1726, 2446, 2310,
  2278, 2284, 2290, 2296, 2310, 2315, 2570, 2323, 2330, 2333, 1833, 1704, 1437, 2343, 2310, 1579, 2310, 1625, 1692,
  1426, 2352, 1535, 2310, 2270, 1439, 2644, 1680, 2032, 2310, 1870, 2358, 2310, 2364, 2370, 1928, 2374, 2087, 1555,
  2686, 2380, 1542, 2384, 2395, 2407, 2415, 2464, 1943, 2419, 2310, 2431, 2435, 2444, 2450, 2459, 1950, 2468, 2472,
  2310, 2476, 1610, 2186, 2192, 2485, 2292, 2310, 2310, 2489, 2563, 2608, 2586, 2493, 1556, 1966, 1423, 2506, 2310,
  2513, 2519, 2310, 1697, 2621, 2310, 1698, 2310, 2005, 1425, 2310, 2391, 1431, 2151, 1515, 2529, 2533, 2310, 2360,
  2310, 2310, 1591, 2499, 1940, 2543, 2547, 1722, 1666, 1943, 2310, 1697, 1713, 2310, 2310, 1740, 2310, 2310, 1668,
  2310, 1666, 2310, 2409, 1430, 1725, 1432, 2310, 2310, 2310, 2310, 2310, 2310, 1431, 2563, 2552, 2252, 2558, 2609,
  2310, 2562, 1430, 2046, 2568, 1426, 2310, 2376, 1425, 2310, 2389, 1430, 2310, 1536, 2310, 1679, 2310, 2035, 1429,
  2574, 2310, 2310, 2310, 2310, 2310, 2086, 2687, 2017, 2581, 2584, 2590, 2409, 1713, 2310, 2036, 1942, 2310, 2310,
  2666, 2594, 2310, 2317, 2310, 2409, 1723, 2040, 1426, 2037, 1609, 2310, 2310, 2310, 2310, 2264, 2310, 2601, 1904,
  2017, 1711, 1646, 1555, 1430, 2087, 1426, 2093, 2666, 1439, 2310, 2310, 2616, 2310, 1697, 1426, 2310, 2625, 2632,
  2390, 2641, 2650, 1514, 2310, 2310, 2310, 2310, 2310, 2310, 2389, 2563, 2306, 1438, 2212, 1721, 2040, 1942, 2310,
  2310, 1712, 2310, 2310, 1666, 1723, 2310, 1667, 2310, 2040, 2309, 1431, 2661, 1724, 1431, 2310, 2310, 2310, 2310,
  2310, 2310, 2310, 2667, 2673, 2680, 2676, 2303, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2684, 2563, 2692,
  1940, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2496, 2700, 2704, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563,
  2711, 2711, 3333, 2711, 2711, 2710, 2711, 2711, 2711, 2712, 2711, 3336, 3340, 3340, 2716, 3340, 2741, 3340, 3340,
  3340, 2806, 2762, 2762, 2762, 2808, 2762, 2762, 2762, 2809, 2762, 2724, 3340, 3340, 3340, 2808, 2762, 2762, 3637,
  3340, 2734, 2730, 2739, 3339, 3340, 3340, 2805, 3340, 2956, 3340, 3340, 3340, 2845, 3894, 2956, 3896, 2955, 2954,
  3340, 3340, 3338, 3902, 2892, 3664, 2747, 3903, 3665, 3664, 2748, 2761, 2762, 2762, 3000, 3072, 2762, 2771, 2762,
  2807, 2977, 2762, 2809, 4173, 3340, 2730, 2734, 3340, 2729, 3340, 3340, 2743, 3340, 2781, 2762, 2762, 2786, 2798,
  2816, 2822, 3542, 2762, 3995, 2762, 2833, 2809, 3340, 3438, 3340, 2753, 2762, 2762, 2755, 2762, 2762, 4044, 2893,
  3340, 3853, 2839, 3936, 3851, 2839, 3340, 2804, 3340, 3093, 3093, 3096, 3340, 2806, 3583, 2762, 2810, 3340, 2808,
  2762, 3852, 3937, 3337, 3340, 4154, 2894, 2845, 2856, 2846, 2846, 2864, 3340, 2847, 2870, 2858, 3340, 3340, 2893,
  3340, 2808, 2762, 2901, 2902, 2902, 2906, 3099, 3227, 3330, 3340, 2891, 2895, 3340, 2892, 2879, 3340, 2807, 2925,
  3062, 2916, 2811, 3340, 3340, 2806, 2990, 2762, 3340, 3340, 2718, 2934, 2749, 2940, 2762, 2810, 3340, 3340, 3340,
  2894, 3294, 2762, 3234, 2966, 2762, 3536, 2983, 2762, 2810, 3340, 3727, 3697, 2762, 2762, 2762, 2817, 2762, 2762,
  2762, 3842, 2762, 4012, 2999, 2762, 2762, 2762, 2931, 3004, 2762, 2762, 2762, 3005, 3009, 2762, 3570, 2762, 2810,
  3486, 2808, 3684, 2762, 2762, 3490, 2762, 3141, 3015, 3015, 3015, 3030, 2762, 2762, 2762, 3038, 3036, 3340, 3340,
  2762, 3067, 3042, 2762, 2762, 2762, 3192, 3774, 2762, 2762, 2762, 3248, 3888, 2762, 2762, 2811, 3340, 2762, 2762,
  4056, 2762, 2762, 2762, 3256, 4111, 2762, 2762, 3340, 2807, 2762, 3519, 3110, 2762, 3340, 2806, 3563, 2762, 3115,
  3340, 2762, 2762, 2810, 3414, 3980, 2762, 2762, 2762, 3340, 2806, 2762, 3120, 2762, 2762, 2762, 3436, 2841, 3340,
  3340, 2895, 3340, 3340, 3340, 2807, 2762, 3019, 3130, 3339, 3340, 2892, 3340, 2807, 2762, 2762, 2762, 2807, 2762,
  3530, 3354, 3134, 3184, 2762, 2920, 2762, 2762, 2776, 2762, 2835, 2762, 2811, 3340, 2807, 2762, 3140, 4152, 2762,
  2829, 3150, 3044, 2762, 3340, 2893, 3340, 3340, 3340, 2728, 3154, 3340, 2807, 3050, 3167, 2762, 3172, 3181, 3190,
  2762, 2762, 2762, 3453, 3020, 2811, 3340, 4188, 3655, 3340, 2762, 3202, 3921, 3278, 3218, 4100, 3233, 2762, 3419,
  3238, 3245, 4106, 3254, 3475, 3260, 3266, 2809, 2762, 2762, 2762, 2945, 2994, 3272, 2762, 3323, 2762, 2949, 2762,
  2811, 2806, 2762, 3503, 3177, 3692, 2762, 3915, 3288, 2762, 3292, 2762, 2962, 2762, 3813, 3298, 3304, 2762, 3309,
  2873, 3340, 3340, 3345, 3347, 3347, 3348, 3338, 3352, 3340, 2895, 2806, 2772, 2762, 3959, 2762, 2762, 2972, 2762,
  2818, 2762, 2762, 2762, 3459, 3364, 2762, 2809, 3340, 3060, 3369, 3369, 3369, 3372, 3376, 2808, 2762, 2762, 3024,
  2762, 3381, 2762, 2762, 2762, 3464, 3387, 3340, 2808, 2762, 3913, 2762, 3393, 2762, 2762, 2762, 3641, 3780, 2762,
  2762, 2762, 3647, 3398, 2762, 2762, 2762, 3696, 3674, 2762, 2810, 3340, 2792, 2875, 3340, 2807, 3205, 2824, 3241,
  2927, 3412, 3433, 2762, 2811, 3340, 3340, 3340, 2896, 3339, 3340, 3680, 2762, 2762, 2762, 3772, 3627, 2762, 2762,
  2762, 3836, 2762, 3948, 2762, 2762, 3054, 2762, 3990, 2762, 2762, 2762, 3965, 3871, 2762, 2762, 2762, 3974, 3470,
  3470, 3337, 3340, 2894, 3340, 3340, 3340, 2762, 2762, 2961, 3474, 2762, 2762, 2809, 3340, 3593, 3479, 2968, 2762,
  2762, 3076, 2762, 3484, 3340, 3340, 3340, 2897, 3496, 2762, 2762, 2762, 4006, 3501, 4190, 2762, 2762, 3081, 3087,
  2762, 3507, 3340, 3512, 3517, 2762, 2762, 2762, 4007, 2852, 4095, 2762, 2762, 3089, 3427, 2817, 2762, 3523, 2762,
  2989, 2762, 2762, 2777, 3340, 2762, 3528, 2762, 3534, 3540, 2762, 2762, 2762, 4032, 3340, 3551, 3551, 3551, 3554,
  2936, 3340, 2893, 3340, 2892, 3340, 3340, 2722, 3340, 3574, 2808, 2762, 2995, 2762, 2762, 3821, 3546, 3578, 2762,
  2762, 2762, 4094, 2762, 2762, 2762, 2810, 2762, 2762, 2762, 2811, 2812, 3399, 2762, 2762, 2762, 4099, 2762, 3588,
  2808, 2762, 3011, 2762, 2762, 3568, 2762, 3597, 3579, 2762, 2762, 3121, 2952, 2762, 4080, 2762, 3926, 3608, 3608,
  3612, 3339, 2762, 3616, 2762, 2762, 3209, 2762, 3620, 3340, 3340, 3340, 3337, 2807, 3626, 2762, 2762, 3340, 3340,
  3340, 2890, 3631, 2762, 2762, 2762, 4137, 4018, 3636, 2762, 2762, 3340, 3558, 3250, 2762, 3744, 3750, 2762, 3653,
  3340, 3340, 3340, 3602, 3340, 3607, 3340, 3663, 2808, 2762, 3026, 2973, 2762, 2985, 2762, 2762, 3071, 2762, 3032,
  2762, 2762, 2811, 3442, 2762, 3056, 2762, 2762, 2762, 3418, 2762, 2762, 3669, 3678, 3340, 2897, 3340, 3340, 2884,
  3340, 3690, 2762, 2762, 2808, 4038, 2762, 3547, 3815, 2762, 2762, 2762, 3508, 3340, 3341, 3340, 3340, 2957, 3701,
  2893, 3707, 2886, 3340, 3707, 3706, 3443, 3715, 3715, 3715, 3337, 2809, 3360, 3719, 3340, 3125, 3126, 3126, 3340,
  3736, 2762, 2762, 3643, 2762, 3742, 2762, 2762, 2762, 3738, 4051, 3748, 2762, 4068, 2809, 2860, 3340, 3340, 3340,
  3603, 2762, 3754, 2809, 3760, 3766, 2762, 4040, 2762, 3037, 3339, 3340, 3157, 3403, 3404, 3408, 3339, 4175, 3778,
  2762, 2762, 2762, 3768, 2762, 4034, 2762, 2762, 2762, 3784, 2762, 2762, 3524, 2762, 2755, 3796, 3797, 3797, 3801,
  3805, 2811, 3340, 3972, 3809, 2782, 4078, 4140, 3819, 2762, 3340, 3340, 3340, 3729, 2762, 3825, 2762, 2762, 3861,
  2762, 3829, 3186, 2762, 2762, 3882, 2762, 3840, 2762, 2762, 2762, 3907, 2810, 3492, 3846, 3340, 3857, 3865, 3598,
  2762, 2762, 3909, 2809, 2762, 3870, 2762, 2762, 3953, 3318, 2762, 4127, 2762, 2762, 3988, 2762, 2762, 3875, 3881,
  2762, 3048, 2762, 2809, 3338, 3340, 3340, 2895, 3340, 2894, 3340, 2762, 2762, 2762, 2762, 2767, 2762, 3886, 2809,
  3340, 2807, 2762, 2910, 2914, 2894, 3340, 2867, 3340, 3268, 4028, 3834, 3900, 3229, 3160, 3162, 3163, 3338, 3340,
  3337, 3340, 3340, 2894, 3340, 2841, 3672, 2921, 2979, 2762, 3066, 2762, 2762, 2801, 2806, 3106, 2762, 2762, 2762,
  4023, 2810, 3584, 3649, 2762, 2762, 4060, 4066, 3866, 2762, 2762, 2762, 4062, 3340, 3919, 3925, 2762, 4142, 2762,
  3877, 2762, 2762, 4110, 2810, 3497, 3930, 3930, 3930, 3849, 2762, 2794, 2762, 3105, 2762, 2762, 2810, 3340, 2762,
  2762, 3312, 2809, 3934, 3340, 3340, 3423, 2807, 2788, 2762, 2762, 3786, 2762, 3941, 2807, 2762, 2762, 2809, 3340,
  2808, 2762, 4161, 2762, 2762, 3947, 3083, 2762, 2762, 2762, 3111, 2762, 3340, 2735, 3340, 3340, 2955, 2954, 4133,
  3340, 3340, 3314, 3952, 3077, 2762, 2762, 3116, 3340, 2762, 3790, 2762, 3220, 2762, 2762, 2809, 3564, 2762, 3340,
  3762, 3146, 2762, 3136, 2762, 2762, 2828, 3792, 3957, 2762, 3300, 2762, 3145, 2762, 2762, 2810, 4170, 3963, 3383,
  3305, 3449, 3466, 2762, 3969, 2806, 3978, 2810, 2762, 2762, 3196, 2762, 2762, 2944, 3198, 3984, 3830, 2762, 3756,
  2762, 3994, 2762, 2811, 3999, 3999, 4002, 3340, 3340, 3721, 3340, 3340, 4072, 2895, 2806, 3175, 3659, 4011, 2762,
  2762, 2762, 3212, 2762, 3321, 4016, 4149, 3340, 3340, 3340, 3851, 4022, 2762, 2762, 2762, 3262, 3358, 3340, 2894,
  3340, 3327, 3622, 4050, 3686, 4055, 2762, 3632, 2762, 2762, 3273, 2762, 2810, 3340, 2806, 2762, 3340, 4084, 4085,
  4085, 4089, 3339, 3340, 2892, 3591, 3101, 2894, 3340, 2893, 3340, 2757, 3731, 3731, 3732, 3338, 4093, 3340, 3340,
  3340, 3340, 2710, 4104, 2811, 3340, 3340, 3340, 3892, 3214, 2762, 2762, 2762, 3277, 2762, 3282, 3340, 3559, 4115,
  4115, 3337, 3340, 3340, 3340, 3999, 2894, 3340, 2762, 4119, 4125, 2762, 2762, 2762, 3284, 2762, 3447, 4131, 2762,
  2762, 2762, 3337, 3340, 3340, 2892, 3340, 3340, 2895, 2806, 2762, 2762, 3168, 3702, 3340, 2808, 2762, 3389, 3340,
  2808, 4027, 2762, 4121, 4146, 2806, 2762, 3394, 2809, 3224, 2762, 4158, 2762, 2762, 3429, 2762, 2762, 3365, 2762,
  4163, 2762, 2762, 2762, 3455, 2762, 2762, 4046, 2762, 2809, 3513, 2762, 2762, 3460, 2809, 2808, 2762, 2762, 2763,
  3340, 2880, 2808, 2762, 2762, 3480, 2762, 2809, 3340, 3340, 3340, 2892, 2851, 3340, 3708, 2894, 3711, 4181, 4179,
  4180, 4167, 3710, 3709, 3708, 4185, 3340, 2892, 3340, 3340, 3340, 2893, 2723, 3943, 4194, 3337, 3340, 3340, 4075,
  2762, 3038, 3340, 3340, 3340, 3723, 3340, 3722, 3340, 3340, 3377, 3470, 0, 1029, 1029, 1029, 1029, 2122, 2560, 63, 0,
  0, 64, 0, 0, 3584, 0, 0, 0, 63, 4096, 0, 0, 4096, 0, 4096, 4096, 0, 0, 0, 67, 4096, 4096, 0, 62, 0, 0, 62, 2560, 5120,
  5120, 0, 0, 0, 256, 0, 3289, 3153, 3153, 0, 3153, 3187, 3153, 3298, 3153, 3153, 3153, 3153, 208, 3320, 3153, 3153,
  3323, 3345, 3153, 3153, 3153, 3193, 3388, 3153, 3153, 3153, 3221, 3407, 3153, 3153, 3153, 3242, 3153, 3418, 3153,
  3153, 3192, 3153, 3153, 3430, 3153, 3153, 3198, 3153, 3153, 3459, 3460, 3153, 0, 355, 0, 65, 0, 0, 0, 3153, 3153,
  3153, 0, 0, 0, 298, 3462, 3153, 0, 3153, 3153, 3240, 3153, 3466, 3153, 3153, 3202, 3153, 3521, 3153, 3153, 3153, 3246,
  3153, 3552, 3153, 3153, 3208, 3209, 6144, 6144, 0, 0, 66, 0, 0, 6656, 0, 0, 6656, 0, 75, 0, 0, 0, 329, 2122, 6656,
  6656, 0, 62, 63, 0, 102, 0, 6656, 6656, 0, 71, 2122, 0, 75, 6656, 0, 76, 0, 0, 109, 2122, 7168, 0, 0, 0, 356, 0, 7680,
  0, 0, 70, 2122, 0, 8192, 0, 0, 0, 2122, 0, 0, 0, 62, 63, 0, 3154, 3154, 3154, 3154, 3154, 3154, 0, 62, 3197, 3153,
  3201, 3204, 3205, 3206, 3153, 3153, 3216, 3153, 3255, 3153, 3153, 3153, 3249, 3153, 3292, 3153, 3153, 3217, 3153,
  3306, 3153, 3308, 3153, 252, 0, 0, 103, 0, 257, 0, 3331, 3333, 3344, 3153, 3153, 3153, 3253, 3355, 3153, 3357, 3153,
  292, 0, 0, 4608, 0, 0, 0, 69, 3377, 3153, 3153, 3153, 3259, 3153, 3391, 3153, 3153, 3247, 3153, 3413, 3153, 3153,
  3153, 3272, 3153, 3450, 3153, 3153, 3252, 3153, 3153, 3465, 3153, 3153, 3256, 3153, 3491, 3153, 3153, 3153, 3275,
  3254, 3153, 3153, 3153, 3303, 3412, 3153, 3153, 3153, 3310, 3448, 3153, 3153, 3153, 3314, 0, 3464, 3153, 3153, 3260,
  3262, 3155, 3155, 3155, 3155, 3245, 3153, 3153, 3153, 3322, 3153, 3258, 3153, 3153, 3265, 3153, 3153, 15441, 3153,
  3153, 3267, 3153, 3321, 3153, 3153, 0, 62, 63, 3153, 3336, 3153, 3153, 3274, 3153, 3153, 3354, 3153, 3153, 3293, 3294,
  3153, 3386, 3153, 3153, 3295, 3153, 0, 331, 3153, 3153, 3296, 3153, 3408, 3153, 3153, 3153, 3337, 3436, 3153, 3153,
  3153, 3340, 3507, 3153, 3153, 3153, 3341, 3532, 3533, 3153, 3153, 3297, 3153, 3153, 3536, 3153, 3153, 3311, 3153,
  3156, 3156, 3156, 3156, 0, 62, 63, 101, 0, 0, 73, 0, 3199, 3153, 3153, 3153, 3346, 3356, 3153, 3153, 3153, 3359, 3425,
  3153, 0, 0, 327, 3519, 3153, 3153, 3153, 3362, 0, 3157, 3157, 3157, 3157, 3157, 3157, 0, 62, 113, 114, 3153, 3153,
  3338, 3339, 158, 0, 0, 0, 3155, 3251, 3153, 3153, 3153, 3375, 3153, 3266, 3153, 3269, 212, 24576, 213, 0, 78, 67, 0,
  80, 3166, 3166, 3166, 3166, 0, 13393, 3153, 3153, 3153, 3380, 3153, 3301, 3302, 3153, 3188, 3153, 3153, 3485, 3153,
  3153, 3304, 3305, 3153, 3189, 3153, 3153, 3342, 3153, 3153, 3307, 3153, 3153, 3347, 3153, 3153, 30289, 3153, 3153,
  3350, 3351, 11857, 3153, 3376, 3153, 3190, 3153, 3195, 3384, 3153, 26193, 3153, 3200, 3153, 3153, 3476, 3153, 3153,
  3411, 3153, 3153, 3352, 3153, 0, 25088, 34816, 0, 104, 0, 0, 79, 0, 27136, 3153, 3153, 3153, 3390, 25169, 3153, 3439,
  3153, 3207, 3153, 3210, 3441, 3442, 34897, 3153, 3211, 3153, 3153, 3493, 3153, 22528, 374, 3153, 3153, 3353, 3153,
  3153, 22910, 3153, 3153, 3360, 3153, 3153, 3458, 3153, 3153, 3373, 3153, 3468, 3153, 3153, 3153, 3392, 3501, 3153,
  3153, 3153, 3409, 3509, 8785, 3153, 3153, 3379, 3153, 3153, 3512, 3153, 3514, 36945, 3520, 3153, 3153, 3382, 3153,
  29265, 30801, 3153, 3153, 3387, 3153, 3525, 3153, 3153, 3153, 3414, 3153, 23121, 3535, 3153, 3212, 3153, 3153, 10833,
  3153, 3153, 37457, 37969, 3153, 3214, 3153, 3153, 3477, 3153, 76, 0, 2122, 0, 108, 0, 2122, 1029, 1029, 1029, 0, 62,
  63, 0, 0, 0, 0, 61, 76, 0, 3158, 3158, 3158, 3158, 0, 0, 18944, 0, 0, 111, 0, 3153, 3363, 0, 0, 154, 0, 3389, 3153,
  3153, 3153, 3421, 3159, 3159, 3159, 3159, 0, 62, 63, 35840, 0, 0, 0, 3161, 3153, 17489, 3153, 3153, 3410, 3153, 0,
  9728, 0, 0, 253, 0, 16465, 3153, 3153, 3153, 3423, 3542, 3153, 3153, 3153, 3432, 78, 3160, 3160, 3160, 3160, 3160,
  3160, 0, 62, 3220, 151, 0, 0, 254, 0, 3271, 3153, 3153, 3153, 3437, 214, 0, 0, 215, 3153, 3313, 3153, 3153, 3415,
  3153, 3153, 3316, 3317, 3153, 3222, 0, 0, 5632, 0, 295, 0, 0, 0, 3164, 3153, 3385, 3153, 3153, 3416, 3153, 3153, 3492,
  3153, 3153, 3417, 3153, 23633, 3153, 3153, 3153, 3443, 3153, 3483, 3153, 3153, 3420, 3153, 3161, 3161, 3161, 3161,
  3191, 3153, 3153, 3153, 3452, 3241, 3153, 3153, 3153, 3456, 3153, 3279, 0, 0, 296, 0, 3153, 3309, 3153, 3153, 3422,
  3153, 255, 0, 0, 0, 3167, 3153, 3343, 3153, 3153, 3434, 3153, 3361, 3153, 3153, 0, 209, 297, 0, 3153, 3153, 3449,
  3153, 3374, 3153, 3153, 3435, 3153, 3470, 3153, 3153, 3153, 3457, 3153, 3482, 3153, 3153, 3455, 3153, 3153, 3490,
  3153, 3153, 3463, 0, 3153, 3508, 3153, 3153, 3471, 3153, 3543, 3153, 3153, 3153, 3461, 3162, 3162, 3162, 3162, 0, 62,
  63, 155, 0, 0, 0, 3171, 3238, 3153, 3153, 3153, 3467, 3153, 3257, 3153, 3153, 3472, 3153, 0, 16896, 0, 19968, 3349,
  3153, 3153, 3153, 3475, 3372, 3153, 3153, 3153, 3481, 3444, 3153, 3445, 0, 110, 0, 0, 3404, 3153, 3469, 3153, 3153,
  3153, 3494, 68, 0, 0, 0, 3237, 0, 3163, 3163, 3163, 3163, 3163, 3163, 0, 62, 3153, 3261, 3153, 3264, 3153, 3277, 3153,
  3153, 3478, 3153, 3291, 3153, 3153, 3153, 3497, 3300, 3153, 3153, 3153, 3498, 328, 0, 0, 0, 4096, 3153, 3526, 3153,
  3153, 3479, 3153, 3153, 3555, 3153, 3153, 3484, 3153, 3153, 33873, 3153, 0, 293, 0, 3196, 3153, 3153, 3203, 161, 0, 0,
  0, 5120, 0, 3393, 3153, 3395, 3153, 3243, 3153, 3153, 3557, 3153, 3153, 3397, 0, 0, 330, 0, 3153, 3406, 3153, 3153,
  3486, 3153, 3153, 3453, 3153, 3153, 3489, 3153, 3560, 3153, 3153, 3153, 3504, 70, 0, 0, 0, 13824, 69, 61, 0, 0, 0,
  40448, 0, 0, 0, 3164, 3164, 3164, 3164, 156, 157, 0, 0, 1536, 0, 0, 0, 0, 29696, 0, 0, 3170, 3170, 3170, 3170, 0,
  3153, 3290, 3153, 3153, 3495, 3496, 3153, 3299, 3153, 3153, 3499, 3153, 3153, 29777, 3153, 3153, 3503, 3153, 3153,
  3358, 3153, 3153, 3511, 3153, 0, 294, 0, 0, 3371, 3153, 3153, 3383, 3153, 3153, 3513, 3153, 3153, 3419, 3153, 3153,
  3515, 3516, 3153, 3474, 3153, 3153, 3518, 3153, 3153, 14929, 3153, 3153, 3522, 3153, 3153, 3433, 3153, 3153, 3524,
  3153, 0, 3165, 3165, 3165, 3165, 3165, 3165, 100, 62, 3213, 3153, 3153, 3218, 162, 0, 0, 162, 3153, 3268, 3153, 3153,
  3538, 3539, 3153, 3273, 3153, 3153, 3541, 3153, 3312, 3153, 3153, 3315, 14417, 3153, 3153, 3153, 3506, 3153, 3378,
  3153, 3153, 3544, 3545, 3153, 3381, 3153, 3153, 3546, 3153, 3424, 3153, 3426, 0, 112, 0, 0, 6144, 0, 0, 2122, 0, 3429,
  3153, 3431, 3153, 3438, 3153, 3440, 3487, 3153, 3153, 3153, 3510, 3505, 3153, 3153, 3153, 3517, 3153, 3529, 3153,
  3153, 3551, 3153, 3534, 3153, 3153, 3153, 3531, 3153, 3558, 3153, 3153, 3554, 3153, 71, 0, 0, 0, 4608, 4608, 4608, 0,
  77, 0, 0, 0, 5120, 5120, 5120, 3153, 3394, 3153, 3153, 3559, 3153, 3153, 24145, 3153, 3153, 9297, 3153, 3153, 20561,
  3153, 3153, 10321, 3153, 28241, 3153, 3153, 3153, 3537, 3167, 3167, 3167, 3167, 152, 0, 0, 0, 6144, 6144, 6144, 160,
  0, 0, 0, 40960, 40960, 3263, 3153, 3153, 3153, 3540, 3335, 3153, 3153, 3153, 3547, 3153, 19537, 3153, 3153, 19025,
  3153, 3153, 11345, 3153, 3153, 22097, 3153, 3153, 12800, 0, 0, 159, 0, 0, 3447, 3153, 3153, 35409, 3153, 3153, 27648,
  3153, 3153, 3500, 3153, 3502, 3153, 12369, 3153, 3153, 28753, 3153, 3556, 3153, 3153, 3153, 3548, 3168, 3168, 3168,
  3168, 0, 62, 63, 3215, 3153, 3153, 3153, 3550, 3239, 3153, 3153, 3153, 3553, 3153, 3278, 3153, 0, 326, 0, 216, 3153,
  3153, 3153, 3561, 3334, 3153, 3153, 3153, 15953, 3153, 3396, 3153, 3153, 31825, 3153, 3153, 3451, 3153, 3153, 32337,
  3153, 3153, 3473, 3153, 3153, 33361, 3153, 3480, 3153, 3153, 3153, 18001, 3488, 3153, 3153, 3153, 21585, 3153, 3523,
  3153, 3153, 34385, 0, 3153, 3527, 3153, 3153, 36599, 3153, 72, 0, 0, 0, 164, 164, 3153, 3244, 3153, 3153, 3528, 3153,
  0, 3169, 3169, 3169, 3169, 3169, 3169, 0, 62, 3219, 3153, 0, 0, 3153, 3405, 3270, 3153, 3153, 3153, 26705, 3153, 3276,
  3153, 3153, 38481, 3153, 3318, 3153, 3153, 3153, 32849, 3171, 3171, 3171, 3171, 3194, 3153, 3153, 3153, 38993, 3153,
  3332, 3153, 3153, 3153, 39505, 3153, 3153, 3549, 3153, 3153, 40017, 0, 3153, 31313, 3153, 3153, 3248, 3153, 3153,
  3530, 3153, 25600, 0, 0, 0, 210, 0, 0, 163, 0, 0, 107, 0, 3153, 21073, 3153, 3153, 3250, 3153, 3153, 18513, 3153,
  40448, 0, 2122, 0, 211, 0, 0, 153, 0, 0, 105, 106, 0, 40448, 40448, 40448, 0, 0, 0, 40960, 2122, 0, 258, 3153, 3153,
  3348, 3153, 40960, 0, 40960, 40960
);

(:~
 : The DFA-state to expected-token-set mapping.
 :)
declare variable $p:EXPECTED as xs:integer+ :=
(
  92, 96, 100, 104, 125, 108, 114, 120, 134, 123, 287, 134, 135, 129, 133, 136, 140, 134, 147, 151, 143, 134, 167, 154,
  160, 160, 163, 157, 134, 134, 110, 284, 171, 175, 178, 184, 188, 181, 261, 192, 211, 260, 196, 116, 214, 221, 202,
  224, 200, 204, 208, 218, 234, 228, 232, 281, 281, 238, 242, 246, 266, 266, 294, 315, 250, 274, 266, 254, 266, 266,
  258, 265, 266, 268, 272, 266, 301, 305, 267, 303, 266, 278, 267, 291, 312, 298, 298, 298, 309, 319, 323, 327, 330,
  337, 341, 345, 346, 350, 354, 368, 358, 365, 362, 372, 376, 380, 384, 388, 403, 407, 440, 440, 443, 477, 441, 391,
  444, 444, 477, 494, 399, 413, 424, 440, 409, 392, 444, 396, 444, 391, 444, 417, 421, 438, 440, 440, 440, 440, 441,
  451, 658, 428, 437, 440, 450, 657, 461, 441, 451, 658, 434, 439, 440, 440, 440, 458, 466, 440, 470, 440, 440, 472,
  465, 440, 472, 466, 440, 442, 460, 440, 440, 476, 647, 445, 482, 490, 500, 504, 504, 507, 566, 485, 509, 532, 444,
  511, 534, 478, 515, 521, 525, 477, 555, 561, 444, 676, 517, 550, 557, 572, 610, 444, 444, 492, 496, 444, 453, 576,
  582, 595, 444, 619, 486, 510, 565, 444, 452, 542, 495, 444, 454, 578, 551, 571, 444, 541, 577, 550, 586, 592, 596,
  600, 452, 588, 594, 444, 619, 602, 603, 607, 596, 603, 607, 596, 614, 688, 687, 689, 444, 618, 634, 637, 641, 645,
  333, 656, 444, 651, 662, 666, 444, 444, 539, 543, 547, 652, 444, 444, 444, 444, 670, 665, 675, 526, 444, 444, 651,
  444, 671, 681, 527, 444, 587, 594, 444, 567, 486, 444, 417, 430, 424, 680, 444, 444, 444, 623, 629, 629, 444, 693,
  687, 444, 670, 695, 687, 528, 444, 444, 444, 535, 685, 444, 535, 685, 444, 444, 628, 627, 630, 707, 699, 446, 706,
  704, 702, 711, 716, 717, 718, 715, 128, 256, 2048, 0, 0, 31, 960, 2, 6, 18, 1026, 4098, 16386, 262146, 16777218,
  67108866, 2, 2, 2, 2, 2, 2, 136, 8198, 66, 130, 770, 33282, 6150, 6274, 130, 4866, 83886082, 834, 6914, 770, 770,
  6146, 6146, 2, 2, 392, 6146, 6274, 770, -84213728, -84213726, -84213726, -84213598, -84212958, -84180446, -84207582,
  -84213726, -84213598, -84205534, -84207454, -84211550, -84207454, 0, 16, 16, 262144, 16777216, 67108864, 0, 0, 0, 8,
  8192, 0, 0, 196640, 1572896, 32, 196640, 1572896, 14680096, 973078560, -1073741792, 32, 32, 0, 262144, 6291488,
  8388640, 33554464, 134217760, 196640, 524320, 1048608, 2097184, 4194336, 8388640, 134217760, 268435488, 536870944,
  1073741856, -2147483616, 524320, 2097184, 4194336, 8388640, 33554464, 134217760, 524320, 2097184, 8388640, 268435488,
  1073741856, -2147483616, 32, 32, 32, 32, 0, 0, 0, 0, 1, 2, 32, 16777216, 0, 0, 0, 4, 8, 128, 32, 0, 65568, 131104,
  8388640, 268435488, -2147483616, 131104, 8388640, 268435488, 32, 32, 32, 8388640, 32, 32, 32, 65568, 0, 131072, 0, 0,
  0, 6, 0, 131072, 2097152, 2048, 32768, 65536, 33554432, 0, 0, 32768, 131072, 0, 2048, 65536, 0, 2097152, 1048576, 0,
  1048640, 16, 1, 3145792, -3309634, -3309634, -3309634, -3309634, 131072, 0, 0, 1, 2097152, 64, 1048576, 56, 896, 1024,
  6144, 8192, 16384, 90112, 786432, 264241152, 268435456, -536870912, 0, 0, 0, 8, 0, 0, 64, 1048576, 3145728, 0, 0, 0,
  7, 0, 2, 4, 8, 32, 128, 256, 512, 1024, 6144, 24576, 65536, 262144, 524288, 4194304, 16777216, 786432, 4194304,
  8388608, 16777216, 33554432, 67108864, 234881024, 268435456, 1610612736, -2147483648, 1048576, 0, 0, 0, 16, 2048,
  67108864, 134217728, 536870912, 1073741824, -2147483648, 128, 256, 1024, 6144, 16384, 65536, 16384, 65536, 524288,
  4194304, 0, 4, 128, 1024, 4096, 16384, 6144, 16384, 4194304, 16777216, 134217728, 536870912, 0, 0, 0, 0, 2097152, 0,
  0, 0, 128, 1024, 4096, 4194304, 16777216, 134217728, 536870912, 1073741824, 0, 1024, 4096, 536870912, 1024, 0, 0, 0,
  2048, 8, 32, 16384, 32768, 0, 16384, 0, 0, 0, 16384, 16384, 0, 16351, 16351, 32735, 16351, 16351, 16351, 65503, 65503,
  65503, 32735, 65503, 65503, 0, 0, 1, 33619968, 0, 8, 32, 0, 0, 15360, 0, 0, 0, 65568, 131104, 0, 15, 16, 192, 768,
  1024, 2048, 12288, 0, 7, 8, 16, 128, 12288, 0, 0, 0, 131072, 128, 768, 1024, 4096, 0, 128, 768, 4096, 0, 0, 0, 1024,
  0, 0, 7, 128, 768, 1024, 2048, 0, 7, 256, 512, 0, 1, 2, 4, 256, 512, 0, 0, 4, 256, 512, 1, 4, 2, 4, 1, 2, 4, 2
);

(:~
 : The token-string table.
 :)
declare variable $p:TOKEN as xs:string+ :=
(
  "EPSILON",
  "Whitespace",
  "EOF",
  "noParExpression",
  "quotedstr",
  "NCName",
  "'$'",
  "'('",
  "')'",
  "','",
  "'/'",
  "':'",
  "'='",
  "'=>'",
  "'['",
  "']'",
  "'add-attribute'",
  "'add-xml-base'",
  "'catch'",
  "'compare'",
  "'count'",
  "'default'",
  "'delete'",
  "'directory-list'",
  "'document'",
  "'else'",
  "'empty'",
  "'error'",
  "'escape-markup'",
  "'exec'",
  "'filter'",
  "'for-each'",
  "'from'",
  "'hash'",
  "'http-request'",
  "'identity'",
  "'if'",
  "'insert'",
  "'item'",
  "'label-elements'",
  "'library'",
  "'load'",
  "'make-absolute-uris'",
  "'namespace'",
  "'namespace-rename'",
  "'pack'",
  "'parameters'",
  "'pipe'",
  "'pipeline'",
  "'primary'",
  "'rename'",
  "'replace'",
  "'sequence'",
  "'serialized'",
  "'set-attributes'",
  "'sink'",
  "'split-sequence'",
  "'step'",
  "'store'",
  "'string-replace'",
  "'try'",
  "'unescape-markup'",
  "'unwrap'",
  "'uuid'",
  "'validate-with-relax-ng'",
  "'validate-with-schematron'",
  "'validate-with-xml-schema'",
  "'variable'",
  "'viewport'",
  "'with'",
  "'wrap'",
  "'wrap-sequence'",
  "'www-form-urldecode'",
  "'www-form-urlencode'",
  "'xinclude'",
  "'xquery'",
  "'xsl-formatter'",
  "'xslt'",
  "'{'",
  "'}'"
);

(:~
 : Match next token in input string, starting at given index, using
 : the DFA entry state for the set of tokens that are expected in
 : the current context.
 :
 : @param $input the input string.
 : @param $begin the index where to start in input string.
 : @param $token-set the expected token set id.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:match($input as xs:string,
                         $begin as xs:integer,
                         $token-set as xs:integer) as xs:integer+
{
  let $result := $p:INITIAL[1 + $token-set]
  return p:transition($input,
                      $begin,
                      $begin,
                      $begin,
                      $result,
                      $result mod 512,
                      0)
};

(:~
 : The DFA state transition function. If we are in a valid DFA state, save
 : it's result annotation, consume one input codepoint, calculate the next
 : state, and use tail recursion to do the same again. Otherwise, return
 : any valid result or a negative DFA state id in case of an error.
 :
 : @param $input the input string.
 : @param $begin the begin index of the current token in the input string.
 : @param $current the index of the current position in the input string.
 : @param $end the end index of the result in the input string.
 : @param $result the result code.
 : @param $current-state the current DFA state.
 : @param $previous-state the  previous DFA state.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:transition($input as xs:string,
                              $begin as xs:integer,
                              $current as xs:integer,
                              $end as xs:integer,
                              $result as xs:integer,
                              $current-state as xs:integer,
                              $previous-state as xs:integer) as xs:integer+
{
  if ($current-state = 0) then
    let $result := $result idiv 512
    return
      if ($result != 0) then
      (
        $result - 1,
        $begin,
        $end
      )
      else
      (
        - $previous-state,
        $begin,
        $current - 1
      )
  else
    let $c0 := (string-to-codepoints(substring($input, $current, 1)), 0)[1]
    let $c1 :=
      if ($c0 < 128) then
        $p:MAP0[1 + $c0]
      else if ($c0 < 55296) then
        let $c1 := $c0 idiv 16
        let $c2 := $c1 idiv 32
        return $p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]
      else
        p:map2($c0, 1, 5)
    let $current := $current + 1
    let $i0 := 489 * $c1 + $current-state - 1
    let $i1 := $i0 idiv 4
    let $i2 := $i1 idiv 4
    let $next-state := $p:TRANSITION[$i0 mod 4 + $p:TRANSITION[$i1 mod 4 + $p:TRANSITION[$i2 + 1] + 1] + 1]
    return
      if ($next-state > 511) then
        p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
      else
        p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
};

(:~
 : Recursively translate one 32-bit chunk of an expected token bitset
 : to the corresponding sequence of token strings.
 :
 : @param $result the result of previous recursion levels.
 : @param $chunk the 32-bit chunk of the expected token bitset.
 : @param $base-token-code the token code of bit 0 in the current chunk.
 : @return the set of token strings.
 :)
declare function p:token($result as xs:string*,
                         $chunk as xs:integer,
                         $base-token-code as xs:integer) as xs:string*
{
  if ($chunk = 0) then
    $result
  else
    p:token
    (
      ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
      if ($chunk < 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
      $base-token-code + 1
    )
};

(:~
 : Calculate expected token set for a given DFA state as a sequence
 : of strings.
 :
 : @param $state the DFA state.
 : @return the set of token strings
 :)
declare function p:expected-token-set($state as xs:integer) as xs:string*
{
  if ($state > 0) then
    for $t in 0 to 2
    let $i0 := $t * 489 + $state - 1
    let $i1 := $i0 idiv 4
    let $i2 := $i1 idiv 4
    return p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 mod 4 + $p:EXPECTED[$i2 + 1] + 1] + 1], $t * 32 + 1)
  else
    ()
};

(:~
 : Classify codepoint by doing a tail recursive binary search for a
 : matching codepoint range entry in MAP2, the codepoint to charclass
 : map for codepoints above the surrogate block.
 :
 : @param $c the codepoint.
 : @param $lo the binary search lower bound map index.
 : @param $hi the binary search upper bound map index.
 : @return the character class.
 :)
declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer
{
  if ($lo > $hi) then
    0
  else
    let $m := ($hi + $lo) idiv 2
    return
      if ($p:MAP2[$m] > $c) then
        p:map2($c, $lo, $m - 1)
      else if ($p:MAP2[5 + $m] < $c) then
        p:map2($c, $m + 1, $hi)
      else
        $p:MAP2[10 + $m]
};

(:~
 : The index of the parser state for accessing the combined
 : (i.e. level > 1) lookahead code.
 :)
declare variable $p:lk := 1;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the token that has been shifted.
 :)
declare variable $p:b0 := 2;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the token that has been shifted.
 :)
declare variable $p:e0 := 3;

(:~
 : The index of the parser state for accessing the code of the
 : level-1-lookahead token.
 :)
declare variable $p:l1 := 4;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-1-lookahead token.
 :)
declare variable $p:b1 := 5;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-1-lookahead token.
 :)
declare variable $p:e1 := 6;

(:~
 : The index of the parser state for accessing the code of the
 : level-2-lookahead token.
 :)
declare variable $p:l2 := 7;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-2-lookahead token.
 :)
declare variable $p:b2 := 8;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-2-lookahead token.
 :)
declare variable $p:e2 := 9;

(:~
 : The index of the parser state for accessing the code of the
 : level-3-lookahead token.
 :)
declare variable $p:l3 := 10;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-3-lookahead token.
 :)
declare variable $p:b3 := 11;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-3-lookahead token.
 :)
declare variable $p:e3 := 12;

(:~
 : The index of the parser state for accessing the token code that
 : was expected when an error was found.
 :)
declare variable $p:error := 13;

(:~
 : The index of the parser state for accessing the memoization
 : of backtracking results.
 :)
declare variable $p:memo := 14;

(:~
 : The index of the parser state that points to the first entry
 : used for collecting action results.
 :)
declare variable $p:result := 15;

(:~
 : Create a textual error message from a parsing error.
 :
 : @param $input the input string.
 : @param $error the parsing error descriptor.
 : @return the error message.
 :)
declare function p:error-message($input as xs:string, $error as element(error)) as xs:string
{
  let $begin := xs:integer($error/@b)
  let $context := string-to-codepoints(substring($input, 1, $begin - 1))
  let $linefeeds := index-of($context, 10)
  let $line := count($linefeeds) + 1
  let $column := ($begin - $linefeeds[last()], $begin)[1]
  return
    if ($error/@o) then
      concat
      (
        "syntax error, found ", $p:TOKEN[$error/@o + 1], "&#10;",
        "while expecting ", $p:TOKEN[$error/@x + 1], "&#10;",
        if ($error/@e = $begin) then
          ""
        else
          concat("after successfully scanning ", string($error/@e - $begin), " characters "),
        "at line ", string($line), ", column ", string($column), "&#10;",
        "...", substring($input, $begin, 32), "..."
      )
    else
      let $expected := p:expected-token-set($error/@s)
      return
        concat
        (
          "lexical analysis failed&#10;",
          "while expecting ",
          "["[exists($expected[2])],
          string-join($expected, ", "),
          "]"[exists($expected[2])],
          "&#10;",
          if ($error/@e = $begin) then
            ""
          else
            concat("after successfully scanning ", string($error/@e - $begin), " characters "),
          "at line ", string($line), ", column ", string($column), "&#10;",
          "...", substring($input, $begin, 32), "..."
        )
};

(:~
 : Shift one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : parser state.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:shift($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] = $code) then
  (
    subsequence($state, $p:l1, $p:e3 - $p:l1 + 1),
    0,
    $state[$p:e3],
    subsequence($state, $p:e3),
    if ($state[$p:e0] != $state[$p:b1]) then
      text {substring($input, $state[$p:e0], $state[$p:b1] - $state[$p:e0])}
    else
      (),
    let $name := $p:TOKEN[1 + $state[$p:l1]]
    let $content := substring($input, $state[$p:b1], $state[$p:e1] - $state[$p:b1])
    return
      if (starts-with($name, "'")) then
        element TOKEN {$content}
      else
        element {$name} {$content}
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      if ($state[$p:e1] < $state[$p:memo]/@e) then
        $state[$p:memo]/@*
      else
      (
        attribute b {$state[$p:b1]},
        attribute e {$state[$p:e1]},
        if ($state[$p:l1] < 0) then
          attribute s {- $state[$p:l1]}
        else
          (attribute o {$state[$p:l1]}, attribute x {$code})
      )
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Use p:match to fetch the next token, but skip any leading
 : whitespace.
 :
 : @param $input the input string.
 : @param $begin the index where to start.
 : @param $token-set the valid token set id.
 : @return a sequence of three values: the token code of the result
 : token, with input string positions of token begin and end.
 :)
declare function p:matchW($input as xs:string,
                          $begin as xs:integer,
                          $token-set as xs:integer) as xs:integer+
{
  let $match := p:match($input, $begin, $token-set)
  return
    if ($match[1] = 1) then                                 (: Whitespace :)
      p:matchW($input, $match[3], $token-set)
    else
      $match
};

(:~
 : Lookahead one token on level 1 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead1W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] != 0) then
    $state
  else
    let $match := p:matchW($input, $state[$p:b1], $set)
    return
    (
      $match[1],
      subsequence($state, $p:lk + 1, $p:l1 - $p:lk - 1),
      $match,
      0, $match[3], 0,
      subsequence($state, $p:e2 + 1)
    )
};

(:~
 : Lookahead one token on level 2 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead2W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l2] != 0) then
      subsequence($state, $p:l2, $p:e2 - $p:l2 + 1)
    else
      p:matchW($input, $state[$p:b2], $set)
  return
  (
    $match[1] * 128 + $state[$p:l1],
    subsequence($state, $p:lk + 1, $p:l2 - $p:lk - 1),
    $match,
    0, $match[3], 0,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 3 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead3W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l3] != 0) then
      subsequence($state, $p:l3, $p:e3 - $p:l3 + 1)
    else
      p:matchW($input, $state[$p:b3], $set)
  return
  (
    $match[1] * 16384 + $state[$p:lk],
    subsequence($state, $p:lk + 1, $p:l3 - $p:lk - 1),
    $match,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 1.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead1($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] != 0) then
    $state
  else
    let $match := p:match($input, $state[$p:b1], $set)
    return
    (
      $match[1],
      subsequence($state, $p:lk + 1, $p:l1 - $p:lk - 1),
      $match,
      0, $match[3], 0,
      subsequence($state, $p:e2 + 1)
    )
};

(:~
 : Lookahead one token on level 2 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead2($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l2] != 0) then
      subsequence($state, $p:l2, $p:e2 - $p:l2 + 1)
    else
      p:match($input, $state[$p:e1], $set)
  return
  (
    $match[1] * 128 + $state[$p:l1],
    subsequence($state, $p:lk + 1, $p:l2 - $p:lk - 1),
    $match,
    0, $match[3], 0,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 3 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead3($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l3] != 0) then
      subsequence($state, $p:l3, $p:e3 - $p:l3 + 1)
    else
      p:match($input, $state[$p:e2], $set)
  return
  (
    $match[1] * 16384 + $state[$p:lk],
    subsequence($state, $p:lk + 1, $p:l3 - $p:lk - 1),
    $match,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Reduce the result stack. Pop $count element, wrap them in a
 : new element named $name, and push the new element.
 :
 : @param $state the parser state.
 : @param $name the name of the result node.
 : @param $count the number of child nodes.
 : @return the updated parser state.
 :)
declare function p:reduce($state as item()+, $name as xs:string, $count as xs:integer) as item()+
{
  subsequence($state, 1, $count),
  element {$name}
  {
    subsequence($state, $count + 1)
  }
};

(:~
 : Strip result from parser state, in order to avoid carrying it while
 : backtracking.
 :
 : @param $state the parser state after an alternative failed.
 : @return the updated parser state.
 :)
declare function p:strip-result($state as item()+) as item()+
{
  subsequence($state, 1, $p:memo)
};

(:~
 : Restore parser state after unsuccessfully trying an alternative,
 : merging any memoization that was collected on the way.
 :
 : @param $backtrack the parser state before backtracking started.
 : @param $state the parser state after an alternative failed.
 : @return the updated parser state.
 :)
declare function p:restore($backtrack as item()+,
                           $state as item()+) as item()+
{
  subsequence($backtrack, 1, $p:memo - 1),
  element memo{$state[$p:error]/@*, $state[$p:memo]/value}
};

(:~
 : Memoize the backtracking result that was computed at decision point
 : $i for input position $state[$p:e0].
 :
 : @param $backtrack the parser state before backtracking started.
 : @param $state the parser state after successfully trying an alternative.
 : @param $v the id of the successful alternative.
 : @param $i the decision point id.
 : @return the updated parser state.
 :)
declare function p:memoize($backtrack as item()+,
                           $state as item()+,
                           $v as xs:integer,
                           $i as xs:integer) as item()+
{
  $v,
  subsequence($backtrack, $p:lk + 1, $p:memo - $p:lk - 1),
  element memo
  {
    $state[$p:memo]/value,
    element value {attribute key {$backtrack[$p:e0] * 2 + $i}, $v}
  },
  subsequence($backtrack, $p:memo + 1)
};

(:~
 : Retrieve memoized backtracking result for decision point $i
 : and input position $state[$p:e0] into $state[$p:lk].
 :
 : @param $state the parser state.
 : @param $i the decision point id.
 : @return the updated parser state.
 :)
declare function p:memoized($state as item()+, $i as xs:integer) as item()+
{
  let $value := data($state[$p:memo]/value[@key = $state[$p:e0] * 2 + $i])
  return
  (
    if ($value) then $value else 0,
    subsequence($state, $p:lk + 1)
  )
};

(:~
 : Parse library.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-library($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(40, $input, $state)                 (: 'library' :)
  return p:reduce($state, "library", $count)
};

(:~
 : Parse pipeline.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-pipeline($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 48) then                            (: 'pipeline' :)
      let $state := p:lookahead2W(57, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 5                              (: NCName^Token :)
          or $state[$p:lk] = 16                             (: 'add-attribute' :)
          or $state[$p:lk] = 17                             (: 'add-xml-base' :)
          or $state[$p:lk] = 19                             (: 'compare' :)
          or $state[$p:lk] = 20                             (: 'count' :)
          or $state[$p:lk] = 21                             (: 'default' :)
          or $state[$p:lk] = 22                             (: 'delete' :)
          or $state[$p:lk] = 23                             (: 'directory-list' :)
          or $state[$p:lk] = 25                             (: 'else' :)
          or $state[$p:lk] = 27                             (: 'error' :)
          or $state[$p:lk] = 28                             (: 'escape-markup' :)
          or $state[$p:lk] = 29                             (: 'exec' :)
          or $state[$p:lk] = 30                             (: 'filter' :)
          or $state[$p:lk] = 31                             (: 'for-each' :)
          or $state[$p:lk] = 33                             (: 'hash' :)
          or $state[$p:lk] = 34                             (: 'http-request' :)
          or $state[$p:lk] = 35                             (: 'identity' :)
          or $state[$p:lk] = 36                             (: 'if' :)
          or $state[$p:lk] = 37                             (: 'insert' :)
          or $state[$p:lk] = 39                             (: 'label-elements' :)
          or $state[$p:lk] = 40                             (: 'library' :)
          or $state[$p:lk] = 41                             (: 'load' :)
          or $state[$p:lk] = 42                             (: 'make-absolute-uris' :)
          or $state[$p:lk] = 43                             (: 'namespace' :)
          or $state[$p:lk] = 44                             (: 'namespace-rename' :)
          or $state[$p:lk] = 45                             (: 'pack' :)
          or $state[$p:lk] = 46                             (: 'parameters' :)
          or $state[$p:lk] = 50                             (: 'rename' :)
          or $state[$p:lk] = 51                             (: 'replace' :)
          or $state[$p:lk] = 54                             (: 'set-attributes' :)
          or $state[$p:lk] = 55                             (: 'sink' :)
          or $state[$p:lk] = 56                             (: 'split-sequence' :)
          or $state[$p:lk] = 57                             (: 'step' :)
          or $state[$p:lk] = 58                             (: 'store' :)
          or $state[$p:lk] = 59                             (: 'string-replace' :)
          or $state[$p:lk] = 60                             (: 'try' :)
          or $state[$p:lk] = 61                             (: 'unescape-markup' :)
          or $state[$p:lk] = 62                             (: 'unwrap' :)
          or $state[$p:lk] = 63                             (: 'uuid' :)
          or $state[$p:lk] = 64                             (: 'validate-with-relax-ng' :)
          or $state[$p:lk] = 65                             (: 'validate-with-schematron' :)
          or $state[$p:lk] = 66                             (: 'validate-with-xml-schema' :)
          or $state[$p:lk] = 67                             (: 'variable' :)
          or $state[$p:lk] = 68                             (: 'viewport' :)
          or $state[$p:lk] = 70                             (: 'wrap' :)
          or $state[$p:lk] = 71                             (: 'wrap-sequence' :)
          or $state[$p:lk] = 72                             (: 'www-form-urldecode' :)
          or $state[$p:lk] = 73                             (: 'www-form-urlencode' :)
          or $state[$p:lk] = 74                             (: 'xinclude' :)
          or $state[$p:lk] = 75                             (: 'xquery' :)
          or $state[$p:lk] = 76                             (: 'xsl-formatter' :)
          or $state[$p:lk] = 77                             (: 'xslt' :)
          or $state[$p:lk] = 1456                           (: 'pipeline' ':' :)
          or $state[$p:lk] = 1584) then                     (: 'pipeline' '=' :)
      let $state := p:parse-QName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(16, $input, $state)           (: Whitespace | 'pipeline' :)
  let $state := p:shift(48, $input, $state)                 (: 'pipeline' :)
  let $state := p:lookahead1W(50, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 7                             (: '(' :)
         and $state[$p:l1] != 78) then                      (: '{' :)
      let $state := p:parse-CName($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(25, $input, $state)           (: Whitespace | '(' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:parse-inports($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(23, $input, $state)           (: Whitespace | EOF | '=>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:parse-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "pipeline", $count)
};

(:~
 : Try parsing pipeline.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-pipeline($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 48) then                            (: 'pipeline' :)
      let $state := p:lookahead2W(57, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 5                              (: NCName^Token :)
          or $state[$p:lk] = 16                             (: 'add-attribute' :)
          or $state[$p:lk] = 17                             (: 'add-xml-base' :)
          or $state[$p:lk] = 19                             (: 'compare' :)
          or $state[$p:lk] = 20                             (: 'count' :)
          or $state[$p:lk] = 21                             (: 'default' :)
          or $state[$p:lk] = 22                             (: 'delete' :)
          or $state[$p:lk] = 23                             (: 'directory-list' :)
          or $state[$p:lk] = 25                             (: 'else' :)
          or $state[$p:lk] = 27                             (: 'error' :)
          or $state[$p:lk] = 28                             (: 'escape-markup' :)
          or $state[$p:lk] = 29                             (: 'exec' :)
          or $state[$p:lk] = 30                             (: 'filter' :)
          or $state[$p:lk] = 31                             (: 'for-each' :)
          or $state[$p:lk] = 33                             (: 'hash' :)
          or $state[$p:lk] = 34                             (: 'http-request' :)
          or $state[$p:lk] = 35                             (: 'identity' :)
          or $state[$p:lk] = 36                             (: 'if' :)
          or $state[$p:lk] = 37                             (: 'insert' :)
          or $state[$p:lk] = 39                             (: 'label-elements' :)
          or $state[$p:lk] = 40                             (: 'library' :)
          or $state[$p:lk] = 41                             (: 'load' :)
          or $state[$p:lk] = 42                             (: 'make-absolute-uris' :)
          or $state[$p:lk] = 43                             (: 'namespace' :)
          or $state[$p:lk] = 44                             (: 'namespace-rename' :)
          or $state[$p:lk] = 45                             (: 'pack' :)
          or $state[$p:lk] = 46                             (: 'parameters' :)
          or $state[$p:lk] = 50                             (: 'rename' :)
          or $state[$p:lk] = 51                             (: 'replace' :)
          or $state[$p:lk] = 54                             (: 'set-attributes' :)
          or $state[$p:lk] = 55                             (: 'sink' :)
          or $state[$p:lk] = 56                             (: 'split-sequence' :)
          or $state[$p:lk] = 57                             (: 'step' :)
          or $state[$p:lk] = 58                             (: 'store' :)
          or $state[$p:lk] = 59                             (: 'string-replace' :)
          or $state[$p:lk] = 60                             (: 'try' :)
          or $state[$p:lk] = 61                             (: 'unescape-markup' :)
          or $state[$p:lk] = 62                             (: 'unwrap' :)
          or $state[$p:lk] = 63                             (: 'uuid' :)
          or $state[$p:lk] = 64                             (: 'validate-with-relax-ng' :)
          or $state[$p:lk] = 65                             (: 'validate-with-schematron' :)
          or $state[$p:lk] = 66                             (: 'validate-with-xml-schema' :)
          or $state[$p:lk] = 67                             (: 'variable' :)
          or $state[$p:lk] = 68                             (: 'viewport' :)
          or $state[$p:lk] = 70                             (: 'wrap' :)
          or $state[$p:lk] = 71                             (: 'wrap-sequence' :)
          or $state[$p:lk] = 72                             (: 'www-form-urldecode' :)
          or $state[$p:lk] = 73                             (: 'www-form-urlencode' :)
          or $state[$p:lk] = 74                             (: 'xinclude' :)
          or $state[$p:lk] = 75                             (: 'xquery' :)
          or $state[$p:lk] = 76                             (: 'xsl-formatter' :)
          or $state[$p:lk] = 77                             (: 'xslt' :)
          or $state[$p:lk] = 1456                           (: 'pipeline' ':' :)
          or $state[$p:lk] = 1584) then                     (: 'pipeline' '=' :)
      let $state := p:try-QName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(16, $input, $state)           (: Whitespace | 'pipeline' :)
  let $state := p:shift(48, $input, $state)                 (: 'pipeline' :)
  let $state := p:lookahead1W(50, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 7                             (: '(' :)
         and $state[$p:l1] != 78) then                      (: '{' :)
      let $state := p:try-CName($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(25, $input, $state)           (: Whitespace | '(' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:try-inports($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(23, $input, $state)           (: Whitespace | EOF | '=>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:try-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "pipeline", $count)
};

(:~
 : Parse atomicStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-atomicStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 5                                   (: 'default' :)
     or $state[$p:l1] = 21                                  (: 'else' :)
     or $state[$p:l1] = 25                                  (: 'for-each' :)
     or $state[$p:l1] = 31                                  (: 'if' :)
     or $state[$p:l1] = 36                                  (: 'library' :)
     or $state[$p:l1] = 40                                  (: 'namespace' :)
     or $state[$p:l1] = 43                                  (: 'pipeline' :)
     or $state[$p:l1] = 48                                  (: 'step' :)
     or $state[$p:l1] = 57                                  (: 'try' :)
     or $state[$p:l1] = 60                                  (: 'variable' :)
     or $state[$p:l1] = 67                                  (: 'viewport' :)
     or $state[$p:l1] = 68) then                            (: 'viewport' :)
      let $state := p:lookahead2W(28, $input, $state)       (: Whitespace | ':' | '=' :)
      return $state
    else if ($state[$p:l1] = 16                             (: 'add-xml-base' :)
          or $state[$p:l1] = 17                             (: 'compare' :)
          or $state[$p:l1] = 19                             (: 'count' :)
          or $state[$p:l1] = 20                             (: 'delete' :)
          or $state[$p:l1] = 22                             (: 'directory-list' :)
          or $state[$p:l1] = 23                             (: 'error' :)
          or $state[$p:l1] = 27                             (: 'escape-markup' :)
          or $state[$p:l1] = 28                             (: 'exec' :)
          or $state[$p:l1] = 29                             (: 'filter' :)
          or $state[$p:l1] = 30                             (: 'hash' :)
          or $state[$p:l1] = 33                             (: 'http-request' :)
          or $state[$p:l1] = 34                             (: 'identity' :)
          or $state[$p:l1] = 35                             (: 'insert' :)
          or $state[$p:l1] = 37                             (: 'label-elements' :)
          or $state[$p:l1] = 39                             (: 'load' :)
          or $state[$p:l1] = 41                             (: 'make-absolute-uris' :)
          or $state[$p:l1] = 42                             (: 'namespace-rename' :)
          or $state[$p:l1] = 44                             (: 'pack' :)
          or $state[$p:l1] = 45                             (: 'parameters' :)
          or $state[$p:l1] = 46                             (: 'rename' :)
          or $state[$p:l1] = 50                             (: 'replace' :)
          or $state[$p:l1] = 51                             (: 'set-attributes' :)
          or $state[$p:l1] = 54                             (: 'sink' :)
          or $state[$p:l1] = 55                             (: 'split-sequence' :)
          or $state[$p:l1] = 56                             (: 'store' :)
          or $state[$p:l1] = 58                             (: 'string-replace' :)
          or $state[$p:l1] = 59                             (: 'unescape-markup' :)
          or $state[$p:l1] = 61                             (: 'unwrap' :)
          or $state[$p:l1] = 62                             (: 'uuid' :)
          or $state[$p:l1] = 63                             (: 'validate-with-relax-ng' :)
          or $state[$p:l1] = 64                             (: 'validate-with-schematron' :)
          or $state[$p:l1] = 65                             (: 'validate-with-xml-schema' :)
          or $state[$p:l1] = 66                             (: 'wrap' :)
          or $state[$p:l1] = 70                             (: 'wrap-sequence' :)
          or $state[$p:l1] = 71                             (: 'www-form-urldecode' :)
          or $state[$p:l1] = 72                             (: 'www-form-urlencode' :)
          or $state[$p:l1] = 73                             (: 'xinclude' :)
          or $state[$p:l1] = 74                             (: 'xquery' :)
          or $state[$p:l1] = 75                             (: 'xsl-formatter' :)
          or $state[$p:l1] = 76                             (: 'xslt' :)
          or $state[$p:l1] = 77) then                       (: 'xslt' :)
      let $state := p:lookahead2W(59, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 1541                           (: NCName^Token '=' :)
          or $state[$p:lk] = 1552                           (: 'add-attribute' '=' :)
          or $state[$p:lk] = 1553                           (: 'add-xml-base' '=' :)
          or $state[$p:lk] = 1555                           (: 'compare' '=' :)
          or $state[$p:lk] = 1556                           (: 'count' '=' :)
          or $state[$p:lk] = 1557                           (: 'default' '=' :)
          or $state[$p:lk] = 1558                           (: 'delete' '=' :)
          or $state[$p:lk] = 1559                           (: 'directory-list' '=' :)
          or $state[$p:lk] = 1561                           (: 'else' '=' :)
          or $state[$p:lk] = 1563                           (: 'error' '=' :)
          or $state[$p:lk] = 1564                           (: 'escape-markup' '=' :)
          or $state[$p:lk] = 1565                           (: 'exec' '=' :)
          or $state[$p:lk] = 1566                           (: 'filter' '=' :)
          or $state[$p:lk] = 1567                           (: 'for-each' '=' :)
          or $state[$p:lk] = 1569                           (: 'hash' '=' :)
          or $state[$p:lk] = 1570                           (: 'http-request' '=' :)
          or $state[$p:lk] = 1571                           (: 'identity' '=' :)
          or $state[$p:lk] = 1572                           (: 'if' '=' :)
          or $state[$p:lk] = 1573                           (: 'insert' '=' :)
          or $state[$p:lk] = 1575                           (: 'label-elements' '=' :)
          or $state[$p:lk] = 1576                           (: 'library' '=' :)
          or $state[$p:lk] = 1577                           (: 'load' '=' :)
          or $state[$p:lk] = 1578                           (: 'make-absolute-uris' '=' :)
          or $state[$p:lk] = 1579                           (: 'namespace' '=' :)
          or $state[$p:lk] = 1580                           (: 'namespace-rename' '=' :)
          or $state[$p:lk] = 1581                           (: 'pack' '=' :)
          or $state[$p:lk] = 1582                           (: 'parameters' '=' :)
          or $state[$p:lk] = 1584                           (: 'pipeline' '=' :)
          or $state[$p:lk] = 1586                           (: 'rename' '=' :)
          or $state[$p:lk] = 1587                           (: 'replace' '=' :)
          or $state[$p:lk] = 1590                           (: 'set-attributes' '=' :)
          or $state[$p:lk] = 1591                           (: 'sink' '=' :)
          or $state[$p:lk] = 1592                           (: 'split-sequence' '=' :)
          or $state[$p:lk] = 1593                           (: 'step' '=' :)
          or $state[$p:lk] = 1594                           (: 'store' '=' :)
          or $state[$p:lk] = 1595                           (: 'string-replace' '=' :)
          or $state[$p:lk] = 1596                           (: 'try' '=' :)
          or $state[$p:lk] = 1597                           (: 'unescape-markup' '=' :)
          or $state[$p:lk] = 1598                           (: 'unwrap' '=' :)
          or $state[$p:lk] = 1599                           (: 'uuid' '=' :)
          or $state[$p:lk] = 1600                           (: 'validate-with-relax-ng' '=' :)
          or $state[$p:lk] = 1601                           (: 'validate-with-schematron' '=' :)
          or $state[$p:lk] = 1602                           (: 'validate-with-xml-schema' '=' :)
          or $state[$p:lk] = 1603                           (: 'variable' '=' :)
          or $state[$p:lk] = 1604                           (: 'viewport' '=' :)
          or $state[$p:lk] = 1606                           (: 'wrap' '=' :)
          or $state[$p:lk] = 1607                           (: 'wrap-sequence' '=' :)
          or $state[$p:lk] = 1608                           (: 'www-form-urldecode' '=' :)
          or $state[$p:lk] = 1609                           (: 'www-form-urlencode' '=' :)
          or $state[$p:lk] = 1610                           (: 'xinclude' '=' :)
          or $state[$p:lk] = 1611                           (: 'xquery' '=' :)
          or $state[$p:lk] = 1612                           (: 'xsl-formatter' '=' :)
          or $state[$p:lk] = 1613) then                     (: 'xslt' '=' :)
      let $state := p:parse-NCName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(48, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 16                                  (: 'add-xml-base' :)
     or $state[$p:l1] = 17                                  (: 'compare' :)
     or $state[$p:l1] = 19                                  (: 'count' :)
     or $state[$p:l1] = 20                                  (: 'delete' :)
     or $state[$p:l1] = 22                                  (: 'directory-list' :)
     or $state[$p:l1] = 23                                  (: 'error' :)
     or $state[$p:l1] = 27                                  (: 'escape-markup' :)
     or $state[$p:l1] = 28                                  (: 'exec' :)
     or $state[$p:l1] = 29                                  (: 'filter' :)
     or $state[$p:l1] = 30                                  (: 'hash' :)
     or $state[$p:l1] = 33                                  (: 'http-request' :)
     or $state[$p:l1] = 34                                  (: 'identity' :)
     or $state[$p:l1] = 35                                  (: 'insert' :)
     or $state[$p:l1] = 37                                  (: 'label-elements' :)
     or $state[$p:l1] = 39                                  (: 'load' :)
     or $state[$p:l1] = 41                                  (: 'make-absolute-uris' :)
     or $state[$p:l1] = 42                                  (: 'namespace-rename' :)
     or $state[$p:l1] = 44                                  (: 'pack' :)
     or $state[$p:l1] = 45                                  (: 'parameters' :)
     or $state[$p:l1] = 46                                  (: 'rename' :)
     or $state[$p:l1] = 50                                  (: 'replace' :)
     or $state[$p:l1] = 51                                  (: 'set-attributes' :)
     or $state[$p:l1] = 54                                  (: 'sink' :)
     or $state[$p:l1] = 55                                  (: 'split-sequence' :)
     or $state[$p:l1] = 56                                  (: 'store' :)
     or $state[$p:l1] = 58                                  (: 'string-replace' :)
     or $state[$p:l1] = 59                                  (: 'unescape-markup' :)
     or $state[$p:l1] = 61                                  (: 'unwrap' :)
     or $state[$p:l1] = 62                                  (: 'uuid' :)
     or $state[$p:l1] = 63                                  (: 'validate-with-relax-ng' :)
     or $state[$p:l1] = 64                                  (: 'validate-with-schematron' :)
     or $state[$p:l1] = 65                                  (: 'validate-with-xml-schema' :)
     or $state[$p:l1] = 66                                  (: 'wrap' :)
     or $state[$p:l1] = 70                                  (: 'wrap-sequence' :)
     or $state[$p:l1] = 71                                  (: 'www-form-urldecode' :)
     or $state[$p:l1] = 72                                  (: 'www-form-urlencode' :)
     or $state[$p:l1] = 73                                  (: 'xinclude' :)
     or $state[$p:l1] = 74                                  (: 'xquery' :)
     or $state[$p:l1] = 75                                  (: 'xsl-formatter' :)
     or $state[$p:l1] = 76                                  (: 'xslt' :)
     or $state[$p:l1] = 77) then                            (: 'xslt' :)
      let $state := p:lookahead2W(58, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 5                                   (: NCName^Token :)
     or $state[$p:lk] = 21                                  (: 'default' :)
     or $state[$p:lk] = 25                                  (: 'else' :)
     or $state[$p:lk] = 31                                  (: 'for-each' :)
     or $state[$p:lk] = 36                                  (: 'if' :)
     or $state[$p:lk] = 40                                  (: 'library' :)
     or $state[$p:lk] = 43                                  (: 'namespace' :)
     or $state[$p:lk] = 48                                  (: 'pipeline' :)
     or $state[$p:lk] = 57                                  (: 'step' :)
     or $state[$p:lk] = 60                                  (: 'try' :)
     or $state[$p:lk] = 67                                  (: 'variable' :)
     or $state[$p:lk] = 68                                  (: 'viewport' :)
     or $state[$p:lk] = 1424                                (: 'add-attribute' ':' :)
     or $state[$p:lk] = 1425                                (: 'add-xml-base' ':' :)
     or $state[$p:lk] = 1427                                (: 'compare' ':' :)
     or $state[$p:lk] = 1428                                (: 'count' ':' :)
     or $state[$p:lk] = 1430                                (: 'delete' ':' :)
     or $state[$p:lk] = 1431                                (: 'directory-list' ':' :)
     or $state[$p:lk] = 1435                                (: 'error' ':' :)
     or $state[$p:lk] = 1436                                (: 'escape-markup' ':' :)
     or $state[$p:lk] = 1437                                (: 'exec' ':' :)
     or $state[$p:lk] = 1438                                (: 'filter' ':' :)
     or $state[$p:lk] = 1441                                (: 'hash' ':' :)
     or $state[$p:lk] = 1442                                (: 'http-request' ':' :)
     or $state[$p:lk] = 1443                                (: 'identity' ':' :)
     or $state[$p:lk] = 1445                                (: 'insert' ':' :)
     or $state[$p:lk] = 1447                                (: 'label-elements' ':' :)
     or $state[$p:lk] = 1449                                (: 'load' ':' :)
     or $state[$p:lk] = 1450                                (: 'make-absolute-uris' ':' :)
     or $state[$p:lk] = 1452                                (: 'namespace-rename' ':' :)
     or $state[$p:lk] = 1453                                (: 'pack' ':' :)
     or $state[$p:lk] = 1454                                (: 'parameters' ':' :)
     or $state[$p:lk] = 1458                                (: 'rename' ':' :)
     or $state[$p:lk] = 1459                                (: 'replace' ':' :)
     or $state[$p:lk] = 1462                                (: 'set-attributes' ':' :)
     or $state[$p:lk] = 1463                                (: 'sink' ':' :)
     or $state[$p:lk] = 1464                                (: 'split-sequence' ':' :)
     or $state[$p:lk] = 1466                                (: 'store' ':' :)
     or $state[$p:lk] = 1467                                (: 'string-replace' ':' :)
     or $state[$p:lk] = 1469                                (: 'unescape-markup' ':' :)
     or $state[$p:lk] = 1470                                (: 'unwrap' ':' :)
     or $state[$p:lk] = 1471                                (: 'uuid' ':' :)
     or $state[$p:lk] = 1472                                (: 'validate-with-relax-ng' ':' :)
     or $state[$p:lk] = 1473                                (: 'validate-with-schematron' ':' :)
     or $state[$p:lk] = 1474                                (: 'validate-with-xml-schema' ':' :)
     or $state[$p:lk] = 1478                                (: 'wrap' ':' :)
     or $state[$p:lk] = 1479                                (: 'wrap-sequence' ':' :)
     or $state[$p:lk] = 1480                                (: 'www-form-urldecode' ':' :)
     or $state[$p:lk] = 1481                                (: 'www-form-urlencode' ':' :)
     or $state[$p:lk] = 1482                                (: 'xinclude' ':' :)
     or $state[$p:lk] = 1483                                (: 'xquery' ':' :)
     or $state[$p:lk] = 1484                                (: 'xsl-formatter' ':' :)
     or $state[$p:lk] = 1485) then                          (: 'xslt' ':' :)
      let $state := p:parse-CName($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state :=
        if ($state[$p:l1] = 17) then                        (: 'add-xml-base' :)
          let $state := p:shift(17, $input, $state)         (: 'add-xml-base' :)
          return $state
        else if ($state[$p:l1] = 16) then                   (: 'add-attribute' :)
          let $state := p:shift(16, $input, $state)         (: 'add-attribute' :)
          return $state
        else if ($state[$p:l1] = 19) then                   (: 'compare' :)
          let $state := p:shift(19, $input, $state)         (: 'compare' :)
          return $state
        else if ($state[$p:l1] = 20) then                   (: 'count' :)
          let $state := p:shift(20, $input, $state)         (: 'count' :)
          return $state
        else if ($state[$p:l1] = 22) then                   (: 'delete' :)
          let $state := p:shift(22, $input, $state)         (: 'delete' :)
          return $state
        else if ($state[$p:l1] = 23) then                   (: 'directory-list' :)
          let $state := p:shift(23, $input, $state)         (: 'directory-list' :)
          return $state
        else if ($state[$p:l1] = 27) then                   (: 'error' :)
          let $state := p:shift(27, $input, $state)         (: 'error' :)
          return $state
        else if ($state[$p:l1] = 28) then                   (: 'escape-markup' :)
          let $state := p:shift(28, $input, $state)         (: 'escape-markup' :)
          return $state
        else if ($state[$p:l1] = 29) then                   (: 'exec' :)
          let $state := p:shift(29, $input, $state)         (: 'exec' :)
          return $state
        else if ($state[$p:l1] = 30) then                   (: 'filter' :)
          let $state := p:shift(30, $input, $state)         (: 'filter' :)
          return $state
        else if ($state[$p:l1] = 33) then                   (: 'hash' :)
          let $state := p:shift(33, $input, $state)         (: 'hash' :)
          return $state
        else if ($state[$p:l1] = 34) then                   (: 'http-request' :)
          let $state := p:shift(34, $input, $state)         (: 'http-request' :)
          return $state
        else if ($state[$p:l1] = 35) then                   (: 'identity' :)
          let $state := p:shift(35, $input, $state)         (: 'identity' :)
          return $state
        else if ($state[$p:l1] = 37) then                   (: 'insert' :)
          let $state := p:shift(37, $input, $state)         (: 'insert' :)
          return $state
        else if ($state[$p:l1] = 39) then                   (: 'label-elements' :)
          let $state := p:shift(39, $input, $state)         (: 'label-elements' :)
          return $state
        else if ($state[$p:l1] = 41) then                   (: 'load' :)
          let $state := p:shift(41, $input, $state)         (: 'load' :)
          return $state
        else if ($state[$p:l1] = 42) then                   (: 'make-absolute-uris' :)
          let $state := p:shift(42, $input, $state)         (: 'make-absolute-uris' :)
          return $state
        else if ($state[$p:l1] = 44) then                   (: 'namespace-rename' :)
          let $state := p:shift(44, $input, $state)         (: 'namespace-rename' :)
          return $state
        else if ($state[$p:l1] = 45) then                   (: 'pack' :)
          let $state := p:shift(45, $input, $state)         (: 'pack' :)
          return $state
        else if ($state[$p:l1] = 46) then                   (: 'parameters' :)
          let $state := p:shift(46, $input, $state)         (: 'parameters' :)
          return $state
        else if ($state[$p:l1] = 50) then                   (: 'rename' :)
          let $state := p:shift(50, $input, $state)         (: 'rename' :)
          return $state
        else if ($state[$p:l1] = 51) then                   (: 'replace' :)
          let $state := p:shift(51, $input, $state)         (: 'replace' :)
          return $state
        else if ($state[$p:l1] = 54) then                   (: 'set-attributes' :)
          let $state := p:shift(54, $input, $state)         (: 'set-attributes' :)
          return $state
        else if ($state[$p:l1] = 55) then                   (: 'sink' :)
          let $state := p:shift(55, $input, $state)         (: 'sink' :)
          return $state
        else if ($state[$p:l1] = 56) then                   (: 'split-sequence' :)
          let $state := p:shift(56, $input, $state)         (: 'split-sequence' :)
          return $state
        else if ($state[$p:l1] = 58) then                   (: 'store' :)
          let $state := p:shift(58, $input, $state)         (: 'store' :)
          return $state
        else if ($state[$p:l1] = 59) then                   (: 'string-replace' :)
          let $state := p:shift(59, $input, $state)         (: 'string-replace' :)
          return $state
        else if ($state[$p:l1] = 61) then                   (: 'unescape-markup' :)
          let $state := p:shift(61, $input, $state)         (: 'unescape-markup' :)
          return $state
        else if ($state[$p:l1] = 62) then                   (: 'unwrap' :)
          let $state := p:shift(62, $input, $state)         (: 'unwrap' :)
          return $state
        else if ($state[$p:l1] = 63) then                   (: 'uuid' :)
          let $state := p:shift(63, $input, $state)         (: 'uuid' :)
          return $state
        else if ($state[$p:l1] = 64) then                   (: 'validate-with-relax-ng' :)
          let $state := p:shift(64, $input, $state)         (: 'validate-with-relax-ng' :)
          return $state
        else if ($state[$p:l1] = 65) then                   (: 'validate-with-schematron' :)
          let $state := p:shift(65, $input, $state)         (: 'validate-with-schematron' :)
          return $state
        else if ($state[$p:l1] = 66) then                   (: 'validate-with-xml-schema' :)
          let $state := p:shift(66, $input, $state)         (: 'validate-with-xml-schema' :)
          return $state
        else if ($state[$p:l1] = 70) then                   (: 'wrap' :)
          let $state := p:shift(70, $input, $state)         (: 'wrap' :)
          return $state
        else if ($state[$p:l1] = 71) then                   (: 'wrap-sequence' :)
          let $state := p:shift(71, $input, $state)         (: 'wrap-sequence' :)
          return $state
        else if ($state[$p:l1] = 72) then                   (: 'www-form-urldecode' :)
          let $state := p:shift(72, $input, $state)         (: 'www-form-urldecode' :)
          return $state
        else if ($state[$p:l1] = 73) then                   (: 'www-form-urlencode' :)
          let $state := p:shift(73, $input, $state)         (: 'www-form-urlencode' :)
          return $state
        else if ($state[$p:l1] = 74) then                   (: 'xinclude' :)
          let $state := p:shift(74, $input, $state)         (: 'xinclude' :)
          return $state
        else if ($state[$p:l1] = 75) then                   (: 'xquery' :)
          let $state := p:shift(75, $input, $state)         (: 'xquery' :)
          return $state
        else if ($state[$p:l1] = 77) then                   (: 'xslt' :)
          let $state := p:shift(77, $input, $state)         (: 'xslt' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(76, $input, $state)         (: 'xsl-formatter' :)
          return $state
      return $state
  let $state := p:lookahead1W(55, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:parse-inports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "atomicStep", $count)
};

(:~
 : Try parsing atomicStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-atomicStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 5                                   (: 'default' :)
     or $state[$p:l1] = 21                                  (: 'else' :)
     or $state[$p:l1] = 25                                  (: 'for-each' :)
     or $state[$p:l1] = 31                                  (: 'if' :)
     or $state[$p:l1] = 36                                  (: 'library' :)
     or $state[$p:l1] = 40                                  (: 'namespace' :)
     or $state[$p:l1] = 43                                  (: 'pipeline' :)
     or $state[$p:l1] = 48                                  (: 'step' :)
     or $state[$p:l1] = 57                                  (: 'try' :)
     or $state[$p:l1] = 60                                  (: 'variable' :)
     or $state[$p:l1] = 67                                  (: 'viewport' :)
     or $state[$p:l1] = 68) then                            (: 'viewport' :)
      let $state := p:lookahead2W(28, $input, $state)       (: Whitespace | ':' | '=' :)
      return $state
    else if ($state[$p:l1] = 16                             (: 'add-xml-base' :)
          or $state[$p:l1] = 17                             (: 'compare' :)
          or $state[$p:l1] = 19                             (: 'count' :)
          or $state[$p:l1] = 20                             (: 'delete' :)
          or $state[$p:l1] = 22                             (: 'directory-list' :)
          or $state[$p:l1] = 23                             (: 'error' :)
          or $state[$p:l1] = 27                             (: 'escape-markup' :)
          or $state[$p:l1] = 28                             (: 'exec' :)
          or $state[$p:l1] = 29                             (: 'filter' :)
          or $state[$p:l1] = 30                             (: 'hash' :)
          or $state[$p:l1] = 33                             (: 'http-request' :)
          or $state[$p:l1] = 34                             (: 'identity' :)
          or $state[$p:l1] = 35                             (: 'insert' :)
          or $state[$p:l1] = 37                             (: 'label-elements' :)
          or $state[$p:l1] = 39                             (: 'load' :)
          or $state[$p:l1] = 41                             (: 'make-absolute-uris' :)
          or $state[$p:l1] = 42                             (: 'namespace-rename' :)
          or $state[$p:l1] = 44                             (: 'pack' :)
          or $state[$p:l1] = 45                             (: 'parameters' :)
          or $state[$p:l1] = 46                             (: 'rename' :)
          or $state[$p:l1] = 50                             (: 'replace' :)
          or $state[$p:l1] = 51                             (: 'set-attributes' :)
          or $state[$p:l1] = 54                             (: 'sink' :)
          or $state[$p:l1] = 55                             (: 'split-sequence' :)
          or $state[$p:l1] = 56                             (: 'store' :)
          or $state[$p:l1] = 58                             (: 'string-replace' :)
          or $state[$p:l1] = 59                             (: 'unescape-markup' :)
          or $state[$p:l1] = 61                             (: 'unwrap' :)
          or $state[$p:l1] = 62                             (: 'uuid' :)
          or $state[$p:l1] = 63                             (: 'validate-with-relax-ng' :)
          or $state[$p:l1] = 64                             (: 'validate-with-schematron' :)
          or $state[$p:l1] = 65                             (: 'validate-with-xml-schema' :)
          or $state[$p:l1] = 66                             (: 'wrap' :)
          or $state[$p:l1] = 70                             (: 'wrap-sequence' :)
          or $state[$p:l1] = 71                             (: 'www-form-urldecode' :)
          or $state[$p:l1] = 72                             (: 'www-form-urlencode' :)
          or $state[$p:l1] = 73                             (: 'xinclude' :)
          or $state[$p:l1] = 74                             (: 'xquery' :)
          or $state[$p:l1] = 75                             (: 'xsl-formatter' :)
          or $state[$p:l1] = 76                             (: 'xslt' :)
          or $state[$p:l1] = 77) then                       (: 'xslt' :)
      let $state := p:lookahead2W(59, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 1541                           (: NCName^Token '=' :)
          or $state[$p:lk] = 1552                           (: 'add-attribute' '=' :)
          or $state[$p:lk] = 1553                           (: 'add-xml-base' '=' :)
          or $state[$p:lk] = 1555                           (: 'compare' '=' :)
          or $state[$p:lk] = 1556                           (: 'count' '=' :)
          or $state[$p:lk] = 1557                           (: 'default' '=' :)
          or $state[$p:lk] = 1558                           (: 'delete' '=' :)
          or $state[$p:lk] = 1559                           (: 'directory-list' '=' :)
          or $state[$p:lk] = 1561                           (: 'else' '=' :)
          or $state[$p:lk] = 1563                           (: 'error' '=' :)
          or $state[$p:lk] = 1564                           (: 'escape-markup' '=' :)
          or $state[$p:lk] = 1565                           (: 'exec' '=' :)
          or $state[$p:lk] = 1566                           (: 'filter' '=' :)
          or $state[$p:lk] = 1567                           (: 'for-each' '=' :)
          or $state[$p:lk] = 1569                           (: 'hash' '=' :)
          or $state[$p:lk] = 1570                           (: 'http-request' '=' :)
          or $state[$p:lk] = 1571                           (: 'identity' '=' :)
          or $state[$p:lk] = 1572                           (: 'if' '=' :)
          or $state[$p:lk] = 1573                           (: 'insert' '=' :)
          or $state[$p:lk] = 1575                           (: 'label-elements' '=' :)
          or $state[$p:lk] = 1576                           (: 'library' '=' :)
          or $state[$p:lk] = 1577                           (: 'load' '=' :)
          or $state[$p:lk] = 1578                           (: 'make-absolute-uris' '=' :)
          or $state[$p:lk] = 1579                           (: 'namespace' '=' :)
          or $state[$p:lk] = 1580                           (: 'namespace-rename' '=' :)
          or $state[$p:lk] = 1581                           (: 'pack' '=' :)
          or $state[$p:lk] = 1582                           (: 'parameters' '=' :)
          or $state[$p:lk] = 1584                           (: 'pipeline' '=' :)
          or $state[$p:lk] = 1586                           (: 'rename' '=' :)
          or $state[$p:lk] = 1587                           (: 'replace' '=' :)
          or $state[$p:lk] = 1590                           (: 'set-attributes' '=' :)
          or $state[$p:lk] = 1591                           (: 'sink' '=' :)
          or $state[$p:lk] = 1592                           (: 'split-sequence' '=' :)
          or $state[$p:lk] = 1593                           (: 'step' '=' :)
          or $state[$p:lk] = 1594                           (: 'store' '=' :)
          or $state[$p:lk] = 1595                           (: 'string-replace' '=' :)
          or $state[$p:lk] = 1596                           (: 'try' '=' :)
          or $state[$p:lk] = 1597                           (: 'unescape-markup' '=' :)
          or $state[$p:lk] = 1598                           (: 'unwrap' '=' :)
          or $state[$p:lk] = 1599                           (: 'uuid' '=' :)
          or $state[$p:lk] = 1600                           (: 'validate-with-relax-ng' '=' :)
          or $state[$p:lk] = 1601                           (: 'validate-with-schematron' '=' :)
          or $state[$p:lk] = 1602                           (: 'validate-with-xml-schema' '=' :)
          or $state[$p:lk] = 1603                           (: 'variable' '=' :)
          or $state[$p:lk] = 1604                           (: 'viewport' '=' :)
          or $state[$p:lk] = 1606                           (: 'wrap' '=' :)
          or $state[$p:lk] = 1607                           (: 'wrap-sequence' '=' :)
          or $state[$p:lk] = 1608                           (: 'www-form-urldecode' '=' :)
          or $state[$p:lk] = 1609                           (: 'www-form-urlencode' '=' :)
          or $state[$p:lk] = 1610                           (: 'xinclude' '=' :)
          or $state[$p:lk] = 1611                           (: 'xquery' '=' :)
          or $state[$p:lk] = 1612                           (: 'xsl-formatter' '=' :)
          or $state[$p:lk] = 1613) then                     (: 'xslt' '=' :)
      let $state := p:try-NCName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(48, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 16                                  (: 'add-xml-base' :)
     or $state[$p:l1] = 17                                  (: 'compare' :)
     or $state[$p:l1] = 19                                  (: 'count' :)
     or $state[$p:l1] = 20                                  (: 'delete' :)
     or $state[$p:l1] = 22                                  (: 'directory-list' :)
     or $state[$p:l1] = 23                                  (: 'error' :)
     or $state[$p:l1] = 27                                  (: 'escape-markup' :)
     or $state[$p:l1] = 28                                  (: 'exec' :)
     or $state[$p:l1] = 29                                  (: 'filter' :)
     or $state[$p:l1] = 30                                  (: 'hash' :)
     or $state[$p:l1] = 33                                  (: 'http-request' :)
     or $state[$p:l1] = 34                                  (: 'identity' :)
     or $state[$p:l1] = 35                                  (: 'insert' :)
     or $state[$p:l1] = 37                                  (: 'label-elements' :)
     or $state[$p:l1] = 39                                  (: 'load' :)
     or $state[$p:l1] = 41                                  (: 'make-absolute-uris' :)
     or $state[$p:l1] = 42                                  (: 'namespace-rename' :)
     or $state[$p:l1] = 44                                  (: 'pack' :)
     or $state[$p:l1] = 45                                  (: 'parameters' :)
     or $state[$p:l1] = 46                                  (: 'rename' :)
     or $state[$p:l1] = 50                                  (: 'replace' :)
     or $state[$p:l1] = 51                                  (: 'set-attributes' :)
     or $state[$p:l1] = 54                                  (: 'sink' :)
     or $state[$p:l1] = 55                                  (: 'split-sequence' :)
     or $state[$p:l1] = 56                                  (: 'store' :)
     or $state[$p:l1] = 58                                  (: 'string-replace' :)
     or $state[$p:l1] = 59                                  (: 'unescape-markup' :)
     or $state[$p:l1] = 61                                  (: 'unwrap' :)
     or $state[$p:l1] = 62                                  (: 'uuid' :)
     or $state[$p:l1] = 63                                  (: 'validate-with-relax-ng' :)
     or $state[$p:l1] = 64                                  (: 'validate-with-schematron' :)
     or $state[$p:l1] = 65                                  (: 'validate-with-xml-schema' :)
     or $state[$p:l1] = 66                                  (: 'wrap' :)
     or $state[$p:l1] = 70                                  (: 'wrap-sequence' :)
     or $state[$p:l1] = 71                                  (: 'www-form-urldecode' :)
     or $state[$p:l1] = 72                                  (: 'www-form-urlencode' :)
     or $state[$p:l1] = 73                                  (: 'xinclude' :)
     or $state[$p:l1] = 74                                  (: 'xquery' :)
     or $state[$p:l1] = 75                                  (: 'xsl-formatter' :)
     or $state[$p:l1] = 76                                  (: 'xslt' :)
     or $state[$p:l1] = 77) then                            (: 'xslt' :)
      let $state := p:lookahead2W(58, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 5                                   (: NCName^Token :)
     or $state[$p:lk] = 21                                  (: 'default' :)
     or $state[$p:lk] = 25                                  (: 'else' :)
     or $state[$p:lk] = 31                                  (: 'for-each' :)
     or $state[$p:lk] = 36                                  (: 'if' :)
     or $state[$p:lk] = 40                                  (: 'library' :)
     or $state[$p:lk] = 43                                  (: 'namespace' :)
     or $state[$p:lk] = 48                                  (: 'pipeline' :)
     or $state[$p:lk] = 57                                  (: 'step' :)
     or $state[$p:lk] = 60                                  (: 'try' :)
     or $state[$p:lk] = 67                                  (: 'variable' :)
     or $state[$p:lk] = 68                                  (: 'viewport' :)
     or $state[$p:lk] = 1424                                (: 'add-attribute' ':' :)
     or $state[$p:lk] = 1425                                (: 'add-xml-base' ':' :)
     or $state[$p:lk] = 1427                                (: 'compare' ':' :)
     or $state[$p:lk] = 1428                                (: 'count' ':' :)
     or $state[$p:lk] = 1430                                (: 'delete' ':' :)
     or $state[$p:lk] = 1431                                (: 'directory-list' ':' :)
     or $state[$p:lk] = 1435                                (: 'error' ':' :)
     or $state[$p:lk] = 1436                                (: 'escape-markup' ':' :)
     or $state[$p:lk] = 1437                                (: 'exec' ':' :)
     or $state[$p:lk] = 1438                                (: 'filter' ':' :)
     or $state[$p:lk] = 1441                                (: 'hash' ':' :)
     or $state[$p:lk] = 1442                                (: 'http-request' ':' :)
     or $state[$p:lk] = 1443                                (: 'identity' ':' :)
     or $state[$p:lk] = 1445                                (: 'insert' ':' :)
     or $state[$p:lk] = 1447                                (: 'label-elements' ':' :)
     or $state[$p:lk] = 1449                                (: 'load' ':' :)
     or $state[$p:lk] = 1450                                (: 'make-absolute-uris' ':' :)
     or $state[$p:lk] = 1452                                (: 'namespace-rename' ':' :)
     or $state[$p:lk] = 1453                                (: 'pack' ':' :)
     or $state[$p:lk] = 1454                                (: 'parameters' ':' :)
     or $state[$p:lk] = 1458                                (: 'rename' ':' :)
     or $state[$p:lk] = 1459                                (: 'replace' ':' :)
     or $state[$p:lk] = 1462                                (: 'set-attributes' ':' :)
     or $state[$p:lk] = 1463                                (: 'sink' ':' :)
     or $state[$p:lk] = 1464                                (: 'split-sequence' ':' :)
     or $state[$p:lk] = 1466                                (: 'store' ':' :)
     or $state[$p:lk] = 1467                                (: 'string-replace' ':' :)
     or $state[$p:lk] = 1469                                (: 'unescape-markup' ':' :)
     or $state[$p:lk] = 1470                                (: 'unwrap' ':' :)
     or $state[$p:lk] = 1471                                (: 'uuid' ':' :)
     or $state[$p:lk] = 1472                                (: 'validate-with-relax-ng' ':' :)
     or $state[$p:lk] = 1473                                (: 'validate-with-schematron' ':' :)
     or $state[$p:lk] = 1474                                (: 'validate-with-xml-schema' ':' :)
     or $state[$p:lk] = 1478                                (: 'wrap' ':' :)
     or $state[$p:lk] = 1479                                (: 'wrap-sequence' ':' :)
     or $state[$p:lk] = 1480                                (: 'www-form-urldecode' ':' :)
     or $state[$p:lk] = 1481                                (: 'www-form-urlencode' ':' :)
     or $state[$p:lk] = 1482                                (: 'xinclude' ':' :)
     or $state[$p:lk] = 1483                                (: 'xquery' ':' :)
     or $state[$p:lk] = 1484                                (: 'xsl-formatter' ':' :)
     or $state[$p:lk] = 1485) then                          (: 'xslt' ':' :)
      let $state := p:try-CName($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state :=
        if ($state[$p:l1] = 17) then                        (: 'add-xml-base' :)
          let $state := p:shift(17, $input, $state)         (: 'add-xml-base' :)
          return $state
        else if ($state[$p:l1] = 16) then                   (: 'add-attribute' :)
          let $state := p:shift(16, $input, $state)         (: 'add-attribute' :)
          return $state
        else if ($state[$p:l1] = 19) then                   (: 'compare' :)
          let $state := p:shift(19, $input, $state)         (: 'compare' :)
          return $state
        else if ($state[$p:l1] = 20) then                   (: 'count' :)
          let $state := p:shift(20, $input, $state)         (: 'count' :)
          return $state
        else if ($state[$p:l1] = 22) then                   (: 'delete' :)
          let $state := p:shift(22, $input, $state)         (: 'delete' :)
          return $state
        else if ($state[$p:l1] = 23) then                   (: 'directory-list' :)
          let $state := p:shift(23, $input, $state)         (: 'directory-list' :)
          return $state
        else if ($state[$p:l1] = 27) then                   (: 'error' :)
          let $state := p:shift(27, $input, $state)         (: 'error' :)
          return $state
        else if ($state[$p:l1] = 28) then                   (: 'escape-markup' :)
          let $state := p:shift(28, $input, $state)         (: 'escape-markup' :)
          return $state
        else if ($state[$p:l1] = 29) then                   (: 'exec' :)
          let $state := p:shift(29, $input, $state)         (: 'exec' :)
          return $state
        else if ($state[$p:l1] = 30) then                   (: 'filter' :)
          let $state := p:shift(30, $input, $state)         (: 'filter' :)
          return $state
        else if ($state[$p:l1] = 33) then                   (: 'hash' :)
          let $state := p:shift(33, $input, $state)         (: 'hash' :)
          return $state
        else if ($state[$p:l1] = 34) then                   (: 'http-request' :)
          let $state := p:shift(34, $input, $state)         (: 'http-request' :)
          return $state
        else if ($state[$p:l1] = 35) then                   (: 'identity' :)
          let $state := p:shift(35, $input, $state)         (: 'identity' :)
          return $state
        else if ($state[$p:l1] = 37) then                   (: 'insert' :)
          let $state := p:shift(37, $input, $state)         (: 'insert' :)
          return $state
        else if ($state[$p:l1] = 39) then                   (: 'label-elements' :)
          let $state := p:shift(39, $input, $state)         (: 'label-elements' :)
          return $state
        else if ($state[$p:l1] = 41) then                   (: 'load' :)
          let $state := p:shift(41, $input, $state)         (: 'load' :)
          return $state
        else if ($state[$p:l1] = 42) then                   (: 'make-absolute-uris' :)
          let $state := p:shift(42, $input, $state)         (: 'make-absolute-uris' :)
          return $state
        else if ($state[$p:l1] = 44) then                   (: 'namespace-rename' :)
          let $state := p:shift(44, $input, $state)         (: 'namespace-rename' :)
          return $state
        else if ($state[$p:l1] = 45) then                   (: 'pack' :)
          let $state := p:shift(45, $input, $state)         (: 'pack' :)
          return $state
        else if ($state[$p:l1] = 46) then                   (: 'parameters' :)
          let $state := p:shift(46, $input, $state)         (: 'parameters' :)
          return $state
        else if ($state[$p:l1] = 50) then                   (: 'rename' :)
          let $state := p:shift(50, $input, $state)         (: 'rename' :)
          return $state
        else if ($state[$p:l1] = 51) then                   (: 'replace' :)
          let $state := p:shift(51, $input, $state)         (: 'replace' :)
          return $state
        else if ($state[$p:l1] = 54) then                   (: 'set-attributes' :)
          let $state := p:shift(54, $input, $state)         (: 'set-attributes' :)
          return $state
        else if ($state[$p:l1] = 55) then                   (: 'sink' :)
          let $state := p:shift(55, $input, $state)         (: 'sink' :)
          return $state
        else if ($state[$p:l1] = 56) then                   (: 'split-sequence' :)
          let $state := p:shift(56, $input, $state)         (: 'split-sequence' :)
          return $state
        else if ($state[$p:l1] = 58) then                   (: 'store' :)
          let $state := p:shift(58, $input, $state)         (: 'store' :)
          return $state
        else if ($state[$p:l1] = 59) then                   (: 'string-replace' :)
          let $state := p:shift(59, $input, $state)         (: 'string-replace' :)
          return $state
        else if ($state[$p:l1] = 61) then                   (: 'unescape-markup' :)
          let $state := p:shift(61, $input, $state)         (: 'unescape-markup' :)
          return $state
        else if ($state[$p:l1] = 62) then                   (: 'unwrap' :)
          let $state := p:shift(62, $input, $state)         (: 'unwrap' :)
          return $state
        else if ($state[$p:l1] = 63) then                   (: 'uuid' :)
          let $state := p:shift(63, $input, $state)         (: 'uuid' :)
          return $state
        else if ($state[$p:l1] = 64) then                   (: 'validate-with-relax-ng' :)
          let $state := p:shift(64, $input, $state)         (: 'validate-with-relax-ng' :)
          return $state
        else if ($state[$p:l1] = 65) then                   (: 'validate-with-schematron' :)
          let $state := p:shift(65, $input, $state)         (: 'validate-with-schematron' :)
          return $state
        else if ($state[$p:l1] = 66) then                   (: 'validate-with-xml-schema' :)
          let $state := p:shift(66, $input, $state)         (: 'validate-with-xml-schema' :)
          return $state
        else if ($state[$p:l1] = 70) then                   (: 'wrap' :)
          let $state := p:shift(70, $input, $state)         (: 'wrap' :)
          return $state
        else if ($state[$p:l1] = 71) then                   (: 'wrap-sequence' :)
          let $state := p:shift(71, $input, $state)         (: 'wrap-sequence' :)
          return $state
        else if ($state[$p:l1] = 72) then                   (: 'www-form-urldecode' :)
          let $state := p:shift(72, $input, $state)         (: 'www-form-urldecode' :)
          return $state
        else if ($state[$p:l1] = 73) then                   (: 'www-form-urlencode' :)
          let $state := p:shift(73, $input, $state)         (: 'www-form-urlencode' :)
          return $state
        else if ($state[$p:l1] = 74) then                   (: 'xinclude' :)
          let $state := p:shift(74, $input, $state)         (: 'xinclude' :)
          return $state
        else if ($state[$p:l1] = 75) then                   (: 'xquery' :)
          let $state := p:shift(75, $input, $state)         (: 'xquery' :)
          return $state
        else if ($state[$p:l1] = 77) then                   (: 'xslt' :)
          let $state := p:shift(77, $input, $state)         (: 'xslt' :)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:shift(76, $input, $state)         (: 'xsl-formatter' :)
          return $state
      return $state
  let $state := p:lookahead1W(55, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:try-inports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "atomicStep", $count)
};

(:~
 : Parse groupStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-groupStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "groupStep", $count)
};

(:~
 : Try parsing groupStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-groupStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "groupStep", $count)
};

(:~
 : Parse tryStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-tryStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(60, $input, $state)                 (: 'try' :)
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(10, $input, $state)           (: Whitespace | 'catch' :)
  let $state := p:shift(18, $input, $state)                 (: 'catch' :)
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "tryStep", $count)
};

(:~
 : Try parsing tryStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-tryStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(60, $input, $state)                 (: 'try' :)
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(10, $input, $state)           (: Whitespace | 'catch' :)
  let $state := p:shift(18, $input, $state)                 (: 'catch' :)
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "tryStep", $count)
};

(:~
 : Parse the 1st loop of production serialization (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-serialization-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(27, $input, $state)         (: Whitespace | ',' | ']' :)
    return
      if ($state[$p:l1] != 9) then                          (: ',' :)
        $state
      else
        let $state := p:shift(9, $input, $state)            (: ',' :)
        let $state := p:lookahead1W(48, $input, $state)     (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
        let $state := p:parse-NCName($input, $state)
        let $state := p:lookahead1W(8, $input, $state)      (: Whitespace | '=' :)
        let $state := p:shift(12, $input, $state)           (: '=' :)
        let $state := p:lookahead1W(6, $input, $state)      (: Whitespace | quotedstr :)
        let $state := p:shift(4, $input, $state)            (: quotedstr :)
        return p:parse-serialization-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production serialization (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-serialization-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(27, $input, $state)         (: Whitespace | ',' | ']' :)
    return
      if ($state[$p:l1] != 9) then                          (: ',' :)
        $state
      else
        let $state := p:shift(9, $input, $state)            (: ',' :)
        let $state := p:lookahead1W(48, $input, $state)     (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
        let $state := p:try-NCName($input, $state)
        let $state := p:lookahead1W(8, $input, $state)      (: Whitespace | '=' :)
        let $state := p:shift(12, $input, $state)           (: '=' :)
        let $state := p:lookahead1W(6, $input, $state)      (: Whitespace | quotedstr :)
        let $state := p:shift(4, $input, $state)            (: quotedstr :)
        return p:try-serialization-1($input, $state)
};

(:~
 : Parse serialization.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-serialization($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(53, $input, $state)                 (: 'serialized' :)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | 'with' :)
  let $state := p:shift(69, $input, $state)                 (: 'with' :)
  let $state := p:lookahead1W(9, $input, $state)            (: Whitespace | '[' :)
  let $state := p:shift(14, $input, $state)                 (: '[' :)
  let $state := p:lookahead1W(52, $input, $state)           (: Whitespace | NCName^Token | ',' | ']' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 9                             (: ',' :)
         and $state[$p:l1] != 15) then                      (: ']' :)
      let $state := p:parse-NCName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      let $state := p:lookahead1W(6, $input, $state)        (: Whitespace | quotedstr :)
      let $state := p:shift(4, $input, $state)              (: quotedstr :)
      return $state
    else
      $state
  let $state := p:parse-serialization-1($input, $state)
  let $state := p:shift(15, $input, $state)                 (: ']' :)
  return p:reduce($state, "serialization", $count)
};

(:~
 : Try parsing serialization.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-serialization($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(53, $input, $state)                 (: 'serialized' :)
  let $state := p:lookahead1W(19, $input, $state)           (: Whitespace | 'with' :)
  let $state := p:shift(69, $input, $state)                 (: 'with' :)
  let $state := p:lookahead1W(9, $input, $state)            (: Whitespace | '[' :)
  let $state := p:shift(14, $input, $state)                 (: '[' :)
  let $state := p:lookahead1W(52, $input, $state)           (: Whitespace | NCName^Token | ',' | ']' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 9                             (: ',' :)
         and $state[$p:l1] != 15) then                      (: ']' :)
      let $state := p:try-NCName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      let $state := p:lookahead1W(6, $input, $state)        (: Whitespace | quotedstr :)
      let $state := p:shift(4, $input, $state)              (: quotedstr :)
      return $state
    else
      $state
  let $state := p:try-serialization-1($input, $state)
  let $state := p:shift(15, $input, $state)                 (: ']' :)
  return p:reduce($state, "serialization", $count)
};

(:~
 : Parse output.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-output($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(3, $input, $state)             (: 'primary' :)
  let $state :=
    if ($state[$p:l1] = 49) then                            (: 'primary' :)
      let $state := p:lookahead2W(51, $input, $state)       (: Whitespace | NCName^Token | ')' | ',' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1073                                (: 'primary' ')' :)
     or $state[$p:lk] = 1201) then                          (: 'primary' ',' :)
      let $state := p:shift(49, $input, $state)             (: 'primary' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(49, $input, $state)             (: 'primary' :)
      let $state := p:lookahead1W(48, $input, $state)       (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      let $state := p:parse-NCName($input, $state)
      let $state := p:lookahead1W(46, $input, $state)       (: Whitespace | ')' | ',' | 'item' | 'sequence' |
                                                               'serialized' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 38                         (: 'item' :)
              or $state[$p:l1] = 52) then                   (: 'sequence' :)
          let $state :=
            if ($state[$p:l1] = 52) then                    (: 'sequence' :)
              let $state := p:shift(52, $input, $state)     (: 'sequence' :)
              return $state
            else if ($state[$p:error]) then
              $state
            else
              let $state := p:shift(38, $input, $state)     (: 'item' :)
              return $state
          return $state
        else
          $state
      let $state := p:lookahead1W(37, $input, $state)       (: Whitespace | ')' | ',' | 'serialized' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 53) then                   (: 'serialized' :)
          let $state := p:parse-serialization($input, $state)
          return $state
        else
          $state
      return $state
  return p:reduce($state, "output", $count)
};

(:~
 : Try parsing output.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-output($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(3, $input, $state)             (: 'primary' :)
  let $state :=
    if ($state[$p:l1] = 49) then                            (: 'primary' :)
      let $state := p:lookahead2W(51, $input, $state)       (: Whitespace | NCName^Token | ')' | ',' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1073                                (: 'primary' ')' :)
     or $state[$p:lk] = 1201) then                          (: 'primary' ',' :)
      let $state := p:shift(49, $input, $state)             (: 'primary' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(49, $input, $state)             (: 'primary' :)
      let $state := p:lookahead1W(48, $input, $state)       (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      let $state := p:try-NCName($input, $state)
      let $state := p:lookahead1W(46, $input, $state)       (: Whitespace | ')' | ',' | 'item' | 'sequence' |
                                                               'serialized' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 38                         (: 'item' :)
              or $state[$p:l1] = 52) then                   (: 'sequence' :)
          let $state :=
            if ($state[$p:l1] = 52) then                    (: 'sequence' :)
              let $state := p:shift(52, $input, $state)     (: 'sequence' :)
              return $state
            else if ($state[$p:error]) then
              $state
            else
              let $state := p:shift(38, $input, $state)     (: 'item' :)
              return $state
          return $state
        else
          $state
      let $state := p:lookahead1W(37, $input, $state)       (: Whitespace | ')' | ',' | 'serialized' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 53) then                   (: 'serialized' :)
          let $state := p:try-serialization($input, $state)
          return $state
        else
          $state
      return $state
  return p:reduce($state, "output", $count)
};

(:~
 : Parse the 1st loop of production outports (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-outports-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(26, $input, $state)         (: Whitespace | ')' | ',' :)
    return
      if ($state[$p:l1] != 9) then                          (: ',' :)
        $state
      else
        let $state := p:shift(9, $input, $state)            (: ',' :)
        let $state := p:lookahead1W(4, $input, $state)      (: EPSILON | Whitespace :)
        let $state := p:parse-output($input, $state)
        return p:parse-outports-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production outports (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-outports-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(26, $input, $state)         (: Whitespace | ')' | ',' :)
    return
      if ($state[$p:l1] != 9) then                          (: ',' :)
        $state
      else
        let $state := p:shift(9, $input, $state)            (: ',' :)
        let $state := p:lookahead1W(4, $input, $state)      (: EPSILON | Whitespace :)
        let $state := p:try-output($input, $state)
        return p:try-outports-1($input, $state)
};

(:~
 : Parse outports.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-outports($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(0, $input, $state)             (: '(' :)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:lookahead1W(36, $input, $state)           (: Whitespace | ')' | ',' | 'primary' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 49) then                       (: 'primary' :)
      let $state := p:parse-output($input, $state)
      return $state
    else
      $state
  let $state := p:parse-outports-1($input, $state)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "outports", $count)
};

(:~
 : Try parsing outports.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-outports($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(0, $input, $state)             (: '(' :)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:lookahead1W(36, $input, $state)           (: Whitespace | ')' | ',' | 'primary' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 49) then                       (: 'primary' :)
      let $state := p:try-output($input, $state)
      return $state
    else
      $state
  let $state := p:try-outports-1($input, $state)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "outports", $count)
};

(:~
 : Parse otherwiseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-otherwiseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(25, $input, $state)                 (: 'else' :)
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "otherwiseStep", $count)
};

(:~
 : Try parsing otherwiseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-otherwiseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(25, $input, $state)                 (: 'else' :)
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "otherwiseStep", $count)
};

(:~
 : Parse whenStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-whenStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(25, $input, $state)                 (: 'else' :)
  let $state := p:lookahead1W(13, $input, $state)           (: Whitespace | 'if' :)
  let $state := p:shift(36, $input, $state)                 (: 'if' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-parExpression($input, $state)
  let $state := p:lookahead1W(29, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 32) then                       (: 'from' :)
      let $state := p:parse-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "whenStep", $count)
};

(:~
 : Try parsing whenStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-whenStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(25, $input, $state)                 (: 'else' :)
  let $state := p:lookahead1W(13, $input, $state)           (: Whitespace | 'if' :)
  let $state := p:shift(36, $input, $state)                 (: 'if' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-parExpression($input, $state)
  let $state := p:lookahead1W(29, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 32) then                       (: 'from' :)
      let $state := p:try-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "whenStep", $count)
};

(:~
 : Parse the 1st loop of production chooseStep (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-chooseStep-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(56, $input, $state)         (: Whitespace | NCName^Token | '=>' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
    let $state :=
      if ($state[$p:l1] = 25) then                          (: 'else' :)
        let $state := p:lookahead2W(44, $input, $state)     (: Whitespace | ':' | '=' | 'if' | '{' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 4633) then                       (: 'else' 'if' :)
        $state
      else
        let $state := p:parse-whenStep($input, $state)
        return p:parse-chooseStep-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production chooseStep (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-chooseStep-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(56, $input, $state)         (: Whitespace | NCName^Token | '=>' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
    let $state :=
      if ($state[$p:l1] = 25) then                          (: 'else' :)
        let $state := p:lookahead2W(44, $input, $state)     (: Whitespace | ':' | '=' | 'if' | '{' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 4633) then                       (: 'else' 'if' :)
        $state
      else
        let $state := p:try-whenStep($input, $state)
        return p:try-chooseStep-1($input, $state)
};

(:~
 : Parse chooseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-chooseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(36, $input, $state)                 (: 'if' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-parExpression($input, $state)
  let $state := p:lookahead1W(29, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 32) then                       (: 'from' :)
      let $state := p:parse-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  let $state := p:parse-chooseStep-1($input, $state)
  let $state :=
    if ($state[$p:l1] = 25) then                            (: 'else' :)
      let $state := p:lookahead2W(39, $input, $state)       (: Whitespace | ':' | '=' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 10009) then                    (: 'else' '{' :)
      let $state := p:parse-otherwiseStep($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(56, $input, $state)           (: Whitespace | NCName^Token | '=>' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:parse-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "chooseStep", $count)
};

(:~
 : Try parsing chooseStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-chooseStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(36, $input, $state)                 (: 'if' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-parExpression($input, $state)
  let $state := p:lookahead1W(29, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 32) then                       (: 'from' :)
      let $state := p:try-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  let $state := p:try-chooseStep-1($input, $state)
  let $state :=
    if ($state[$p:l1] = 25) then                            (: 'else' :)
      let $state := p:lookahead2W(39, $input, $state)       (: Whitespace | ':' | '=' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 10009) then                    (: 'else' '{' :)
      let $state := p:try-otherwiseStep($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(56, $input, $state)           (: Whitespace | NCName^Token | '=>' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:try-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "chooseStep", $count)
};

(:~
 : Parse viewportStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-viewportStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(68, $input, $state)                 (: 'viewport' :)
  let $state := p:lookahead1W(34, $input, $state)           (: Whitespace | '(' | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:parse-parExpression($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(29, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 32) then                       (: 'from' :)
      let $state := p:parse-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "viewportStep", $count)
};

(:~
 : Try parsing viewportStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-viewportStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(68, $input, $state)                 (: 'viewport' :)
  let $state := p:lookahead1W(34, $input, $state)           (: Whitespace | '(' | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:try-parExpression($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(29, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 32) then                       (: 'from' :)
      let $state := p:try-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "viewportStep", $count)
};

(:~
 : Parse fromEmpty.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-fromEmpty($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(32, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(12, $input, $state)           (: Whitespace | 'empty' :)
  let $state := p:shift(26, $input, $state)                 (: 'empty' :)
  return p:reduce($state, "fromEmpty", $count)
};

(:~
 : Try parsing fromEmpty.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-fromEmpty($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(32, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(12, $input, $state)           (: Whitespace | 'empty' :)
  let $state := p:shift(26, $input, $state)                 (: 'empty' :)
  return p:reduce($state, "fromEmpty", $count)
};

(:~
 : Parse fromDocument.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-fromDocument($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(32, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(11, $input, $state)           (: Whitespace | 'document' :)
  let $state := p:shift(24, $input, $state)                 (: 'document' :)
  let $state := p:lookahead1W(6, $input, $state)            (: Whitespace | quotedstr :)
  let $state := p:shift(4, $input, $state)                  (: quotedstr :)
  return p:reduce($state, "fromDocument", $count)
};

(:~
 : Try parsing fromDocument.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-fromDocument($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(32, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(11, $input, $state)           (: Whitespace | 'document' :)
  let $state := p:shift(24, $input, $state)                 (: 'document' :)
  let $state := p:lookahead1W(6, $input, $state)            (: Whitespace | quotedstr :)
  let $state := p:shift(4, $input, $state)                  (: quotedstr :)
  return p:reduce($state, "fromDocument", $count)
};

(:~
 : Parse fromPipe.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-fromPipe($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(32, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(15, $input, $state)           (: Whitespace | 'pipe' :)
  let $state := p:shift(47, $input, $state)                 (: 'pipe' :)
  let $state := p:lookahead1W(48, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:parse-NCName($input, $state)
  let $state := p:lookahead1W(7, $input, $state)            (: Whitespace | '/' :)
  let $state := p:shift(10, $input, $state)                 (: '/' :)
  let $state := p:lookahead1W(48, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:parse-NCName($input, $state)
  return p:reduce($state, "fromPipe", $count)
};

(:~
 : Try parsing fromPipe.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-fromPipe($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(32, $input, $state)                 (: 'from' :)
  let $state := p:lookahead1W(15, $input, $state)           (: Whitespace | 'pipe' :)
  let $state := p:shift(47, $input, $state)                 (: 'pipe' :)
  let $state := p:lookahead1W(48, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:try-NCName($input, $state)
  let $state := p:lookahead1W(7, $input, $state)            (: Whitespace | '/' :)
  let $state := p:shift(10, $input, $state)                 (: '/' :)
  let $state := p:lookahead1W(48, $input, $state)           (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:try-NCName($input, $state)
  return p:reduce($state, "fromPipe", $count)
};

(:~
 : Parse from.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-from($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 32) then                            (: 'from' :)
      let $state := p:lookahead2W(40, $input, $state)       (: Whitespace | 'document' | 'empty' | 'pipe' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 6048) then                          (: 'from' 'pipe' :)
      let $state := p:parse-fromPipe($input, $state)
      return $state
    else if ($state[$p:lk] = 3104) then                     (: 'from' 'document' :)
      let $state := p:parse-fromDocument($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-fromEmpty($input, $state)
      return $state
  return p:reduce($state, "from", $count)
};

(:~
 : Try parsing from.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-from($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 32) then                            (: 'from' :)
      let $state := p:lookahead2W(40, $input, $state)       (: Whitespace | 'document' | 'empty' | 'pipe' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 6048) then                          (: 'from' 'pipe' :)
      let $state := p:try-fromPipe($input, $state)
      return $state
    else if ($state[$p:lk] = 3104) then                     (: 'from' 'document' :)
      let $state := p:try-fromDocument($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:try-fromEmpty($input, $state)
      return $state
  return p:reduce($state, "from", $count)
};

(:~
 : Parse forEachStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-forEachStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(31, $input, $state)                 (: 'for-each' :)
  let $state := p:lookahead1W(34, $input, $state)           (: Whitespace | '(' | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:parse-parExpression($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(29, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 32) then                       (: 'from' :)
      let $state := p:parse-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "forEachStep", $count)
};

(:~
 : Try parsing forEachStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-forEachStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(31, $input, $state)                 (: 'for-each' :)
  let $state := p:lookahead1W(34, $input, $state)           (: Whitespace | '(' | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:try-parExpression($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(29, $input, $state)           (: Whitespace | 'from' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 32) then                       (: 'from' :)
      let $state := p:try-from($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  return p:reduce($state, "forEachStep", $count)
};

(:~
 : Parse the 1st loop of production expr (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-expr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(22, $input, $state)          (: noParExpression | '(' :)
    let $state :=
      if ($state[$p:l1] = 3) then                           (: noParExpression :)
        let $state := p:shift(3, $input, $state)            (: noParExpression :)
        return $state
      else if ($state[$p:error]) then
        $state
      else
        let $state := p:parse-parExpression($input, $state)
        return $state
    let $state := p:lookahead1(31, $input, $state)          (: noParExpression | '(' | ')' :)
    return
      if ($state[$p:l1] = 8) then                           (: ')' :)
        $state
      else
        p:parse-expr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production expr (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-expr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1(22, $input, $state)          (: noParExpression | '(' :)
    let $state :=
      if ($state[$p:l1] = 3) then                           (: noParExpression :)
        let $state := p:shift(3, $input, $state)            (: noParExpression :)
        return $state
      else if ($state[$p:error]) then
        $state
      else
        let $state := p:try-parExpression($input, $state)
        return $state
    let $state := p:lookahead1(31, $input, $state)          (: noParExpression | '(' | ')' :)
    return
      if ($state[$p:l1] = 8) then                           (: ')' :)
        $state
      else
        p:try-expr-1($input, $state)
};

(:~
 : Parse expr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-expr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:parse-expr-1($input, $state)
  return p:reduce($state, "expr", $count)
};

(:~
 : Try parsing expr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-expr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:try-expr-1($input, $state)
  return p:reduce($state, "expr", $count)
};

(:~
 : Parse parExpression.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-parExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(0, $input, $state)             (: '(' :)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:parse-expr($input, $state)
  let $state := p:lookahead1(1, $input, $state)             (: ')' :)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "parExpression", $count)
};

(:~
 : Try parsing parExpression.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-parExpression($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(0, $input, $state)             (: '(' :)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:try-expr($input, $state)
  let $state := p:lookahead1(1, $input, $state)             (: ')' :)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "parExpression", $count)
};

(:~
 : Parse variable.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-variable($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:parse-QName($input, $state)
  let $state := p:lookahead1W(8, $input, $state)            (: Whitespace | '=' :)
  let $state := p:shift(12, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | 'variable' :)
  let $state := p:shift(67, $input, $state)                 (: 'variable' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-parExpression($input, $state)
  return p:reduce($state, "variable", $count)
};

(:~
 : Try parsing variable.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-variable($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:try-QName($input, $state)
  let $state := p:lookahead1W(8, $input, $state)            (: Whitespace | '=' :)
  let $state := p:shift(12, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(18, $input, $state)           (: Whitespace | 'variable' :)
  let $state := p:shift(67, $input, $state)                 (: 'variable' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-parExpression($input, $state)
  return p:reduce($state, "variable", $count)
};

(:~
 : Parse the 1st loop of production subpipeline (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-subpipeline-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(49, $input, $state)         (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
    let $state :=
      if ($state[$p:l1] = 36) then                          (: 'if' :)
        let $state := p:lookahead2W(33, $input, $state)     (: Whitespace | '(' | ':' | '=' :)
        let $state :=
          if ($state[$p:lk] = 1444) then                    (: 'if' ':' :)
            let $state := p:lookahead3(47, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1572) then               (: 'if' '=' :)
            let $state := p:lookahead3W(48, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 60) then                     (: 'try' :)
        let $state := p:lookahead2W(39, $input, $state)     (: Whitespace | ':' | '=' | '{' :)
        let $state :=
          if ($state[$p:lk] = 1468) then                    (: 'try' ':' :)
            let $state := p:lookahead3(47, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1596) then               (: 'try' '=' :)
            let $state := p:lookahead3W(48, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 31                           (: 'viewport' :)
            or $state[$p:l1] = 68) then                     (: 'viewport' :)
        let $state := p:lookahead2W(45, $input, $state)     (: Whitespace | '(' | ':' | '=' | 'from' | '{' :)
        let $state :=
          if ($state[$p:lk] = 1439                          (: 'viewport' ':' :)
           or $state[$p:lk] = 1476) then                    (: 'viewport' ':' :)
            let $state := p:lookahead3(47, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1567                     (: 'viewport' '=' :)
                or $state[$p:lk] = 1604) then               (: 'viewport' '=' :)
            let $state := p:lookahead3W(48, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 5                            (: 'default' :)
            or $state[$p:l1] = 21                           (: 'else' :)
            or $state[$p:l1] = 25                           (: 'library' :)
            or $state[$p:l1] = 40                           (: 'namespace' :)
            or $state[$p:l1] = 43                           (: 'pipeline' :)
            or $state[$p:l1] = 48                           (: 'step' :)
            or $state[$p:l1] = 57                           (: 'variable' :)
            or $state[$p:l1] = 67) then                     (: 'variable' :)
        let $state := p:lookahead2W(28, $input, $state)     (: Whitespace | ':' | '=' :)
        let $state :=
          if ($state[$p:lk] = 1413                          (: 'default' ':' :)
           or $state[$p:lk] = 1429                          (: 'else' ':' :)
           or $state[$p:lk] = 1433                          (: 'library' ':' :)
           or $state[$p:lk] = 1448                          (: 'namespace' ':' :)
           or $state[$p:lk] = 1451                          (: 'pipeline' ':' :)
           or $state[$p:lk] = 1456                          (: 'step' ':' :)
           or $state[$p:lk] = 1465                          (: 'variable' ':' :)
           or $state[$p:lk] = 1475) then                    (: 'variable' ':' :)
            let $state := p:lookahead3(47, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1541                     (: 'default' '=' :)
                or $state[$p:lk] = 1557                     (: 'else' '=' :)
                or $state[$p:lk] = 1561                     (: 'library' '=' :)
                or $state[$p:lk] = 1576                     (: 'namespace' '=' :)
                or $state[$p:lk] = 1579                     (: 'pipeline' '=' :)
                or $state[$p:lk] = 1584                     (: 'step' '=' :)
                or $state[$p:lk] = 1593                     (: 'variable' '=' :)
                or $state[$p:lk] = 1603) then               (: 'variable' '=' :)
            let $state := p:lookahead3W(48, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 16                           (: 'add-xml-base' :)
            or $state[$p:l1] = 17                           (: 'compare' :)
            or $state[$p:l1] = 19                           (: 'count' :)
            or $state[$p:l1] = 20                           (: 'delete' :)
            or $state[$p:l1] = 22                           (: 'directory-list' :)
            or $state[$p:l1] = 23                           (: 'error' :)
            or $state[$p:l1] = 27                           (: 'escape-markup' :)
            or $state[$p:l1] = 28                           (: 'exec' :)
            or $state[$p:l1] = 29                           (: 'filter' :)
            or $state[$p:l1] = 30                           (: 'hash' :)
            or $state[$p:l1] = 33                           (: 'http-request' :)
            or $state[$p:l1] = 34                           (: 'identity' :)
            or $state[$p:l1] = 35                           (: 'insert' :)
            or $state[$p:l1] = 37                           (: 'label-elements' :)
            or $state[$p:l1] = 39                           (: 'load' :)
            or $state[$p:l1] = 41                           (: 'make-absolute-uris' :)
            or $state[$p:l1] = 42                           (: 'namespace-rename' :)
            or $state[$p:l1] = 44                           (: 'pack' :)
            or $state[$p:l1] = 45                           (: 'parameters' :)
            or $state[$p:l1] = 46                           (: 'rename' :)
            or $state[$p:l1] = 50                           (: 'replace' :)
            or $state[$p:l1] = 51                           (: 'set-attributes' :)
            or $state[$p:l1] = 54                           (: 'sink' :)
            or $state[$p:l1] = 55                           (: 'split-sequence' :)
            or $state[$p:l1] = 56                           (: 'store' :)
            or $state[$p:l1] = 58                           (: 'string-replace' :)
            or $state[$p:l1] = 59                           (: 'unescape-markup' :)
            or $state[$p:l1] = 61                           (: 'unwrap' :)
            or $state[$p:l1] = 62                           (: 'uuid' :)
            or $state[$p:l1] = 63                           (: 'validate-with-relax-ng' :)
            or $state[$p:l1] = 64                           (: 'validate-with-schematron' :)
            or $state[$p:l1] = 65                           (: 'validate-with-xml-schema' :)
            or $state[$p:l1] = 66                           (: 'wrap' :)
            or $state[$p:l1] = 70                           (: 'wrap-sequence' :)
            or $state[$p:l1] = 71                           (: 'www-form-urldecode' :)
            or $state[$p:l1] = 72                           (: 'www-form-urlencode' :)
            or $state[$p:l1] = 73                           (: 'xinclude' :)
            or $state[$p:l1] = 74                           (: 'xquery' :)
            or $state[$p:l1] = 75                           (: 'xsl-formatter' :)
            or $state[$p:l1] = 76                           (: 'xslt' :)
            or $state[$p:l1] = 77) then                     (: 'xslt' :)
        let $state := p:lookahead2W(59, $input, $state)     (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
        let $state :=
          if ($state[$p:lk] = 1424                          (: 'add-xml-base' ':' :)
           or $state[$p:lk] = 1425                          (: 'compare' ':' :)
           or $state[$p:lk] = 1427                          (: 'count' ':' :)
           or $state[$p:lk] = 1428                          (: 'delete' ':' :)
           or $state[$p:lk] = 1430                          (: 'directory-list' ':' :)
           or $state[$p:lk] = 1431                          (: 'error' ':' :)
           or $state[$p:lk] = 1435                          (: 'escape-markup' ':' :)
           or $state[$p:lk] = 1436                          (: 'exec' ':' :)
           or $state[$p:lk] = 1437                          (: 'filter' ':' :)
           or $state[$p:lk] = 1438                          (: 'hash' ':' :)
           or $state[$p:lk] = 1441                          (: 'http-request' ':' :)
           or $state[$p:lk] = 1442                          (: 'identity' ':' :)
           or $state[$p:lk] = 1443                          (: 'insert' ':' :)
           or $state[$p:lk] = 1445                          (: 'label-elements' ':' :)
           or $state[$p:lk] = 1447                          (: 'load' ':' :)
           or $state[$p:lk] = 1449                          (: 'make-absolute-uris' ':' :)
           or $state[$p:lk] = 1450                          (: 'namespace-rename' ':' :)
           or $state[$p:lk] = 1452                          (: 'pack' ':' :)
           or $state[$p:lk] = 1453                          (: 'parameters' ':' :)
           or $state[$p:lk] = 1454                          (: 'rename' ':' :)
           or $state[$p:lk] = 1458                          (: 'replace' ':' :)
           or $state[$p:lk] = 1459                          (: 'set-attributes' ':' :)
           or $state[$p:lk] = 1462                          (: 'sink' ':' :)
           or $state[$p:lk] = 1463                          (: 'split-sequence' ':' :)
           or $state[$p:lk] = 1464                          (: 'store' ':' :)
           or $state[$p:lk] = 1466                          (: 'string-replace' ':' :)
           or $state[$p:lk] = 1467                          (: 'unescape-markup' ':' :)
           or $state[$p:lk] = 1469                          (: 'unwrap' ':' :)
           or $state[$p:lk] = 1470                          (: 'uuid' ':' :)
           or $state[$p:lk] = 1471                          (: 'validate-with-relax-ng' ':' :)
           or $state[$p:lk] = 1472                          (: 'validate-with-schematron' ':' :)
           or $state[$p:lk] = 1473                          (: 'validate-with-xml-schema' ':' :)
           or $state[$p:lk] = 1474                          (: 'wrap' ':' :)
           or $state[$p:lk] = 1478                          (: 'wrap-sequence' ':' :)
           or $state[$p:lk] = 1479                          (: 'www-form-urldecode' ':' :)
           or $state[$p:lk] = 1480                          (: 'www-form-urlencode' ':' :)
           or $state[$p:lk] = 1481                          (: 'xinclude' ':' :)
           or $state[$p:lk] = 1482                          (: 'xquery' ':' :)
           or $state[$p:lk] = 1483                          (: 'xsl-formatter' ':' :)
           or $state[$p:lk] = 1484                          (: 'xslt' ':' :)
           or $state[$p:lk] = 1485) then                    (: 'xslt' ':' :)
            let $state := p:lookahead3(47, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1552                     (: 'add-xml-base' '=' :)
                or $state[$p:lk] = 1553                     (: 'compare' '=' :)
                or $state[$p:lk] = 1555                     (: 'count' '=' :)
                or $state[$p:lk] = 1556                     (: 'delete' '=' :)
                or $state[$p:lk] = 1558                     (: 'directory-list' '=' :)
                or $state[$p:lk] = 1559                     (: 'error' '=' :)
                or $state[$p:lk] = 1563                     (: 'escape-markup' '=' :)
                or $state[$p:lk] = 1564                     (: 'exec' '=' :)
                or $state[$p:lk] = 1565                     (: 'filter' '=' :)
                or $state[$p:lk] = 1566                     (: 'hash' '=' :)
                or $state[$p:lk] = 1569                     (: 'http-request' '=' :)
                or $state[$p:lk] = 1570                     (: 'identity' '=' :)
                or $state[$p:lk] = 1571                     (: 'insert' '=' :)
                or $state[$p:lk] = 1573                     (: 'label-elements' '=' :)
                or $state[$p:lk] = 1575                     (: 'load' '=' :)
                or $state[$p:lk] = 1577                     (: 'make-absolute-uris' '=' :)
                or $state[$p:lk] = 1578                     (: 'namespace-rename' '=' :)
                or $state[$p:lk] = 1580                     (: 'pack' '=' :)
                or $state[$p:lk] = 1581                     (: 'parameters' '=' :)
                or $state[$p:lk] = 1582                     (: 'rename' '=' :)
                or $state[$p:lk] = 1586                     (: 'replace' '=' :)
                or $state[$p:lk] = 1587                     (: 'set-attributes' '=' :)
                or $state[$p:lk] = 1590                     (: 'sink' '=' :)
                or $state[$p:lk] = 1591                     (: 'split-sequence' '=' :)
                or $state[$p:lk] = 1592                     (: 'store' '=' :)
                or $state[$p:lk] = 1594                     (: 'string-replace' '=' :)
                or $state[$p:lk] = 1595                     (: 'unescape-markup' '=' :)
                or $state[$p:lk] = 1597                     (: 'unwrap' '=' :)
                or $state[$p:lk] = 1598                     (: 'uuid' '=' :)
                or $state[$p:lk] = 1599                     (: 'validate-with-relax-ng' '=' :)
                or $state[$p:lk] = 1600                     (: 'validate-with-schematron' '=' :)
                or $state[$p:lk] = 1601                     (: 'validate-with-xml-schema' '=' :)
                or $state[$p:lk] = 1602                     (: 'wrap' '=' :)
                or $state[$p:lk] = 1606                     (: 'wrap-sequence' '=' :)
                or $state[$p:lk] = 1607                     (: 'www-form-urldecode' '=' :)
                or $state[$p:lk] = 1608                     (: 'www-form-urlencode' '=' :)
                or $state[$p:lk] = 1609                     (: 'xinclude' '=' :)
                or $state[$p:lk] = 1610                     (: 'xquery' '=' :)
                or $state[$p:lk] = 1611                     (: 'xsl-formatter' '=' :)
                or $state[$p:lk] = 1612                     (: 'xslt' '=' :)
                or $state[$p:lk] = 1613) then               (: 'xslt' '=' :)
            let $state := p:lookahead3W(48, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 83333                        (: NCName^Token ':' NCName^Token :)
            or $state[$p:lk] = 83344                        (: 'add-attribute' ':' NCName^Token :)
            or $state[$p:lk] = 83345                        (: 'add-xml-base' ':' NCName^Token :)
            or $state[$p:lk] = 83347                        (: 'compare' ':' NCName^Token :)
            or $state[$p:lk] = 83348                        (: 'count' ':' NCName^Token :)
            or $state[$p:lk] = 83349                        (: 'default' ':' NCName^Token :)
            or $state[$p:lk] = 83350                        (: 'delete' ':' NCName^Token :)
            or $state[$p:lk] = 83351                        (: 'directory-list' ':' NCName^Token :)
            or $state[$p:lk] = 83353                        (: 'else' ':' NCName^Token :)
            or $state[$p:lk] = 83355                        (: 'error' ':' NCName^Token :)
            or $state[$p:lk] = 83356                        (: 'escape-markup' ':' NCName^Token :)
            or $state[$p:lk] = 83357                        (: 'exec' ':' NCName^Token :)
            or $state[$p:lk] = 83358                        (: 'filter' ':' NCName^Token :)
            or $state[$p:lk] = 83359                        (: 'for-each' ':' NCName^Token :)
            or $state[$p:lk] = 83361                        (: 'hash' ':' NCName^Token :)
            or $state[$p:lk] = 83362                        (: 'http-request' ':' NCName^Token :)
            or $state[$p:lk] = 83363                        (: 'identity' ':' NCName^Token :)
            or $state[$p:lk] = 83364                        (: 'if' ':' NCName^Token :)
            or $state[$p:lk] = 83365                        (: 'insert' ':' NCName^Token :)
            or $state[$p:lk] = 83367                        (: 'label-elements' ':' NCName^Token :)
            or $state[$p:lk] = 83368                        (: 'library' ':' NCName^Token :)
            or $state[$p:lk] = 83369                        (: 'load' ':' NCName^Token :)
            or $state[$p:lk] = 83370                        (: 'make-absolute-uris' ':' NCName^Token :)
            or $state[$p:lk] = 83371                        (: 'namespace' ':' NCName^Token :)
            or $state[$p:lk] = 83372                        (: 'namespace-rename' ':' NCName^Token :)
            or $state[$p:lk] = 83373                        (: 'pack' ':' NCName^Token :)
            or $state[$p:lk] = 83374                        (: 'parameters' ':' NCName^Token :)
            or $state[$p:lk] = 83376                        (: 'pipeline' ':' NCName^Token :)
            or $state[$p:lk] = 83378                        (: 'rename' ':' NCName^Token :)
            or $state[$p:lk] = 83379                        (: 'replace' ':' NCName^Token :)
            or $state[$p:lk] = 83382                        (: 'set-attributes' ':' NCName^Token :)
            or $state[$p:lk] = 83383                        (: 'sink' ':' NCName^Token :)
            or $state[$p:lk] = 83384                        (: 'split-sequence' ':' NCName^Token :)
            or $state[$p:lk] = 83385                        (: 'step' ':' NCName^Token :)
            or $state[$p:lk] = 83386                        (: 'store' ':' NCName^Token :)
            or $state[$p:lk] = 83387                        (: 'string-replace' ':' NCName^Token :)
            or $state[$p:lk] = 83388                        (: 'try' ':' NCName^Token :)
            or $state[$p:lk] = 83389                        (: 'unescape-markup' ':' NCName^Token :)
            or $state[$p:lk] = 83390                        (: 'unwrap' ':' NCName^Token :)
            or $state[$p:lk] = 83391                        (: 'uuid' ':' NCName^Token :)
            or $state[$p:lk] = 83392                        (: 'validate-with-relax-ng' ':' NCName^Token :)
            or $state[$p:lk] = 83393                        (: 'validate-with-schematron' ':' NCName^Token :)
            or $state[$p:lk] = 83394                        (: 'validate-with-xml-schema' ':' NCName^Token :)
            or $state[$p:lk] = 83395                        (: 'variable' ':' NCName^Token :)
            or $state[$p:lk] = 83396                        (: 'viewport' ':' NCName^Token :)
            or $state[$p:lk] = 83398                        (: 'wrap' ':' NCName^Token :)
            or $state[$p:lk] = 83399                        (: 'wrap-sequence' ':' NCName^Token :)
            or $state[$p:lk] = 83400                        (: 'www-form-urldecode' ':' NCName^Token :)
            or $state[$p:lk] = 83401                        (: 'www-form-urlencode' ':' NCName^Token :)
            or $state[$p:lk] = 83402                        (: 'xinclude' ':' NCName^Token :)
            or $state[$p:lk] = 83403                        (: 'xquery' ':' NCName^Token :)
            or $state[$p:lk] = 83404                        (: 'xsl-formatter' ':' NCName^Token :)
            or $state[$p:lk] = 83405                        (: 'xslt' ':' NCName^Token :)
            or $state[$p:lk] = 263557                       (: NCName^Token ':' 'add-attribute' :)
            or $state[$p:lk] = 263568                       (: 'add-attribute' ':' 'add-attribute' :)
            or $state[$p:lk] = 263569                       (: 'add-xml-base' ':' 'add-attribute' :)
            or $state[$p:lk] = 263571                       (: 'compare' ':' 'add-attribute' :)
            or $state[$p:lk] = 263572                       (: 'count' ':' 'add-attribute' :)
            or $state[$p:lk] = 263573                       (: 'default' ':' 'add-attribute' :)
            or $state[$p:lk] = 263574                       (: 'delete' ':' 'add-attribute' :)
            or $state[$p:lk] = 263575                       (: 'directory-list' ':' 'add-attribute' :)
            or $state[$p:lk] = 263577                       (: 'else' ':' 'add-attribute' :)
            or $state[$p:lk] = 263579                       (: 'error' ':' 'add-attribute' :)
            or $state[$p:lk] = 263580                       (: 'escape-markup' ':' 'add-attribute' :)
            or $state[$p:lk] = 263581                       (: 'exec' ':' 'add-attribute' :)
            or $state[$p:lk] = 263582                       (: 'filter' ':' 'add-attribute' :)
            or $state[$p:lk] = 263583                       (: 'for-each' ':' 'add-attribute' :)
            or $state[$p:lk] = 263585                       (: 'hash' ':' 'add-attribute' :)
            or $state[$p:lk] = 263586                       (: 'http-request' ':' 'add-attribute' :)
            or $state[$p:lk] = 263587                       (: 'identity' ':' 'add-attribute' :)
            or $state[$p:lk] = 263588                       (: 'if' ':' 'add-attribute' :)
            or $state[$p:lk] = 263589                       (: 'insert' ':' 'add-attribute' :)
            or $state[$p:lk] = 263591                       (: 'label-elements' ':' 'add-attribute' :)
            or $state[$p:lk] = 263592                       (: 'library' ':' 'add-attribute' :)
            or $state[$p:lk] = 263593                       (: 'load' ':' 'add-attribute' :)
            or $state[$p:lk] = 263594                       (: 'make-absolute-uris' ':' 'add-attribute' :)
            or $state[$p:lk] = 263595                       (: 'namespace' ':' 'add-attribute' :)
            or $state[$p:lk] = 263596                       (: 'namespace-rename' ':' 'add-attribute' :)
            or $state[$p:lk] = 263597                       (: 'pack' ':' 'add-attribute' :)
            or $state[$p:lk] = 263598                       (: 'parameters' ':' 'add-attribute' :)
            or $state[$p:lk] = 263600                       (: 'pipeline' ':' 'add-attribute' :)
            or $state[$p:lk] = 263602                       (: 'rename' ':' 'add-attribute' :)
            or $state[$p:lk] = 263603                       (: 'replace' ':' 'add-attribute' :)
            or $state[$p:lk] = 263606                       (: 'set-attributes' ':' 'add-attribute' :)
            or $state[$p:lk] = 263607                       (: 'sink' ':' 'add-attribute' :)
            or $state[$p:lk] = 263608                       (: 'split-sequence' ':' 'add-attribute' :)
            or $state[$p:lk] = 263609                       (: 'step' ':' 'add-attribute' :)
            or $state[$p:lk] = 263610                       (: 'store' ':' 'add-attribute' :)
            or $state[$p:lk] = 263611                       (: 'string-replace' ':' 'add-attribute' :)
            or $state[$p:lk] = 263612                       (: 'try' ':' 'add-attribute' :)
            or $state[$p:lk] = 263613                       (: 'unescape-markup' ':' 'add-attribute' :)
            or $state[$p:lk] = 263614                       (: 'unwrap' ':' 'add-attribute' :)
            or $state[$p:lk] = 263615                       (: 'uuid' ':' 'add-attribute' :)
            or $state[$p:lk] = 263616                       (: 'validate-with-relax-ng' ':' 'add-attribute' :)
            or $state[$p:lk] = 263617                       (: 'validate-with-schematron' ':' 'add-attribute' :)
            or $state[$p:lk] = 263618                       (: 'validate-with-xml-schema' ':' 'add-attribute' :)
            or $state[$p:lk] = 263619                       (: 'variable' ':' 'add-attribute' :)
            or $state[$p:lk] = 263620                       (: 'viewport' ':' 'add-attribute' :)
            or $state[$p:lk] = 263622                       (: 'wrap' ':' 'add-attribute' :)
            or $state[$p:lk] = 263623                       (: 'wrap-sequence' ':' 'add-attribute' :)
            or $state[$p:lk] = 263624                       (: 'www-form-urldecode' ':' 'add-attribute' :)
            or $state[$p:lk] = 263625                       (: 'www-form-urlencode' ':' 'add-attribute' :)
            or $state[$p:lk] = 263626                       (: 'xinclude' ':' 'add-attribute' :)
            or $state[$p:lk] = 263627                       (: 'xquery' ':' 'add-attribute' :)
            or $state[$p:lk] = 263628                       (: 'xsl-formatter' ':' 'add-attribute' :)
            or $state[$p:lk] = 263629                       (: 'xslt' ':' 'add-attribute' :)
            or $state[$p:lk] = 279941                       (: NCName^Token ':' 'add-xml-base' :)
            or $state[$p:lk] = 279952                       (: 'add-attribute' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279953                       (: 'add-xml-base' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279955                       (: 'compare' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279956                       (: 'count' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279957                       (: 'default' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279958                       (: 'delete' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279959                       (: 'directory-list' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279961                       (: 'else' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279963                       (: 'error' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279964                       (: 'escape-markup' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279965                       (: 'exec' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279966                       (: 'filter' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279967                       (: 'for-each' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279969                       (: 'hash' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279970                       (: 'http-request' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279971                       (: 'identity' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279972                       (: 'if' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279973                       (: 'insert' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279975                       (: 'label-elements' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279976                       (: 'library' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279977                       (: 'load' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279978                       (: 'make-absolute-uris' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279979                       (: 'namespace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279980                       (: 'namespace-rename' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279981                       (: 'pack' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279982                       (: 'parameters' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279984                       (: 'pipeline' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279986                       (: 'rename' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279987                       (: 'replace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279990                       (: 'set-attributes' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279991                       (: 'sink' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279992                       (: 'split-sequence' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279993                       (: 'step' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279994                       (: 'store' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279995                       (: 'string-replace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279996                       (: 'try' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279997                       (: 'unescape-markup' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279998                       (: 'unwrap' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279999                       (: 'uuid' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280000                       (: 'validate-with-relax-ng' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280001                       (: 'validate-with-schematron' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280002                       (: 'validate-with-xml-schema' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280003                       (: 'variable' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280004                       (: 'viewport' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280006                       (: 'wrap' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280007                       (: 'wrap-sequence' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280008                       (: 'www-form-urldecode' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280009                       (: 'www-form-urlencode' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280010                       (: 'xinclude' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280011                       (: 'xquery' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280012                       (: 'xsl-formatter' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280013                       (: 'xslt' ':' 'add-xml-base' :)
            or $state[$p:lk] = 312709                       (: NCName^Token ':' 'compare' :)
            or $state[$p:lk] = 312720                       (: 'add-attribute' ':' 'compare' :)
            or $state[$p:lk] = 312721                       (: 'add-xml-base' ':' 'compare' :)
            or $state[$p:lk] = 312723                       (: 'compare' ':' 'compare' :)
            or $state[$p:lk] = 312724                       (: 'count' ':' 'compare' :)
            or $state[$p:lk] = 312725                       (: 'default' ':' 'compare' :)
            or $state[$p:lk] = 312726                       (: 'delete' ':' 'compare' :)
            or $state[$p:lk] = 312727                       (: 'directory-list' ':' 'compare' :)
            or $state[$p:lk] = 312729                       (: 'else' ':' 'compare' :)
            or $state[$p:lk] = 312731                       (: 'error' ':' 'compare' :)
            or $state[$p:lk] = 312732                       (: 'escape-markup' ':' 'compare' :)
            or $state[$p:lk] = 312733                       (: 'exec' ':' 'compare' :)
            or $state[$p:lk] = 312734                       (: 'filter' ':' 'compare' :)
            or $state[$p:lk] = 312735                       (: 'for-each' ':' 'compare' :)
            or $state[$p:lk] = 312737                       (: 'hash' ':' 'compare' :)
            or $state[$p:lk] = 312738                       (: 'http-request' ':' 'compare' :)
            or $state[$p:lk] = 312739                       (: 'identity' ':' 'compare' :)
            or $state[$p:lk] = 312740                       (: 'if' ':' 'compare' :)
            or $state[$p:lk] = 312741                       (: 'insert' ':' 'compare' :)
            or $state[$p:lk] = 312743                       (: 'label-elements' ':' 'compare' :)
            or $state[$p:lk] = 312744                       (: 'library' ':' 'compare' :)
            or $state[$p:lk] = 312745                       (: 'load' ':' 'compare' :)
            or $state[$p:lk] = 312746                       (: 'make-absolute-uris' ':' 'compare' :)
            or $state[$p:lk] = 312747                       (: 'namespace' ':' 'compare' :)
            or $state[$p:lk] = 312748                       (: 'namespace-rename' ':' 'compare' :)
            or $state[$p:lk] = 312749                       (: 'pack' ':' 'compare' :)
            or $state[$p:lk] = 312750                       (: 'parameters' ':' 'compare' :)
            or $state[$p:lk] = 312752                       (: 'pipeline' ':' 'compare' :)
            or $state[$p:lk] = 312754                       (: 'rename' ':' 'compare' :)
            or $state[$p:lk] = 312755                       (: 'replace' ':' 'compare' :)
            or $state[$p:lk] = 312758                       (: 'set-attributes' ':' 'compare' :)
            or $state[$p:lk] = 312759                       (: 'sink' ':' 'compare' :)
            or $state[$p:lk] = 312760                       (: 'split-sequence' ':' 'compare' :)
            or $state[$p:lk] = 312761                       (: 'step' ':' 'compare' :)
            or $state[$p:lk] = 312762                       (: 'store' ':' 'compare' :)
            or $state[$p:lk] = 312763                       (: 'string-replace' ':' 'compare' :)
            or $state[$p:lk] = 312764                       (: 'try' ':' 'compare' :)
            or $state[$p:lk] = 312765                       (: 'unescape-markup' ':' 'compare' :)
            or $state[$p:lk] = 312766                       (: 'unwrap' ':' 'compare' :)
            or $state[$p:lk] = 312767                       (: 'uuid' ':' 'compare' :)
            or $state[$p:lk] = 312768                       (: 'validate-with-relax-ng' ':' 'compare' :)
            or $state[$p:lk] = 312769                       (: 'validate-with-schematron' ':' 'compare' :)
            or $state[$p:lk] = 312770                       (: 'validate-with-xml-schema' ':' 'compare' :)
            or $state[$p:lk] = 312771                       (: 'variable' ':' 'compare' :)
            or $state[$p:lk] = 312772                       (: 'viewport' ':' 'compare' :)
            or $state[$p:lk] = 312774                       (: 'wrap' ':' 'compare' :)
            or $state[$p:lk] = 312775                       (: 'wrap-sequence' ':' 'compare' :)
            or $state[$p:lk] = 312776                       (: 'www-form-urldecode' ':' 'compare' :)
            or $state[$p:lk] = 312777                       (: 'www-form-urlencode' ':' 'compare' :)
            or $state[$p:lk] = 312778                       (: 'xinclude' ':' 'compare' :)
            or $state[$p:lk] = 312779                       (: 'xquery' ':' 'compare' :)
            or $state[$p:lk] = 312780                       (: 'xsl-formatter' ':' 'compare' :)
            or $state[$p:lk] = 312781                       (: 'xslt' ':' 'compare' :)
            or $state[$p:lk] = 329093                       (: NCName^Token ':' 'count' :)
            or $state[$p:lk] = 329104                       (: 'add-attribute' ':' 'count' :)
            or $state[$p:lk] = 329105                       (: 'add-xml-base' ':' 'count' :)
            or $state[$p:lk] = 329107                       (: 'compare' ':' 'count' :)
            or $state[$p:lk] = 329108                       (: 'count' ':' 'count' :)
            or $state[$p:lk] = 329109                       (: 'default' ':' 'count' :)
            or $state[$p:lk] = 329110                       (: 'delete' ':' 'count' :)
            or $state[$p:lk] = 329111                       (: 'directory-list' ':' 'count' :)
            or $state[$p:lk] = 329113                       (: 'else' ':' 'count' :)
            or $state[$p:lk] = 329115                       (: 'error' ':' 'count' :)
            or $state[$p:lk] = 329116                       (: 'escape-markup' ':' 'count' :)
            or $state[$p:lk] = 329117                       (: 'exec' ':' 'count' :)
            or $state[$p:lk] = 329118                       (: 'filter' ':' 'count' :)
            or $state[$p:lk] = 329119                       (: 'for-each' ':' 'count' :)
            or $state[$p:lk] = 329121                       (: 'hash' ':' 'count' :)
            or $state[$p:lk] = 329122                       (: 'http-request' ':' 'count' :)
            or $state[$p:lk] = 329123                       (: 'identity' ':' 'count' :)
            or $state[$p:lk] = 329124                       (: 'if' ':' 'count' :)
            or $state[$p:lk] = 329125                       (: 'insert' ':' 'count' :)
            or $state[$p:lk] = 329127                       (: 'label-elements' ':' 'count' :)
            or $state[$p:lk] = 329128                       (: 'library' ':' 'count' :)
            or $state[$p:lk] = 329129                       (: 'load' ':' 'count' :)
            or $state[$p:lk] = 329130                       (: 'make-absolute-uris' ':' 'count' :)
            or $state[$p:lk] = 329131                       (: 'namespace' ':' 'count' :)
            or $state[$p:lk] = 329132                       (: 'namespace-rename' ':' 'count' :)
            or $state[$p:lk] = 329133                       (: 'pack' ':' 'count' :)
            or $state[$p:lk] = 329134                       (: 'parameters' ':' 'count' :)
            or $state[$p:lk] = 329136                       (: 'pipeline' ':' 'count' :)
            or $state[$p:lk] = 329138                       (: 'rename' ':' 'count' :)
            or $state[$p:lk] = 329139                       (: 'replace' ':' 'count' :)
            or $state[$p:lk] = 329142                       (: 'set-attributes' ':' 'count' :)
            or $state[$p:lk] = 329143                       (: 'sink' ':' 'count' :)
            or $state[$p:lk] = 329144                       (: 'split-sequence' ':' 'count' :)
            or $state[$p:lk] = 329145                       (: 'step' ':' 'count' :)
            or $state[$p:lk] = 329146                       (: 'store' ':' 'count' :)
            or $state[$p:lk] = 329147                       (: 'string-replace' ':' 'count' :)
            or $state[$p:lk] = 329148                       (: 'try' ':' 'count' :)
            or $state[$p:lk] = 329149                       (: 'unescape-markup' ':' 'count' :)
            or $state[$p:lk] = 329150                       (: 'unwrap' ':' 'count' :)
            or $state[$p:lk] = 329151                       (: 'uuid' ':' 'count' :)
            or $state[$p:lk] = 329152                       (: 'validate-with-relax-ng' ':' 'count' :)
            or $state[$p:lk] = 329153                       (: 'validate-with-schematron' ':' 'count' :)
            or $state[$p:lk] = 329154                       (: 'validate-with-xml-schema' ':' 'count' :)
            or $state[$p:lk] = 329155                       (: 'variable' ':' 'count' :)
            or $state[$p:lk] = 329156                       (: 'viewport' ':' 'count' :)
            or $state[$p:lk] = 329158                       (: 'wrap' ':' 'count' :)
            or $state[$p:lk] = 329159                       (: 'wrap-sequence' ':' 'count' :)
            or $state[$p:lk] = 329160                       (: 'www-form-urldecode' ':' 'count' :)
            or $state[$p:lk] = 329161                       (: 'www-form-urlencode' ':' 'count' :)
            or $state[$p:lk] = 329162                       (: 'xinclude' ':' 'count' :)
            or $state[$p:lk] = 329163                       (: 'xquery' ':' 'count' :)
            or $state[$p:lk] = 329164                       (: 'xsl-formatter' ':' 'count' :)
            or $state[$p:lk] = 329165                       (: 'xslt' ':' 'count' :)
            or $state[$p:lk] = 345477                       (: NCName^Token ':' 'default' :)
            or $state[$p:lk] = 345488                       (: 'add-attribute' ':' 'default' :)
            or $state[$p:lk] = 345489                       (: 'add-xml-base' ':' 'default' :)
            or $state[$p:lk] = 345491                       (: 'compare' ':' 'default' :)
            or $state[$p:lk] = 345492                       (: 'count' ':' 'default' :)
            or $state[$p:lk] = 345493                       (: 'default' ':' 'default' :)
            or $state[$p:lk] = 345494                       (: 'delete' ':' 'default' :)
            or $state[$p:lk] = 345495                       (: 'directory-list' ':' 'default' :)
            or $state[$p:lk] = 345497                       (: 'else' ':' 'default' :)
            or $state[$p:lk] = 345499                       (: 'error' ':' 'default' :)
            or $state[$p:lk] = 345500                       (: 'escape-markup' ':' 'default' :)
            or $state[$p:lk] = 345501                       (: 'exec' ':' 'default' :)
            or $state[$p:lk] = 345502                       (: 'filter' ':' 'default' :)
            or $state[$p:lk] = 345503                       (: 'for-each' ':' 'default' :)
            or $state[$p:lk] = 345505                       (: 'hash' ':' 'default' :)
            or $state[$p:lk] = 345506                       (: 'http-request' ':' 'default' :)
            or $state[$p:lk] = 345507                       (: 'identity' ':' 'default' :)
            or $state[$p:lk] = 345508                       (: 'if' ':' 'default' :)
            or $state[$p:lk] = 345509                       (: 'insert' ':' 'default' :)
            or $state[$p:lk] = 345511                       (: 'label-elements' ':' 'default' :)
            or $state[$p:lk] = 345512                       (: 'library' ':' 'default' :)
            or $state[$p:lk] = 345513                       (: 'load' ':' 'default' :)
            or $state[$p:lk] = 345514                       (: 'make-absolute-uris' ':' 'default' :)
            or $state[$p:lk] = 345515                       (: 'namespace' ':' 'default' :)
            or $state[$p:lk] = 345516                       (: 'namespace-rename' ':' 'default' :)
            or $state[$p:lk] = 345517                       (: 'pack' ':' 'default' :)
            or $state[$p:lk] = 345518                       (: 'parameters' ':' 'default' :)
            or $state[$p:lk] = 345520                       (: 'pipeline' ':' 'default' :)
            or $state[$p:lk] = 345522                       (: 'rename' ':' 'default' :)
            or $state[$p:lk] = 345523                       (: 'replace' ':' 'default' :)
            or $state[$p:lk] = 345526                       (: 'set-attributes' ':' 'default' :)
            or $state[$p:lk] = 345527                       (: 'sink' ':' 'default' :)
            or $state[$p:lk] = 345528                       (: 'split-sequence' ':' 'default' :)
            or $state[$p:lk] = 345529                       (: 'step' ':' 'default' :)
            or $state[$p:lk] = 345530                       (: 'store' ':' 'default' :)
            or $state[$p:lk] = 345531                       (: 'string-replace' ':' 'default' :)
            or $state[$p:lk] = 345532                       (: 'try' ':' 'default' :)
            or $state[$p:lk] = 345533                       (: 'unescape-markup' ':' 'default' :)
            or $state[$p:lk] = 345534                       (: 'unwrap' ':' 'default' :)
            or $state[$p:lk] = 345535                       (: 'uuid' ':' 'default' :)
            or $state[$p:lk] = 345536                       (: 'validate-with-relax-ng' ':' 'default' :)
            or $state[$p:lk] = 345537                       (: 'validate-with-schematron' ':' 'default' :)
            or $state[$p:lk] = 345538                       (: 'validate-with-xml-schema' ':' 'default' :)
            or $state[$p:lk] = 345539                       (: 'variable' ':' 'default' :)
            or $state[$p:lk] = 345540                       (: 'viewport' ':' 'default' :)
            or $state[$p:lk] = 345542                       (: 'wrap' ':' 'default' :)
            or $state[$p:lk] = 345543                       (: 'wrap-sequence' ':' 'default' :)
            or $state[$p:lk] = 345544                       (: 'www-form-urldecode' ':' 'default' :)
            or $state[$p:lk] = 345545                       (: 'www-form-urlencode' ':' 'default' :)
            or $state[$p:lk] = 345546                       (: 'xinclude' ':' 'default' :)
            or $state[$p:lk] = 345547                       (: 'xquery' ':' 'default' :)
            or $state[$p:lk] = 345548                       (: 'xsl-formatter' ':' 'default' :)
            or $state[$p:lk] = 345549                       (: 'xslt' ':' 'default' :)
            or $state[$p:lk] = 361861                       (: NCName^Token ':' 'delete' :)
            or $state[$p:lk] = 361872                       (: 'add-attribute' ':' 'delete' :)
            or $state[$p:lk] = 361873                       (: 'add-xml-base' ':' 'delete' :)
            or $state[$p:lk] = 361875                       (: 'compare' ':' 'delete' :)
            or $state[$p:lk] = 361876                       (: 'count' ':' 'delete' :)
            or $state[$p:lk] = 361877                       (: 'default' ':' 'delete' :)
            or $state[$p:lk] = 361878                       (: 'delete' ':' 'delete' :)
            or $state[$p:lk] = 361879                       (: 'directory-list' ':' 'delete' :)
            or $state[$p:lk] = 361881                       (: 'else' ':' 'delete' :)
            or $state[$p:lk] = 361883                       (: 'error' ':' 'delete' :)
            or $state[$p:lk] = 361884                       (: 'escape-markup' ':' 'delete' :)
            or $state[$p:lk] = 361885                       (: 'exec' ':' 'delete' :)
            or $state[$p:lk] = 361886                       (: 'filter' ':' 'delete' :)
            or $state[$p:lk] = 361887                       (: 'for-each' ':' 'delete' :)
            or $state[$p:lk] = 361889                       (: 'hash' ':' 'delete' :)
            or $state[$p:lk] = 361890                       (: 'http-request' ':' 'delete' :)
            or $state[$p:lk] = 361891                       (: 'identity' ':' 'delete' :)
            or $state[$p:lk] = 361892                       (: 'if' ':' 'delete' :)
            or $state[$p:lk] = 361893                       (: 'insert' ':' 'delete' :)
            or $state[$p:lk] = 361895                       (: 'label-elements' ':' 'delete' :)
            or $state[$p:lk] = 361896                       (: 'library' ':' 'delete' :)
            or $state[$p:lk] = 361897                       (: 'load' ':' 'delete' :)
            or $state[$p:lk] = 361898                       (: 'make-absolute-uris' ':' 'delete' :)
            or $state[$p:lk] = 361899                       (: 'namespace' ':' 'delete' :)
            or $state[$p:lk] = 361900                       (: 'namespace-rename' ':' 'delete' :)
            or $state[$p:lk] = 361901                       (: 'pack' ':' 'delete' :)
            or $state[$p:lk] = 361902                       (: 'parameters' ':' 'delete' :)
            or $state[$p:lk] = 361904                       (: 'pipeline' ':' 'delete' :)
            or $state[$p:lk] = 361906                       (: 'rename' ':' 'delete' :)
            or $state[$p:lk] = 361907                       (: 'replace' ':' 'delete' :)
            or $state[$p:lk] = 361910                       (: 'set-attributes' ':' 'delete' :)
            or $state[$p:lk] = 361911                       (: 'sink' ':' 'delete' :)
            or $state[$p:lk] = 361912                       (: 'split-sequence' ':' 'delete' :)
            or $state[$p:lk] = 361913                       (: 'step' ':' 'delete' :)
            or $state[$p:lk] = 361914                       (: 'store' ':' 'delete' :)
            or $state[$p:lk] = 361915                       (: 'string-replace' ':' 'delete' :)
            or $state[$p:lk] = 361916                       (: 'try' ':' 'delete' :)
            or $state[$p:lk] = 361917                       (: 'unescape-markup' ':' 'delete' :)
            or $state[$p:lk] = 361918                       (: 'unwrap' ':' 'delete' :)
            or $state[$p:lk] = 361919                       (: 'uuid' ':' 'delete' :)
            or $state[$p:lk] = 361920                       (: 'validate-with-relax-ng' ':' 'delete' :)
            or $state[$p:lk] = 361921                       (: 'validate-with-schematron' ':' 'delete' :)
            or $state[$p:lk] = 361922                       (: 'validate-with-xml-schema' ':' 'delete' :)
            or $state[$p:lk] = 361923                       (: 'variable' ':' 'delete' :)
            or $state[$p:lk] = 361924                       (: 'viewport' ':' 'delete' :)
            or $state[$p:lk] = 361926                       (: 'wrap' ':' 'delete' :)
            or $state[$p:lk] = 361927                       (: 'wrap-sequence' ':' 'delete' :)
            or $state[$p:lk] = 361928                       (: 'www-form-urldecode' ':' 'delete' :)
            or $state[$p:lk] = 361929                       (: 'www-form-urlencode' ':' 'delete' :)
            or $state[$p:lk] = 361930                       (: 'xinclude' ':' 'delete' :)
            or $state[$p:lk] = 361931                       (: 'xquery' ':' 'delete' :)
            or $state[$p:lk] = 361932                       (: 'xsl-formatter' ':' 'delete' :)
            or $state[$p:lk] = 361933                       (: 'xslt' ':' 'delete' :)
            or $state[$p:lk] = 378245                       (: NCName^Token ':' 'directory-list' :)
            or $state[$p:lk] = 378256                       (: 'add-attribute' ':' 'directory-list' :)
            or $state[$p:lk] = 378257                       (: 'add-xml-base' ':' 'directory-list' :)
            or $state[$p:lk] = 378259                       (: 'compare' ':' 'directory-list' :)
            or $state[$p:lk] = 378260                       (: 'count' ':' 'directory-list' :)
            or $state[$p:lk] = 378261                       (: 'default' ':' 'directory-list' :)
            or $state[$p:lk] = 378262                       (: 'delete' ':' 'directory-list' :)
            or $state[$p:lk] = 378263                       (: 'directory-list' ':' 'directory-list' :)
            or $state[$p:lk] = 378265                       (: 'else' ':' 'directory-list' :)
            or $state[$p:lk] = 378267                       (: 'error' ':' 'directory-list' :)
            or $state[$p:lk] = 378268                       (: 'escape-markup' ':' 'directory-list' :)
            or $state[$p:lk] = 378269                       (: 'exec' ':' 'directory-list' :)
            or $state[$p:lk] = 378270                       (: 'filter' ':' 'directory-list' :)
            or $state[$p:lk] = 378271                       (: 'for-each' ':' 'directory-list' :)
            or $state[$p:lk] = 378273                       (: 'hash' ':' 'directory-list' :)
            or $state[$p:lk] = 378274                       (: 'http-request' ':' 'directory-list' :)
            or $state[$p:lk] = 378275                       (: 'identity' ':' 'directory-list' :)
            or $state[$p:lk] = 378276                       (: 'if' ':' 'directory-list' :)
            or $state[$p:lk] = 378277                       (: 'insert' ':' 'directory-list' :)
            or $state[$p:lk] = 378279                       (: 'label-elements' ':' 'directory-list' :)
            or $state[$p:lk] = 378280                       (: 'library' ':' 'directory-list' :)
            or $state[$p:lk] = 378281                       (: 'load' ':' 'directory-list' :)
            or $state[$p:lk] = 378282                       (: 'make-absolute-uris' ':' 'directory-list' :)
            or $state[$p:lk] = 378283                       (: 'namespace' ':' 'directory-list' :)
            or $state[$p:lk] = 378284                       (: 'namespace-rename' ':' 'directory-list' :)
            or $state[$p:lk] = 378285                       (: 'pack' ':' 'directory-list' :)
            or $state[$p:lk] = 378286                       (: 'parameters' ':' 'directory-list' :)
            or $state[$p:lk] = 378288                       (: 'pipeline' ':' 'directory-list' :)
            or $state[$p:lk] = 378290                       (: 'rename' ':' 'directory-list' :)
            or $state[$p:lk] = 378291                       (: 'replace' ':' 'directory-list' :)
            or $state[$p:lk] = 378294                       (: 'set-attributes' ':' 'directory-list' :)
            or $state[$p:lk] = 378295                       (: 'sink' ':' 'directory-list' :)
            or $state[$p:lk] = 378296                       (: 'split-sequence' ':' 'directory-list' :)
            or $state[$p:lk] = 378297                       (: 'step' ':' 'directory-list' :)
            or $state[$p:lk] = 378298                       (: 'store' ':' 'directory-list' :)
            or $state[$p:lk] = 378299                       (: 'string-replace' ':' 'directory-list' :)
            or $state[$p:lk] = 378300                       (: 'try' ':' 'directory-list' :)
            or $state[$p:lk] = 378301                       (: 'unescape-markup' ':' 'directory-list' :)
            or $state[$p:lk] = 378302                       (: 'unwrap' ':' 'directory-list' :)
            or $state[$p:lk] = 378303                       (: 'uuid' ':' 'directory-list' :)
            or $state[$p:lk] = 378304                       (: 'validate-with-relax-ng' ':' 'directory-list' :)
            or $state[$p:lk] = 378305                       (: 'validate-with-schematron' ':' 'directory-list' :)
            or $state[$p:lk] = 378306                       (: 'validate-with-xml-schema' ':' 'directory-list' :)
            or $state[$p:lk] = 378307                       (: 'variable' ':' 'directory-list' :)
            or $state[$p:lk] = 378308                       (: 'viewport' ':' 'directory-list' :)
            or $state[$p:lk] = 378310                       (: 'wrap' ':' 'directory-list' :)
            or $state[$p:lk] = 378311                       (: 'wrap-sequence' ':' 'directory-list' :)
            or $state[$p:lk] = 378312                       (: 'www-form-urldecode' ':' 'directory-list' :)
            or $state[$p:lk] = 378313                       (: 'www-form-urlencode' ':' 'directory-list' :)
            or $state[$p:lk] = 378314                       (: 'xinclude' ':' 'directory-list' :)
            or $state[$p:lk] = 378315                       (: 'xquery' ':' 'directory-list' :)
            or $state[$p:lk] = 378316                       (: 'xsl-formatter' ':' 'directory-list' :)
            or $state[$p:lk] = 378317                       (: 'xslt' ':' 'directory-list' :)
            or $state[$p:lk] = 411013                       (: NCName^Token ':' 'else' :)
            or $state[$p:lk] = 411024                       (: 'add-attribute' ':' 'else' :)
            or $state[$p:lk] = 411025                       (: 'add-xml-base' ':' 'else' :)
            or $state[$p:lk] = 411027                       (: 'compare' ':' 'else' :)
            or $state[$p:lk] = 411028                       (: 'count' ':' 'else' :)
            or $state[$p:lk] = 411029                       (: 'default' ':' 'else' :)
            or $state[$p:lk] = 411030                       (: 'delete' ':' 'else' :)
            or $state[$p:lk] = 411031                       (: 'directory-list' ':' 'else' :)
            or $state[$p:lk] = 411033                       (: 'else' ':' 'else' :)
            or $state[$p:lk] = 411035                       (: 'error' ':' 'else' :)
            or $state[$p:lk] = 411036                       (: 'escape-markup' ':' 'else' :)
            or $state[$p:lk] = 411037                       (: 'exec' ':' 'else' :)
            or $state[$p:lk] = 411038                       (: 'filter' ':' 'else' :)
            or $state[$p:lk] = 411039                       (: 'for-each' ':' 'else' :)
            or $state[$p:lk] = 411041                       (: 'hash' ':' 'else' :)
            or $state[$p:lk] = 411042                       (: 'http-request' ':' 'else' :)
            or $state[$p:lk] = 411043                       (: 'identity' ':' 'else' :)
            or $state[$p:lk] = 411044                       (: 'if' ':' 'else' :)
            or $state[$p:lk] = 411045                       (: 'insert' ':' 'else' :)
            or $state[$p:lk] = 411047                       (: 'label-elements' ':' 'else' :)
            or $state[$p:lk] = 411048                       (: 'library' ':' 'else' :)
            or $state[$p:lk] = 411049                       (: 'load' ':' 'else' :)
            or $state[$p:lk] = 411050                       (: 'make-absolute-uris' ':' 'else' :)
            or $state[$p:lk] = 411051                       (: 'namespace' ':' 'else' :)
            or $state[$p:lk] = 411052                       (: 'namespace-rename' ':' 'else' :)
            or $state[$p:lk] = 411053                       (: 'pack' ':' 'else' :)
            or $state[$p:lk] = 411054                       (: 'parameters' ':' 'else' :)
            or $state[$p:lk] = 411056                       (: 'pipeline' ':' 'else' :)
            or $state[$p:lk] = 411058                       (: 'rename' ':' 'else' :)
            or $state[$p:lk] = 411059                       (: 'replace' ':' 'else' :)
            or $state[$p:lk] = 411062                       (: 'set-attributes' ':' 'else' :)
            or $state[$p:lk] = 411063                       (: 'sink' ':' 'else' :)
            or $state[$p:lk] = 411064                       (: 'split-sequence' ':' 'else' :)
            or $state[$p:lk] = 411065                       (: 'step' ':' 'else' :)
            or $state[$p:lk] = 411066                       (: 'store' ':' 'else' :)
            or $state[$p:lk] = 411067                       (: 'string-replace' ':' 'else' :)
            or $state[$p:lk] = 411068                       (: 'try' ':' 'else' :)
            or $state[$p:lk] = 411069                       (: 'unescape-markup' ':' 'else' :)
            or $state[$p:lk] = 411070                       (: 'unwrap' ':' 'else' :)
            or $state[$p:lk] = 411071                       (: 'uuid' ':' 'else' :)
            or $state[$p:lk] = 411072                       (: 'validate-with-relax-ng' ':' 'else' :)
            or $state[$p:lk] = 411073                       (: 'validate-with-schematron' ':' 'else' :)
            or $state[$p:lk] = 411074                       (: 'validate-with-xml-schema' ':' 'else' :)
            or $state[$p:lk] = 411075                       (: 'variable' ':' 'else' :)
            or $state[$p:lk] = 411076                       (: 'viewport' ':' 'else' :)
            or $state[$p:lk] = 411078                       (: 'wrap' ':' 'else' :)
            or $state[$p:lk] = 411079                       (: 'wrap-sequence' ':' 'else' :)
            or $state[$p:lk] = 411080                       (: 'www-form-urldecode' ':' 'else' :)
            or $state[$p:lk] = 411081                       (: 'www-form-urlencode' ':' 'else' :)
            or $state[$p:lk] = 411082                       (: 'xinclude' ':' 'else' :)
            or $state[$p:lk] = 411083                       (: 'xquery' ':' 'else' :)
            or $state[$p:lk] = 411084                       (: 'xsl-formatter' ':' 'else' :)
            or $state[$p:lk] = 411085                       (: 'xslt' ':' 'else' :)
            or $state[$p:lk] = 443781                       (: NCName^Token ':' 'error' :)
            or $state[$p:lk] = 443792                       (: 'add-attribute' ':' 'error' :)
            or $state[$p:lk] = 443793                       (: 'add-xml-base' ':' 'error' :)
            or $state[$p:lk] = 443795                       (: 'compare' ':' 'error' :)
            or $state[$p:lk] = 443796                       (: 'count' ':' 'error' :)
            or $state[$p:lk] = 443797                       (: 'default' ':' 'error' :)
            or $state[$p:lk] = 443798                       (: 'delete' ':' 'error' :)
            or $state[$p:lk] = 443799                       (: 'directory-list' ':' 'error' :)
            or $state[$p:lk] = 443801                       (: 'else' ':' 'error' :)
            or $state[$p:lk] = 443803                       (: 'error' ':' 'error' :)
            or $state[$p:lk] = 443804                       (: 'escape-markup' ':' 'error' :)
            or $state[$p:lk] = 443805                       (: 'exec' ':' 'error' :)
            or $state[$p:lk] = 443806                       (: 'filter' ':' 'error' :)
            or $state[$p:lk] = 443807                       (: 'for-each' ':' 'error' :)
            or $state[$p:lk] = 443809                       (: 'hash' ':' 'error' :)
            or $state[$p:lk] = 443810                       (: 'http-request' ':' 'error' :)
            or $state[$p:lk] = 443811                       (: 'identity' ':' 'error' :)
            or $state[$p:lk] = 443812                       (: 'if' ':' 'error' :)
            or $state[$p:lk] = 443813                       (: 'insert' ':' 'error' :)
            or $state[$p:lk] = 443815                       (: 'label-elements' ':' 'error' :)
            or $state[$p:lk] = 443816                       (: 'library' ':' 'error' :)
            or $state[$p:lk] = 443817                       (: 'load' ':' 'error' :)
            or $state[$p:lk] = 443818                       (: 'make-absolute-uris' ':' 'error' :)
            or $state[$p:lk] = 443819                       (: 'namespace' ':' 'error' :)
            or $state[$p:lk] = 443820                       (: 'namespace-rename' ':' 'error' :)
            or $state[$p:lk] = 443821                       (: 'pack' ':' 'error' :)
            or $state[$p:lk] = 443822                       (: 'parameters' ':' 'error' :)
            or $state[$p:lk] = 443824                       (: 'pipeline' ':' 'error' :)
            or $state[$p:lk] = 443826                       (: 'rename' ':' 'error' :)
            or $state[$p:lk] = 443827                       (: 'replace' ':' 'error' :)
            or $state[$p:lk] = 443830                       (: 'set-attributes' ':' 'error' :)
            or $state[$p:lk] = 443831                       (: 'sink' ':' 'error' :)
            or $state[$p:lk] = 443832                       (: 'split-sequence' ':' 'error' :)
            or $state[$p:lk] = 443833                       (: 'step' ':' 'error' :)
            or $state[$p:lk] = 443834                       (: 'store' ':' 'error' :)
            or $state[$p:lk] = 443835                       (: 'string-replace' ':' 'error' :)
            or $state[$p:lk] = 443836                       (: 'try' ':' 'error' :)
            or $state[$p:lk] = 443837                       (: 'unescape-markup' ':' 'error' :)
            or $state[$p:lk] = 443838                       (: 'unwrap' ':' 'error' :)
            or $state[$p:lk] = 443839                       (: 'uuid' ':' 'error' :)
            or $state[$p:lk] = 443840                       (: 'validate-with-relax-ng' ':' 'error' :)
            or $state[$p:lk] = 443841                       (: 'validate-with-schematron' ':' 'error' :)
            or $state[$p:lk] = 443842                       (: 'validate-with-xml-schema' ':' 'error' :)
            or $state[$p:lk] = 443843                       (: 'variable' ':' 'error' :)
            or $state[$p:lk] = 443844                       (: 'viewport' ':' 'error' :)
            or $state[$p:lk] = 443846                       (: 'wrap' ':' 'error' :)
            or $state[$p:lk] = 443847                       (: 'wrap-sequence' ':' 'error' :)
            or $state[$p:lk] = 443848                       (: 'www-form-urldecode' ':' 'error' :)
            or $state[$p:lk] = 443849                       (: 'www-form-urlencode' ':' 'error' :)
            or $state[$p:lk] = 443850                       (: 'xinclude' ':' 'error' :)
            or $state[$p:lk] = 443851                       (: 'xquery' ':' 'error' :)
            or $state[$p:lk] = 443852                       (: 'xsl-formatter' ':' 'error' :)
            or $state[$p:lk] = 443853                       (: 'xslt' ':' 'error' :)
            or $state[$p:lk] = 460165                       (: NCName^Token ':' 'escape-markup' :)
            or $state[$p:lk] = 460176                       (: 'add-attribute' ':' 'escape-markup' :)
            or $state[$p:lk] = 460177                       (: 'add-xml-base' ':' 'escape-markup' :)
            or $state[$p:lk] = 460179                       (: 'compare' ':' 'escape-markup' :)
            or $state[$p:lk] = 460180                       (: 'count' ':' 'escape-markup' :)
            or $state[$p:lk] = 460181                       (: 'default' ':' 'escape-markup' :)
            or $state[$p:lk] = 460182                       (: 'delete' ':' 'escape-markup' :)
            or $state[$p:lk] = 460183                       (: 'directory-list' ':' 'escape-markup' :)
            or $state[$p:lk] = 460185                       (: 'else' ':' 'escape-markup' :)
            or $state[$p:lk] = 460187                       (: 'error' ':' 'escape-markup' :)
            or $state[$p:lk] = 460188                       (: 'escape-markup' ':' 'escape-markup' :)
            or $state[$p:lk] = 460189                       (: 'exec' ':' 'escape-markup' :)
            or $state[$p:lk] = 460190                       (: 'filter' ':' 'escape-markup' :)
            or $state[$p:lk] = 460191                       (: 'for-each' ':' 'escape-markup' :)
            or $state[$p:lk] = 460193                       (: 'hash' ':' 'escape-markup' :)
            or $state[$p:lk] = 460194                       (: 'http-request' ':' 'escape-markup' :)
            or $state[$p:lk] = 460195                       (: 'identity' ':' 'escape-markup' :)
            or $state[$p:lk] = 460196                       (: 'if' ':' 'escape-markup' :)
            or $state[$p:lk] = 460197                       (: 'insert' ':' 'escape-markup' :)
            or $state[$p:lk] = 460199                       (: 'label-elements' ':' 'escape-markup' :)
            or $state[$p:lk] = 460200                       (: 'library' ':' 'escape-markup' :)
            or $state[$p:lk] = 460201                       (: 'load' ':' 'escape-markup' :)
            or $state[$p:lk] = 460202                       (: 'make-absolute-uris' ':' 'escape-markup' :)
            or $state[$p:lk] = 460203                       (: 'namespace' ':' 'escape-markup' :)
            or $state[$p:lk] = 460204                       (: 'namespace-rename' ':' 'escape-markup' :)
            or $state[$p:lk] = 460205                       (: 'pack' ':' 'escape-markup' :)
            or $state[$p:lk] = 460206                       (: 'parameters' ':' 'escape-markup' :)
            or $state[$p:lk] = 460208                       (: 'pipeline' ':' 'escape-markup' :)
            or $state[$p:lk] = 460210                       (: 'rename' ':' 'escape-markup' :)
            or $state[$p:lk] = 460211                       (: 'replace' ':' 'escape-markup' :)
            or $state[$p:lk] = 460214                       (: 'set-attributes' ':' 'escape-markup' :)
            or $state[$p:lk] = 460215                       (: 'sink' ':' 'escape-markup' :)
            or $state[$p:lk] = 460216                       (: 'split-sequence' ':' 'escape-markup' :)
            or $state[$p:lk] = 460217                       (: 'step' ':' 'escape-markup' :)
            or $state[$p:lk] = 460218                       (: 'store' ':' 'escape-markup' :)
            or $state[$p:lk] = 460219                       (: 'string-replace' ':' 'escape-markup' :)
            or $state[$p:lk] = 460220                       (: 'try' ':' 'escape-markup' :)
            or $state[$p:lk] = 460221                       (: 'unescape-markup' ':' 'escape-markup' :)
            or $state[$p:lk] = 460222                       (: 'unwrap' ':' 'escape-markup' :)
            or $state[$p:lk] = 460223                       (: 'uuid' ':' 'escape-markup' :)
            or $state[$p:lk] = 460224                       (: 'validate-with-relax-ng' ':' 'escape-markup' :)
            or $state[$p:lk] = 460225                       (: 'validate-with-schematron' ':' 'escape-markup' :)
            or $state[$p:lk] = 460226                       (: 'validate-with-xml-schema' ':' 'escape-markup' :)
            or $state[$p:lk] = 460227                       (: 'variable' ':' 'escape-markup' :)
            or $state[$p:lk] = 460228                       (: 'viewport' ':' 'escape-markup' :)
            or $state[$p:lk] = 460230                       (: 'wrap' ':' 'escape-markup' :)
            or $state[$p:lk] = 460231                       (: 'wrap-sequence' ':' 'escape-markup' :)
            or $state[$p:lk] = 460232                       (: 'www-form-urldecode' ':' 'escape-markup' :)
            or $state[$p:lk] = 460233                       (: 'www-form-urlencode' ':' 'escape-markup' :)
            or $state[$p:lk] = 460234                       (: 'xinclude' ':' 'escape-markup' :)
            or $state[$p:lk] = 460235                       (: 'xquery' ':' 'escape-markup' :)
            or $state[$p:lk] = 460236                       (: 'xsl-formatter' ':' 'escape-markup' :)
            or $state[$p:lk] = 460237                       (: 'xslt' ':' 'escape-markup' :)
            or $state[$p:lk] = 476549                       (: NCName^Token ':' 'exec' :)
            or $state[$p:lk] = 476560                       (: 'add-attribute' ':' 'exec' :)
            or $state[$p:lk] = 476561                       (: 'add-xml-base' ':' 'exec' :)
            or $state[$p:lk] = 476563                       (: 'compare' ':' 'exec' :)
            or $state[$p:lk] = 476564                       (: 'count' ':' 'exec' :)
            or $state[$p:lk] = 476565                       (: 'default' ':' 'exec' :)
            or $state[$p:lk] = 476566                       (: 'delete' ':' 'exec' :)
            or $state[$p:lk] = 476567                       (: 'directory-list' ':' 'exec' :)
            or $state[$p:lk] = 476569                       (: 'else' ':' 'exec' :)
            or $state[$p:lk] = 476571                       (: 'error' ':' 'exec' :)
            or $state[$p:lk] = 476572                       (: 'escape-markup' ':' 'exec' :)
            or $state[$p:lk] = 476573                       (: 'exec' ':' 'exec' :)
            or $state[$p:lk] = 476574                       (: 'filter' ':' 'exec' :)
            or $state[$p:lk] = 476575                       (: 'for-each' ':' 'exec' :)
            or $state[$p:lk] = 476577                       (: 'hash' ':' 'exec' :)
            or $state[$p:lk] = 476578                       (: 'http-request' ':' 'exec' :)
            or $state[$p:lk] = 476579                       (: 'identity' ':' 'exec' :)
            or $state[$p:lk] = 476580                       (: 'if' ':' 'exec' :)
            or $state[$p:lk] = 476581                       (: 'insert' ':' 'exec' :)
            or $state[$p:lk] = 476583                       (: 'label-elements' ':' 'exec' :)
            or $state[$p:lk] = 476584                       (: 'library' ':' 'exec' :)
            or $state[$p:lk] = 476585                       (: 'load' ':' 'exec' :)
            or $state[$p:lk] = 476586                       (: 'make-absolute-uris' ':' 'exec' :)
            or $state[$p:lk] = 476587                       (: 'namespace' ':' 'exec' :)
            or $state[$p:lk] = 476588                       (: 'namespace-rename' ':' 'exec' :)
            or $state[$p:lk] = 476589                       (: 'pack' ':' 'exec' :)
            or $state[$p:lk] = 476590                       (: 'parameters' ':' 'exec' :)
            or $state[$p:lk] = 476592                       (: 'pipeline' ':' 'exec' :)
            or $state[$p:lk] = 476594                       (: 'rename' ':' 'exec' :)
            or $state[$p:lk] = 476595                       (: 'replace' ':' 'exec' :)
            or $state[$p:lk] = 476598                       (: 'set-attributes' ':' 'exec' :)
            or $state[$p:lk] = 476599                       (: 'sink' ':' 'exec' :)
            or $state[$p:lk] = 476600                       (: 'split-sequence' ':' 'exec' :)
            or $state[$p:lk] = 476601                       (: 'step' ':' 'exec' :)
            or $state[$p:lk] = 476602                       (: 'store' ':' 'exec' :)
            or $state[$p:lk] = 476603                       (: 'string-replace' ':' 'exec' :)
            or $state[$p:lk] = 476604                       (: 'try' ':' 'exec' :)
            or $state[$p:lk] = 476605                       (: 'unescape-markup' ':' 'exec' :)
            or $state[$p:lk] = 476606                       (: 'unwrap' ':' 'exec' :)
            or $state[$p:lk] = 476607                       (: 'uuid' ':' 'exec' :)
            or $state[$p:lk] = 476608                       (: 'validate-with-relax-ng' ':' 'exec' :)
            or $state[$p:lk] = 476609                       (: 'validate-with-schematron' ':' 'exec' :)
            or $state[$p:lk] = 476610                       (: 'validate-with-xml-schema' ':' 'exec' :)
            or $state[$p:lk] = 476611                       (: 'variable' ':' 'exec' :)
            or $state[$p:lk] = 476612                       (: 'viewport' ':' 'exec' :)
            or $state[$p:lk] = 476614                       (: 'wrap' ':' 'exec' :)
            or $state[$p:lk] = 476615                       (: 'wrap-sequence' ':' 'exec' :)
            or $state[$p:lk] = 476616                       (: 'www-form-urldecode' ':' 'exec' :)
            or $state[$p:lk] = 476617                       (: 'www-form-urlencode' ':' 'exec' :)
            or $state[$p:lk] = 476618                       (: 'xinclude' ':' 'exec' :)
            or $state[$p:lk] = 476619                       (: 'xquery' ':' 'exec' :)
            or $state[$p:lk] = 476620                       (: 'xsl-formatter' ':' 'exec' :)
            or $state[$p:lk] = 476621                       (: 'xslt' ':' 'exec' :)
            or $state[$p:lk] = 492933                       (: NCName^Token ':' 'filter' :)
            or $state[$p:lk] = 492944                       (: 'add-attribute' ':' 'filter' :)
            or $state[$p:lk] = 492945                       (: 'add-xml-base' ':' 'filter' :)
            or $state[$p:lk] = 492947                       (: 'compare' ':' 'filter' :)
            or $state[$p:lk] = 492948                       (: 'count' ':' 'filter' :)
            or $state[$p:lk] = 492949                       (: 'default' ':' 'filter' :)
            or $state[$p:lk] = 492950                       (: 'delete' ':' 'filter' :)
            or $state[$p:lk] = 492951                       (: 'directory-list' ':' 'filter' :)
            or $state[$p:lk] = 492953                       (: 'else' ':' 'filter' :)
            or $state[$p:lk] = 492955                       (: 'error' ':' 'filter' :)
            or $state[$p:lk] = 492956                       (: 'escape-markup' ':' 'filter' :)
            or $state[$p:lk] = 492957                       (: 'exec' ':' 'filter' :)
            or $state[$p:lk] = 492958                       (: 'filter' ':' 'filter' :)
            or $state[$p:lk] = 492959                       (: 'for-each' ':' 'filter' :)
            or $state[$p:lk] = 492961                       (: 'hash' ':' 'filter' :)
            or $state[$p:lk] = 492962                       (: 'http-request' ':' 'filter' :)
            or $state[$p:lk] = 492963                       (: 'identity' ':' 'filter' :)
            or $state[$p:lk] = 492964                       (: 'if' ':' 'filter' :)
            or $state[$p:lk] = 492965                       (: 'insert' ':' 'filter' :)
            or $state[$p:lk] = 492967                       (: 'label-elements' ':' 'filter' :)
            or $state[$p:lk] = 492968                       (: 'library' ':' 'filter' :)
            or $state[$p:lk] = 492969                       (: 'load' ':' 'filter' :)
            or $state[$p:lk] = 492970                       (: 'make-absolute-uris' ':' 'filter' :)
            or $state[$p:lk] = 492971                       (: 'namespace' ':' 'filter' :)
            or $state[$p:lk] = 492972                       (: 'namespace-rename' ':' 'filter' :)
            or $state[$p:lk] = 492973                       (: 'pack' ':' 'filter' :)
            or $state[$p:lk] = 492974                       (: 'parameters' ':' 'filter' :)
            or $state[$p:lk] = 492976                       (: 'pipeline' ':' 'filter' :)
            or $state[$p:lk] = 492978                       (: 'rename' ':' 'filter' :)
            or $state[$p:lk] = 492979                       (: 'replace' ':' 'filter' :)
            or $state[$p:lk] = 492982                       (: 'set-attributes' ':' 'filter' :)
            or $state[$p:lk] = 492983                       (: 'sink' ':' 'filter' :)
            or $state[$p:lk] = 492984                       (: 'split-sequence' ':' 'filter' :)
            or $state[$p:lk] = 492985                       (: 'step' ':' 'filter' :)
            or $state[$p:lk] = 492986                       (: 'store' ':' 'filter' :)
            or $state[$p:lk] = 492987                       (: 'string-replace' ':' 'filter' :)
            or $state[$p:lk] = 492988                       (: 'try' ':' 'filter' :)
            or $state[$p:lk] = 492989                       (: 'unescape-markup' ':' 'filter' :)
            or $state[$p:lk] = 492990                       (: 'unwrap' ':' 'filter' :)
            or $state[$p:lk] = 492991                       (: 'uuid' ':' 'filter' :)
            or $state[$p:lk] = 492992                       (: 'validate-with-relax-ng' ':' 'filter' :)
            or $state[$p:lk] = 492993                       (: 'validate-with-schematron' ':' 'filter' :)
            or $state[$p:lk] = 492994                       (: 'validate-with-xml-schema' ':' 'filter' :)
            or $state[$p:lk] = 492995                       (: 'variable' ':' 'filter' :)
            or $state[$p:lk] = 492996                       (: 'viewport' ':' 'filter' :)
            or $state[$p:lk] = 492998                       (: 'wrap' ':' 'filter' :)
            or $state[$p:lk] = 492999                       (: 'wrap-sequence' ':' 'filter' :)
            or $state[$p:lk] = 493000                       (: 'www-form-urldecode' ':' 'filter' :)
            or $state[$p:lk] = 493001                       (: 'www-form-urlencode' ':' 'filter' :)
            or $state[$p:lk] = 493002                       (: 'xinclude' ':' 'filter' :)
            or $state[$p:lk] = 493003                       (: 'xquery' ':' 'filter' :)
            or $state[$p:lk] = 493004                       (: 'xsl-formatter' ':' 'filter' :)
            or $state[$p:lk] = 493005                       (: 'xslt' ':' 'filter' :)
            or $state[$p:lk] = 509317                       (: NCName^Token ':' 'for-each' :)
            or $state[$p:lk] = 509328                       (: 'add-attribute' ':' 'for-each' :)
            or $state[$p:lk] = 509329                       (: 'add-xml-base' ':' 'for-each' :)
            or $state[$p:lk] = 509331                       (: 'compare' ':' 'for-each' :)
            or $state[$p:lk] = 509332                       (: 'count' ':' 'for-each' :)
            or $state[$p:lk] = 509333                       (: 'default' ':' 'for-each' :)
            or $state[$p:lk] = 509334                       (: 'delete' ':' 'for-each' :)
            or $state[$p:lk] = 509335                       (: 'directory-list' ':' 'for-each' :)
            or $state[$p:lk] = 509337                       (: 'else' ':' 'for-each' :)
            or $state[$p:lk] = 509339                       (: 'error' ':' 'for-each' :)
            or $state[$p:lk] = 509340                       (: 'escape-markup' ':' 'for-each' :)
            or $state[$p:lk] = 509341                       (: 'exec' ':' 'for-each' :)
            or $state[$p:lk] = 509342                       (: 'filter' ':' 'for-each' :)
            or $state[$p:lk] = 509343                       (: 'for-each' ':' 'for-each' :)
            or $state[$p:lk] = 509345                       (: 'hash' ':' 'for-each' :)
            or $state[$p:lk] = 509346                       (: 'http-request' ':' 'for-each' :)
            or $state[$p:lk] = 509347                       (: 'identity' ':' 'for-each' :)
            or $state[$p:lk] = 509348                       (: 'if' ':' 'for-each' :)
            or $state[$p:lk] = 509349                       (: 'insert' ':' 'for-each' :)
            or $state[$p:lk] = 509351                       (: 'label-elements' ':' 'for-each' :)
            or $state[$p:lk] = 509352                       (: 'library' ':' 'for-each' :)
            or $state[$p:lk] = 509353                       (: 'load' ':' 'for-each' :)
            or $state[$p:lk] = 509354                       (: 'make-absolute-uris' ':' 'for-each' :)
            or $state[$p:lk] = 509355                       (: 'namespace' ':' 'for-each' :)
            or $state[$p:lk] = 509356                       (: 'namespace-rename' ':' 'for-each' :)
            or $state[$p:lk] = 509357                       (: 'pack' ':' 'for-each' :)
            or $state[$p:lk] = 509358                       (: 'parameters' ':' 'for-each' :)
            or $state[$p:lk] = 509360                       (: 'pipeline' ':' 'for-each' :)
            or $state[$p:lk] = 509362                       (: 'rename' ':' 'for-each' :)
            or $state[$p:lk] = 509363                       (: 'replace' ':' 'for-each' :)
            or $state[$p:lk] = 509366                       (: 'set-attributes' ':' 'for-each' :)
            or $state[$p:lk] = 509367                       (: 'sink' ':' 'for-each' :)
            or $state[$p:lk] = 509368                       (: 'split-sequence' ':' 'for-each' :)
            or $state[$p:lk] = 509369                       (: 'step' ':' 'for-each' :)
            or $state[$p:lk] = 509370                       (: 'store' ':' 'for-each' :)
            or $state[$p:lk] = 509371                       (: 'string-replace' ':' 'for-each' :)
            or $state[$p:lk] = 509372                       (: 'try' ':' 'for-each' :)
            or $state[$p:lk] = 509373                       (: 'unescape-markup' ':' 'for-each' :)
            or $state[$p:lk] = 509374                       (: 'unwrap' ':' 'for-each' :)
            or $state[$p:lk] = 509375                       (: 'uuid' ':' 'for-each' :)
            or $state[$p:lk] = 509376                       (: 'validate-with-relax-ng' ':' 'for-each' :)
            or $state[$p:lk] = 509377                       (: 'validate-with-schematron' ':' 'for-each' :)
            or $state[$p:lk] = 509378                       (: 'validate-with-xml-schema' ':' 'for-each' :)
            or $state[$p:lk] = 509379                       (: 'variable' ':' 'for-each' :)
            or $state[$p:lk] = 509380                       (: 'viewport' ':' 'for-each' :)
            or $state[$p:lk] = 509382                       (: 'wrap' ':' 'for-each' :)
            or $state[$p:lk] = 509383                       (: 'wrap-sequence' ':' 'for-each' :)
            or $state[$p:lk] = 509384                       (: 'www-form-urldecode' ':' 'for-each' :)
            or $state[$p:lk] = 509385                       (: 'www-form-urlencode' ':' 'for-each' :)
            or $state[$p:lk] = 509386                       (: 'xinclude' ':' 'for-each' :)
            or $state[$p:lk] = 509387                       (: 'xquery' ':' 'for-each' :)
            or $state[$p:lk] = 509388                       (: 'xsl-formatter' ':' 'for-each' :)
            or $state[$p:lk] = 509389                       (: 'xslt' ':' 'for-each' :)
            or $state[$p:lk] = 542085                       (: NCName^Token ':' 'hash' :)
            or $state[$p:lk] = 542096                       (: 'add-attribute' ':' 'hash' :)
            or $state[$p:lk] = 542097                       (: 'add-xml-base' ':' 'hash' :)
            or $state[$p:lk] = 542099                       (: 'compare' ':' 'hash' :)
            or $state[$p:lk] = 542100                       (: 'count' ':' 'hash' :)
            or $state[$p:lk] = 542101                       (: 'default' ':' 'hash' :)
            or $state[$p:lk] = 542102                       (: 'delete' ':' 'hash' :)
            or $state[$p:lk] = 542103                       (: 'directory-list' ':' 'hash' :)
            or $state[$p:lk] = 542105                       (: 'else' ':' 'hash' :)
            or $state[$p:lk] = 542107                       (: 'error' ':' 'hash' :)
            or $state[$p:lk] = 542108                       (: 'escape-markup' ':' 'hash' :)
            or $state[$p:lk] = 542109                       (: 'exec' ':' 'hash' :)
            or $state[$p:lk] = 542110                       (: 'filter' ':' 'hash' :)
            or $state[$p:lk] = 542111                       (: 'for-each' ':' 'hash' :)
            or $state[$p:lk] = 542113                       (: 'hash' ':' 'hash' :)
            or $state[$p:lk] = 542114                       (: 'http-request' ':' 'hash' :)
            or $state[$p:lk] = 542115                       (: 'identity' ':' 'hash' :)
            or $state[$p:lk] = 542116                       (: 'if' ':' 'hash' :)
            or $state[$p:lk] = 542117                       (: 'insert' ':' 'hash' :)
            or $state[$p:lk] = 542119                       (: 'label-elements' ':' 'hash' :)
            or $state[$p:lk] = 542120                       (: 'library' ':' 'hash' :)
            or $state[$p:lk] = 542121                       (: 'load' ':' 'hash' :)
            or $state[$p:lk] = 542122                       (: 'make-absolute-uris' ':' 'hash' :)
            or $state[$p:lk] = 542123                       (: 'namespace' ':' 'hash' :)
            or $state[$p:lk] = 542124                       (: 'namespace-rename' ':' 'hash' :)
            or $state[$p:lk] = 542125                       (: 'pack' ':' 'hash' :)
            or $state[$p:lk] = 542126                       (: 'parameters' ':' 'hash' :)
            or $state[$p:lk] = 542128                       (: 'pipeline' ':' 'hash' :)
            or $state[$p:lk] = 542130                       (: 'rename' ':' 'hash' :)
            or $state[$p:lk] = 542131                       (: 'replace' ':' 'hash' :)
            or $state[$p:lk] = 542134                       (: 'set-attributes' ':' 'hash' :)
            or $state[$p:lk] = 542135                       (: 'sink' ':' 'hash' :)
            or $state[$p:lk] = 542136                       (: 'split-sequence' ':' 'hash' :)
            or $state[$p:lk] = 542137                       (: 'step' ':' 'hash' :)
            or $state[$p:lk] = 542138                       (: 'store' ':' 'hash' :)
            or $state[$p:lk] = 542139                       (: 'string-replace' ':' 'hash' :)
            or $state[$p:lk] = 542140                       (: 'try' ':' 'hash' :)
            or $state[$p:lk] = 542141                       (: 'unescape-markup' ':' 'hash' :)
            or $state[$p:lk] = 542142                       (: 'unwrap' ':' 'hash' :)
            or $state[$p:lk] = 542143                       (: 'uuid' ':' 'hash' :)
            or $state[$p:lk] = 542144                       (: 'validate-with-relax-ng' ':' 'hash' :)
            or $state[$p:lk] = 542145                       (: 'validate-with-schematron' ':' 'hash' :)
            or $state[$p:lk] = 542146                       (: 'validate-with-xml-schema' ':' 'hash' :)
            or $state[$p:lk] = 542147                       (: 'variable' ':' 'hash' :)
            or $state[$p:lk] = 542148                       (: 'viewport' ':' 'hash' :)
            or $state[$p:lk] = 542150                       (: 'wrap' ':' 'hash' :)
            or $state[$p:lk] = 542151                       (: 'wrap-sequence' ':' 'hash' :)
            or $state[$p:lk] = 542152                       (: 'www-form-urldecode' ':' 'hash' :)
            or $state[$p:lk] = 542153                       (: 'www-form-urlencode' ':' 'hash' :)
            or $state[$p:lk] = 542154                       (: 'xinclude' ':' 'hash' :)
            or $state[$p:lk] = 542155                       (: 'xquery' ':' 'hash' :)
            or $state[$p:lk] = 542156                       (: 'xsl-formatter' ':' 'hash' :)
            or $state[$p:lk] = 542157                       (: 'xslt' ':' 'hash' :)
            or $state[$p:lk] = 558469                       (: NCName^Token ':' 'http-request' :)
            or $state[$p:lk] = 558480                       (: 'add-attribute' ':' 'http-request' :)
            or $state[$p:lk] = 558481                       (: 'add-xml-base' ':' 'http-request' :)
            or $state[$p:lk] = 558483                       (: 'compare' ':' 'http-request' :)
            or $state[$p:lk] = 558484                       (: 'count' ':' 'http-request' :)
            or $state[$p:lk] = 558485                       (: 'default' ':' 'http-request' :)
            or $state[$p:lk] = 558486                       (: 'delete' ':' 'http-request' :)
            or $state[$p:lk] = 558487                       (: 'directory-list' ':' 'http-request' :)
            or $state[$p:lk] = 558489                       (: 'else' ':' 'http-request' :)
            or $state[$p:lk] = 558491                       (: 'error' ':' 'http-request' :)
            or $state[$p:lk] = 558492                       (: 'escape-markup' ':' 'http-request' :)
            or $state[$p:lk] = 558493                       (: 'exec' ':' 'http-request' :)
            or $state[$p:lk] = 558494                       (: 'filter' ':' 'http-request' :)
            or $state[$p:lk] = 558495                       (: 'for-each' ':' 'http-request' :)
            or $state[$p:lk] = 558497                       (: 'hash' ':' 'http-request' :)
            or $state[$p:lk] = 558498                       (: 'http-request' ':' 'http-request' :)
            or $state[$p:lk] = 558499                       (: 'identity' ':' 'http-request' :)
            or $state[$p:lk] = 558500                       (: 'if' ':' 'http-request' :)
            or $state[$p:lk] = 558501                       (: 'insert' ':' 'http-request' :)
            or $state[$p:lk] = 558503                       (: 'label-elements' ':' 'http-request' :)
            or $state[$p:lk] = 558504                       (: 'library' ':' 'http-request' :)
            or $state[$p:lk] = 558505                       (: 'load' ':' 'http-request' :)
            or $state[$p:lk] = 558506                       (: 'make-absolute-uris' ':' 'http-request' :)
            or $state[$p:lk] = 558507                       (: 'namespace' ':' 'http-request' :)
            or $state[$p:lk] = 558508                       (: 'namespace-rename' ':' 'http-request' :)
            or $state[$p:lk] = 558509                       (: 'pack' ':' 'http-request' :)
            or $state[$p:lk] = 558510                       (: 'parameters' ':' 'http-request' :)
            or $state[$p:lk] = 558512                       (: 'pipeline' ':' 'http-request' :)
            or $state[$p:lk] = 558514                       (: 'rename' ':' 'http-request' :)
            or $state[$p:lk] = 558515                       (: 'replace' ':' 'http-request' :)
            or $state[$p:lk] = 558518                       (: 'set-attributes' ':' 'http-request' :)
            or $state[$p:lk] = 558519                       (: 'sink' ':' 'http-request' :)
            or $state[$p:lk] = 558520                       (: 'split-sequence' ':' 'http-request' :)
            or $state[$p:lk] = 558521                       (: 'step' ':' 'http-request' :)
            or $state[$p:lk] = 558522                       (: 'store' ':' 'http-request' :)
            or $state[$p:lk] = 558523                       (: 'string-replace' ':' 'http-request' :)
            or $state[$p:lk] = 558524                       (: 'try' ':' 'http-request' :)
            or $state[$p:lk] = 558525                       (: 'unescape-markup' ':' 'http-request' :)
            or $state[$p:lk] = 558526                       (: 'unwrap' ':' 'http-request' :)
            or $state[$p:lk] = 558527                       (: 'uuid' ':' 'http-request' :)
            or $state[$p:lk] = 558528                       (: 'validate-with-relax-ng' ':' 'http-request' :)
            or $state[$p:lk] = 558529                       (: 'validate-with-schematron' ':' 'http-request' :)
            or $state[$p:lk] = 558530                       (: 'validate-with-xml-schema' ':' 'http-request' :)
            or $state[$p:lk] = 558531                       (: 'variable' ':' 'http-request' :)
            or $state[$p:lk] = 558532                       (: 'viewport' ':' 'http-request' :)
            or $state[$p:lk] = 558534                       (: 'wrap' ':' 'http-request' :)
            or $state[$p:lk] = 558535                       (: 'wrap-sequence' ':' 'http-request' :)
            or $state[$p:lk] = 558536                       (: 'www-form-urldecode' ':' 'http-request' :)
            or $state[$p:lk] = 558537                       (: 'www-form-urlencode' ':' 'http-request' :)
            or $state[$p:lk] = 558538                       (: 'xinclude' ':' 'http-request' :)
            or $state[$p:lk] = 558539                       (: 'xquery' ':' 'http-request' :)
            or $state[$p:lk] = 558540                       (: 'xsl-formatter' ':' 'http-request' :)
            or $state[$p:lk] = 558541                       (: 'xslt' ':' 'http-request' :)
            or $state[$p:lk] = 574853                       (: NCName^Token ':' 'identity' :)
            or $state[$p:lk] = 574864                       (: 'add-attribute' ':' 'identity' :)
            or $state[$p:lk] = 574865                       (: 'add-xml-base' ':' 'identity' :)
            or $state[$p:lk] = 574867                       (: 'compare' ':' 'identity' :)
            or $state[$p:lk] = 574868                       (: 'count' ':' 'identity' :)
            or $state[$p:lk] = 574869                       (: 'default' ':' 'identity' :)
            or $state[$p:lk] = 574870                       (: 'delete' ':' 'identity' :)
            or $state[$p:lk] = 574871                       (: 'directory-list' ':' 'identity' :)
            or $state[$p:lk] = 574873                       (: 'else' ':' 'identity' :)
            or $state[$p:lk] = 574875                       (: 'error' ':' 'identity' :)
            or $state[$p:lk] = 574876                       (: 'escape-markup' ':' 'identity' :)
            or $state[$p:lk] = 574877                       (: 'exec' ':' 'identity' :)
            or $state[$p:lk] = 574878                       (: 'filter' ':' 'identity' :)
            or $state[$p:lk] = 574879                       (: 'for-each' ':' 'identity' :)
            or $state[$p:lk] = 574881                       (: 'hash' ':' 'identity' :)
            or $state[$p:lk] = 574882                       (: 'http-request' ':' 'identity' :)
            or $state[$p:lk] = 574883                       (: 'identity' ':' 'identity' :)
            or $state[$p:lk] = 574884                       (: 'if' ':' 'identity' :)
            or $state[$p:lk] = 574885                       (: 'insert' ':' 'identity' :)
            or $state[$p:lk] = 574887                       (: 'label-elements' ':' 'identity' :)
            or $state[$p:lk] = 574888                       (: 'library' ':' 'identity' :)
            or $state[$p:lk] = 574889                       (: 'load' ':' 'identity' :)
            or $state[$p:lk] = 574890                       (: 'make-absolute-uris' ':' 'identity' :)
            or $state[$p:lk] = 574891                       (: 'namespace' ':' 'identity' :)
            or $state[$p:lk] = 574892                       (: 'namespace-rename' ':' 'identity' :)
            or $state[$p:lk] = 574893                       (: 'pack' ':' 'identity' :)
            or $state[$p:lk] = 574894                       (: 'parameters' ':' 'identity' :)
            or $state[$p:lk] = 574896                       (: 'pipeline' ':' 'identity' :)
            or $state[$p:lk] = 574898                       (: 'rename' ':' 'identity' :)
            or $state[$p:lk] = 574899                       (: 'replace' ':' 'identity' :)
            or $state[$p:lk] = 574902                       (: 'set-attributes' ':' 'identity' :)
            or $state[$p:lk] = 574903                       (: 'sink' ':' 'identity' :)
            or $state[$p:lk] = 574904                       (: 'split-sequence' ':' 'identity' :)
            or $state[$p:lk] = 574905                       (: 'step' ':' 'identity' :)
            or $state[$p:lk] = 574906                       (: 'store' ':' 'identity' :)
            or $state[$p:lk] = 574907                       (: 'string-replace' ':' 'identity' :)
            or $state[$p:lk] = 574908                       (: 'try' ':' 'identity' :)
            or $state[$p:lk] = 574909                       (: 'unescape-markup' ':' 'identity' :)
            or $state[$p:lk] = 574910                       (: 'unwrap' ':' 'identity' :)
            or $state[$p:lk] = 574911                       (: 'uuid' ':' 'identity' :)
            or $state[$p:lk] = 574912                       (: 'validate-with-relax-ng' ':' 'identity' :)
            or $state[$p:lk] = 574913                       (: 'validate-with-schematron' ':' 'identity' :)
            or $state[$p:lk] = 574914                       (: 'validate-with-xml-schema' ':' 'identity' :)
            or $state[$p:lk] = 574915                       (: 'variable' ':' 'identity' :)
            or $state[$p:lk] = 574916                       (: 'viewport' ':' 'identity' :)
            or $state[$p:lk] = 574918                       (: 'wrap' ':' 'identity' :)
            or $state[$p:lk] = 574919                       (: 'wrap-sequence' ':' 'identity' :)
            or $state[$p:lk] = 574920                       (: 'www-form-urldecode' ':' 'identity' :)
            or $state[$p:lk] = 574921                       (: 'www-form-urlencode' ':' 'identity' :)
            or $state[$p:lk] = 574922                       (: 'xinclude' ':' 'identity' :)
            or $state[$p:lk] = 574923                       (: 'xquery' ':' 'identity' :)
            or $state[$p:lk] = 574924                       (: 'xsl-formatter' ':' 'identity' :)
            or $state[$p:lk] = 574925                       (: 'xslt' ':' 'identity' :)
            or $state[$p:lk] = 591237                       (: NCName^Token ':' 'if' :)
            or $state[$p:lk] = 591248                       (: 'add-attribute' ':' 'if' :)
            or $state[$p:lk] = 591249                       (: 'add-xml-base' ':' 'if' :)
            or $state[$p:lk] = 591251                       (: 'compare' ':' 'if' :)
            or $state[$p:lk] = 591252                       (: 'count' ':' 'if' :)
            or $state[$p:lk] = 591253                       (: 'default' ':' 'if' :)
            or $state[$p:lk] = 591254                       (: 'delete' ':' 'if' :)
            or $state[$p:lk] = 591255                       (: 'directory-list' ':' 'if' :)
            or $state[$p:lk] = 591257                       (: 'else' ':' 'if' :)
            or $state[$p:lk] = 591259                       (: 'error' ':' 'if' :)
            or $state[$p:lk] = 591260                       (: 'escape-markup' ':' 'if' :)
            or $state[$p:lk] = 591261                       (: 'exec' ':' 'if' :)
            or $state[$p:lk] = 591262                       (: 'filter' ':' 'if' :)
            or $state[$p:lk] = 591263                       (: 'for-each' ':' 'if' :)
            or $state[$p:lk] = 591265                       (: 'hash' ':' 'if' :)
            or $state[$p:lk] = 591266                       (: 'http-request' ':' 'if' :)
            or $state[$p:lk] = 591267                       (: 'identity' ':' 'if' :)
            or $state[$p:lk] = 591268                       (: 'if' ':' 'if' :)
            or $state[$p:lk] = 591269                       (: 'insert' ':' 'if' :)
            or $state[$p:lk] = 591271                       (: 'label-elements' ':' 'if' :)
            or $state[$p:lk] = 591272                       (: 'library' ':' 'if' :)
            or $state[$p:lk] = 591273                       (: 'load' ':' 'if' :)
            or $state[$p:lk] = 591274                       (: 'make-absolute-uris' ':' 'if' :)
            or $state[$p:lk] = 591275                       (: 'namespace' ':' 'if' :)
            or $state[$p:lk] = 591276                       (: 'namespace-rename' ':' 'if' :)
            or $state[$p:lk] = 591277                       (: 'pack' ':' 'if' :)
            or $state[$p:lk] = 591278                       (: 'parameters' ':' 'if' :)
            or $state[$p:lk] = 591280                       (: 'pipeline' ':' 'if' :)
            or $state[$p:lk] = 591282                       (: 'rename' ':' 'if' :)
            or $state[$p:lk] = 591283                       (: 'replace' ':' 'if' :)
            or $state[$p:lk] = 591286                       (: 'set-attributes' ':' 'if' :)
            or $state[$p:lk] = 591287                       (: 'sink' ':' 'if' :)
            or $state[$p:lk] = 591288                       (: 'split-sequence' ':' 'if' :)
            or $state[$p:lk] = 591289                       (: 'step' ':' 'if' :)
            or $state[$p:lk] = 591290                       (: 'store' ':' 'if' :)
            or $state[$p:lk] = 591291                       (: 'string-replace' ':' 'if' :)
            or $state[$p:lk] = 591292                       (: 'try' ':' 'if' :)
            or $state[$p:lk] = 591293                       (: 'unescape-markup' ':' 'if' :)
            or $state[$p:lk] = 591294                       (: 'unwrap' ':' 'if' :)
            or $state[$p:lk] = 591295                       (: 'uuid' ':' 'if' :)
            or $state[$p:lk] = 591296                       (: 'validate-with-relax-ng' ':' 'if' :)
            or $state[$p:lk] = 591297                       (: 'validate-with-schematron' ':' 'if' :)
            or $state[$p:lk] = 591298                       (: 'validate-with-xml-schema' ':' 'if' :)
            or $state[$p:lk] = 591299                       (: 'variable' ':' 'if' :)
            or $state[$p:lk] = 591300                       (: 'viewport' ':' 'if' :)
            or $state[$p:lk] = 591302                       (: 'wrap' ':' 'if' :)
            or $state[$p:lk] = 591303                       (: 'wrap-sequence' ':' 'if' :)
            or $state[$p:lk] = 591304                       (: 'www-form-urldecode' ':' 'if' :)
            or $state[$p:lk] = 591305                       (: 'www-form-urlencode' ':' 'if' :)
            or $state[$p:lk] = 591306                       (: 'xinclude' ':' 'if' :)
            or $state[$p:lk] = 591307                       (: 'xquery' ':' 'if' :)
            or $state[$p:lk] = 591308                       (: 'xsl-formatter' ':' 'if' :)
            or $state[$p:lk] = 591309                       (: 'xslt' ':' 'if' :)
            or $state[$p:lk] = 607621                       (: NCName^Token ':' 'insert' :)
            or $state[$p:lk] = 607632                       (: 'add-attribute' ':' 'insert' :)
            or $state[$p:lk] = 607633                       (: 'add-xml-base' ':' 'insert' :)
            or $state[$p:lk] = 607635                       (: 'compare' ':' 'insert' :)
            or $state[$p:lk] = 607636                       (: 'count' ':' 'insert' :)
            or $state[$p:lk] = 607637                       (: 'default' ':' 'insert' :)
            or $state[$p:lk] = 607638                       (: 'delete' ':' 'insert' :)
            or $state[$p:lk] = 607639                       (: 'directory-list' ':' 'insert' :)
            or $state[$p:lk] = 607641                       (: 'else' ':' 'insert' :)
            or $state[$p:lk] = 607643                       (: 'error' ':' 'insert' :)
            or $state[$p:lk] = 607644                       (: 'escape-markup' ':' 'insert' :)
            or $state[$p:lk] = 607645                       (: 'exec' ':' 'insert' :)
            or $state[$p:lk] = 607646                       (: 'filter' ':' 'insert' :)
            or $state[$p:lk] = 607647                       (: 'for-each' ':' 'insert' :)
            or $state[$p:lk] = 607649                       (: 'hash' ':' 'insert' :)
            or $state[$p:lk] = 607650                       (: 'http-request' ':' 'insert' :)
            or $state[$p:lk] = 607651                       (: 'identity' ':' 'insert' :)
            or $state[$p:lk] = 607652                       (: 'if' ':' 'insert' :)
            or $state[$p:lk] = 607653                       (: 'insert' ':' 'insert' :)
            or $state[$p:lk] = 607655                       (: 'label-elements' ':' 'insert' :)
            or $state[$p:lk] = 607656                       (: 'library' ':' 'insert' :)
            or $state[$p:lk] = 607657                       (: 'load' ':' 'insert' :)
            or $state[$p:lk] = 607658                       (: 'make-absolute-uris' ':' 'insert' :)
            or $state[$p:lk] = 607659                       (: 'namespace' ':' 'insert' :)
            or $state[$p:lk] = 607660                       (: 'namespace-rename' ':' 'insert' :)
            or $state[$p:lk] = 607661                       (: 'pack' ':' 'insert' :)
            or $state[$p:lk] = 607662                       (: 'parameters' ':' 'insert' :)
            or $state[$p:lk] = 607664                       (: 'pipeline' ':' 'insert' :)
            or $state[$p:lk] = 607666                       (: 'rename' ':' 'insert' :)
            or $state[$p:lk] = 607667                       (: 'replace' ':' 'insert' :)
            or $state[$p:lk] = 607670                       (: 'set-attributes' ':' 'insert' :)
            or $state[$p:lk] = 607671                       (: 'sink' ':' 'insert' :)
            or $state[$p:lk] = 607672                       (: 'split-sequence' ':' 'insert' :)
            or $state[$p:lk] = 607673                       (: 'step' ':' 'insert' :)
            or $state[$p:lk] = 607674                       (: 'store' ':' 'insert' :)
            or $state[$p:lk] = 607675                       (: 'string-replace' ':' 'insert' :)
            or $state[$p:lk] = 607676                       (: 'try' ':' 'insert' :)
            or $state[$p:lk] = 607677                       (: 'unescape-markup' ':' 'insert' :)
            or $state[$p:lk] = 607678                       (: 'unwrap' ':' 'insert' :)
            or $state[$p:lk] = 607679                       (: 'uuid' ':' 'insert' :)
            or $state[$p:lk] = 607680                       (: 'validate-with-relax-ng' ':' 'insert' :)
            or $state[$p:lk] = 607681                       (: 'validate-with-schematron' ':' 'insert' :)
            or $state[$p:lk] = 607682                       (: 'validate-with-xml-schema' ':' 'insert' :)
            or $state[$p:lk] = 607683                       (: 'variable' ':' 'insert' :)
            or $state[$p:lk] = 607684                       (: 'viewport' ':' 'insert' :)
            or $state[$p:lk] = 607686                       (: 'wrap' ':' 'insert' :)
            or $state[$p:lk] = 607687                       (: 'wrap-sequence' ':' 'insert' :)
            or $state[$p:lk] = 607688                       (: 'www-form-urldecode' ':' 'insert' :)
            or $state[$p:lk] = 607689                       (: 'www-form-urlencode' ':' 'insert' :)
            or $state[$p:lk] = 607690                       (: 'xinclude' ':' 'insert' :)
            or $state[$p:lk] = 607691                       (: 'xquery' ':' 'insert' :)
            or $state[$p:lk] = 607692                       (: 'xsl-formatter' ':' 'insert' :)
            or $state[$p:lk] = 607693                       (: 'xslt' ':' 'insert' :)
            or $state[$p:lk] = 640389                       (: NCName^Token ':' 'label-elements' :)
            or $state[$p:lk] = 640400                       (: 'add-attribute' ':' 'label-elements' :)
            or $state[$p:lk] = 640401                       (: 'add-xml-base' ':' 'label-elements' :)
            or $state[$p:lk] = 640403                       (: 'compare' ':' 'label-elements' :)
            or $state[$p:lk] = 640404                       (: 'count' ':' 'label-elements' :)
            or $state[$p:lk] = 640405                       (: 'default' ':' 'label-elements' :)
            or $state[$p:lk] = 640406                       (: 'delete' ':' 'label-elements' :)
            or $state[$p:lk] = 640407                       (: 'directory-list' ':' 'label-elements' :)
            or $state[$p:lk] = 640409                       (: 'else' ':' 'label-elements' :)
            or $state[$p:lk] = 640411                       (: 'error' ':' 'label-elements' :)
            or $state[$p:lk] = 640412                       (: 'escape-markup' ':' 'label-elements' :)
            or $state[$p:lk] = 640413                       (: 'exec' ':' 'label-elements' :)
            or $state[$p:lk] = 640414                       (: 'filter' ':' 'label-elements' :)
            or $state[$p:lk] = 640415                       (: 'for-each' ':' 'label-elements' :)
            or $state[$p:lk] = 640417                       (: 'hash' ':' 'label-elements' :)
            or $state[$p:lk] = 640418                       (: 'http-request' ':' 'label-elements' :)
            or $state[$p:lk] = 640419                       (: 'identity' ':' 'label-elements' :)
            or $state[$p:lk] = 640420                       (: 'if' ':' 'label-elements' :)
            or $state[$p:lk] = 640421                       (: 'insert' ':' 'label-elements' :)
            or $state[$p:lk] = 640423                       (: 'label-elements' ':' 'label-elements' :)
            or $state[$p:lk] = 640424                       (: 'library' ':' 'label-elements' :)
            or $state[$p:lk] = 640425                       (: 'load' ':' 'label-elements' :)
            or $state[$p:lk] = 640426                       (: 'make-absolute-uris' ':' 'label-elements' :)
            or $state[$p:lk] = 640427                       (: 'namespace' ':' 'label-elements' :)
            or $state[$p:lk] = 640428                       (: 'namespace-rename' ':' 'label-elements' :)
            or $state[$p:lk] = 640429                       (: 'pack' ':' 'label-elements' :)
            or $state[$p:lk] = 640430                       (: 'parameters' ':' 'label-elements' :)
            or $state[$p:lk] = 640432                       (: 'pipeline' ':' 'label-elements' :)
            or $state[$p:lk] = 640434                       (: 'rename' ':' 'label-elements' :)
            or $state[$p:lk] = 640435                       (: 'replace' ':' 'label-elements' :)
            or $state[$p:lk] = 640438                       (: 'set-attributes' ':' 'label-elements' :)
            or $state[$p:lk] = 640439                       (: 'sink' ':' 'label-elements' :)
            or $state[$p:lk] = 640440                       (: 'split-sequence' ':' 'label-elements' :)
            or $state[$p:lk] = 640441                       (: 'step' ':' 'label-elements' :)
            or $state[$p:lk] = 640442                       (: 'store' ':' 'label-elements' :)
            or $state[$p:lk] = 640443                       (: 'string-replace' ':' 'label-elements' :)
            or $state[$p:lk] = 640444                       (: 'try' ':' 'label-elements' :)
            or $state[$p:lk] = 640445                       (: 'unescape-markup' ':' 'label-elements' :)
            or $state[$p:lk] = 640446                       (: 'unwrap' ':' 'label-elements' :)
            or $state[$p:lk] = 640447                       (: 'uuid' ':' 'label-elements' :)
            or $state[$p:lk] = 640448                       (: 'validate-with-relax-ng' ':' 'label-elements' :)
            or $state[$p:lk] = 640449                       (: 'validate-with-schematron' ':' 'label-elements' :)
            or $state[$p:lk] = 640450                       (: 'validate-with-xml-schema' ':' 'label-elements' :)
            or $state[$p:lk] = 640451                       (: 'variable' ':' 'label-elements' :)
            or $state[$p:lk] = 640452                       (: 'viewport' ':' 'label-elements' :)
            or $state[$p:lk] = 640454                       (: 'wrap' ':' 'label-elements' :)
            or $state[$p:lk] = 640455                       (: 'wrap-sequence' ':' 'label-elements' :)
            or $state[$p:lk] = 640456                       (: 'www-form-urldecode' ':' 'label-elements' :)
            or $state[$p:lk] = 640457                       (: 'www-form-urlencode' ':' 'label-elements' :)
            or $state[$p:lk] = 640458                       (: 'xinclude' ':' 'label-elements' :)
            or $state[$p:lk] = 640459                       (: 'xquery' ':' 'label-elements' :)
            or $state[$p:lk] = 640460                       (: 'xsl-formatter' ':' 'label-elements' :)
            or $state[$p:lk] = 640461                       (: 'xslt' ':' 'label-elements' :)
            or $state[$p:lk] = 656773                       (: NCName^Token ':' 'library' :)
            or $state[$p:lk] = 656784                       (: 'add-attribute' ':' 'library' :)
            or $state[$p:lk] = 656785                       (: 'add-xml-base' ':' 'library' :)
            or $state[$p:lk] = 656787                       (: 'compare' ':' 'library' :)
            or $state[$p:lk] = 656788                       (: 'count' ':' 'library' :)
            or $state[$p:lk] = 656789                       (: 'default' ':' 'library' :)
            or $state[$p:lk] = 656790                       (: 'delete' ':' 'library' :)
            or $state[$p:lk] = 656791                       (: 'directory-list' ':' 'library' :)
            or $state[$p:lk] = 656793                       (: 'else' ':' 'library' :)
            or $state[$p:lk] = 656795                       (: 'error' ':' 'library' :)
            or $state[$p:lk] = 656796                       (: 'escape-markup' ':' 'library' :)
            or $state[$p:lk] = 656797                       (: 'exec' ':' 'library' :)
            or $state[$p:lk] = 656798                       (: 'filter' ':' 'library' :)
            or $state[$p:lk] = 656799                       (: 'for-each' ':' 'library' :)
            or $state[$p:lk] = 656801                       (: 'hash' ':' 'library' :)
            or $state[$p:lk] = 656802                       (: 'http-request' ':' 'library' :)
            or $state[$p:lk] = 656803                       (: 'identity' ':' 'library' :)
            or $state[$p:lk] = 656804                       (: 'if' ':' 'library' :)
            or $state[$p:lk] = 656805                       (: 'insert' ':' 'library' :)
            or $state[$p:lk] = 656807                       (: 'label-elements' ':' 'library' :)
            or $state[$p:lk] = 656808                       (: 'library' ':' 'library' :)
            or $state[$p:lk] = 656809                       (: 'load' ':' 'library' :)
            or $state[$p:lk] = 656810                       (: 'make-absolute-uris' ':' 'library' :)
            or $state[$p:lk] = 656811                       (: 'namespace' ':' 'library' :)
            or $state[$p:lk] = 656812                       (: 'namespace-rename' ':' 'library' :)
            or $state[$p:lk] = 656813                       (: 'pack' ':' 'library' :)
            or $state[$p:lk] = 656814                       (: 'parameters' ':' 'library' :)
            or $state[$p:lk] = 656816                       (: 'pipeline' ':' 'library' :)
            or $state[$p:lk] = 656818                       (: 'rename' ':' 'library' :)
            or $state[$p:lk] = 656819                       (: 'replace' ':' 'library' :)
            or $state[$p:lk] = 656822                       (: 'set-attributes' ':' 'library' :)
            or $state[$p:lk] = 656823                       (: 'sink' ':' 'library' :)
            or $state[$p:lk] = 656824                       (: 'split-sequence' ':' 'library' :)
            or $state[$p:lk] = 656825                       (: 'step' ':' 'library' :)
            or $state[$p:lk] = 656826                       (: 'store' ':' 'library' :)
            or $state[$p:lk] = 656827                       (: 'string-replace' ':' 'library' :)
            or $state[$p:lk] = 656828                       (: 'try' ':' 'library' :)
            or $state[$p:lk] = 656829                       (: 'unescape-markup' ':' 'library' :)
            or $state[$p:lk] = 656830                       (: 'unwrap' ':' 'library' :)
            or $state[$p:lk] = 656831                       (: 'uuid' ':' 'library' :)
            or $state[$p:lk] = 656832                       (: 'validate-with-relax-ng' ':' 'library' :)
            or $state[$p:lk] = 656833                       (: 'validate-with-schematron' ':' 'library' :)
            or $state[$p:lk] = 656834                       (: 'validate-with-xml-schema' ':' 'library' :)
            or $state[$p:lk] = 656835                       (: 'variable' ':' 'library' :)
            or $state[$p:lk] = 656836                       (: 'viewport' ':' 'library' :)
            or $state[$p:lk] = 656838                       (: 'wrap' ':' 'library' :)
            or $state[$p:lk] = 656839                       (: 'wrap-sequence' ':' 'library' :)
            or $state[$p:lk] = 656840                       (: 'www-form-urldecode' ':' 'library' :)
            or $state[$p:lk] = 656841                       (: 'www-form-urlencode' ':' 'library' :)
            or $state[$p:lk] = 656842                       (: 'xinclude' ':' 'library' :)
            or $state[$p:lk] = 656843                       (: 'xquery' ':' 'library' :)
            or $state[$p:lk] = 656844                       (: 'xsl-formatter' ':' 'library' :)
            or $state[$p:lk] = 656845                       (: 'xslt' ':' 'library' :)
            or $state[$p:lk] = 673157                       (: NCName^Token ':' 'load' :)
            or $state[$p:lk] = 673168                       (: 'add-attribute' ':' 'load' :)
            or $state[$p:lk] = 673169                       (: 'add-xml-base' ':' 'load' :)
            or $state[$p:lk] = 673171                       (: 'compare' ':' 'load' :)
            or $state[$p:lk] = 673172                       (: 'count' ':' 'load' :)
            or $state[$p:lk] = 673173                       (: 'default' ':' 'load' :)
            or $state[$p:lk] = 673174                       (: 'delete' ':' 'load' :)
            or $state[$p:lk] = 673175                       (: 'directory-list' ':' 'load' :)
            or $state[$p:lk] = 673177                       (: 'else' ':' 'load' :)
            or $state[$p:lk] = 673179                       (: 'error' ':' 'load' :)
            or $state[$p:lk] = 673180                       (: 'escape-markup' ':' 'load' :)
            or $state[$p:lk] = 673181                       (: 'exec' ':' 'load' :)
            or $state[$p:lk] = 673182                       (: 'filter' ':' 'load' :)
            or $state[$p:lk] = 673183                       (: 'for-each' ':' 'load' :)
            or $state[$p:lk] = 673185                       (: 'hash' ':' 'load' :)
            or $state[$p:lk] = 673186                       (: 'http-request' ':' 'load' :)
            or $state[$p:lk] = 673187                       (: 'identity' ':' 'load' :)
            or $state[$p:lk] = 673188                       (: 'if' ':' 'load' :)
            or $state[$p:lk] = 673189                       (: 'insert' ':' 'load' :)
            or $state[$p:lk] = 673191                       (: 'label-elements' ':' 'load' :)
            or $state[$p:lk] = 673192                       (: 'library' ':' 'load' :)
            or $state[$p:lk] = 673193                       (: 'load' ':' 'load' :)
            or $state[$p:lk] = 673194                       (: 'make-absolute-uris' ':' 'load' :)
            or $state[$p:lk] = 673195                       (: 'namespace' ':' 'load' :)
            or $state[$p:lk] = 673196                       (: 'namespace-rename' ':' 'load' :)
            or $state[$p:lk] = 673197                       (: 'pack' ':' 'load' :)
            or $state[$p:lk] = 673198                       (: 'parameters' ':' 'load' :)
            or $state[$p:lk] = 673200                       (: 'pipeline' ':' 'load' :)
            or $state[$p:lk] = 673202                       (: 'rename' ':' 'load' :)
            or $state[$p:lk] = 673203                       (: 'replace' ':' 'load' :)
            or $state[$p:lk] = 673206                       (: 'set-attributes' ':' 'load' :)
            or $state[$p:lk] = 673207                       (: 'sink' ':' 'load' :)
            or $state[$p:lk] = 673208                       (: 'split-sequence' ':' 'load' :)
            or $state[$p:lk] = 673209                       (: 'step' ':' 'load' :)
            or $state[$p:lk] = 673210                       (: 'store' ':' 'load' :)
            or $state[$p:lk] = 673211                       (: 'string-replace' ':' 'load' :)
            or $state[$p:lk] = 673212                       (: 'try' ':' 'load' :)
            or $state[$p:lk] = 673213                       (: 'unescape-markup' ':' 'load' :)
            or $state[$p:lk] = 673214                       (: 'unwrap' ':' 'load' :)
            or $state[$p:lk] = 673215                       (: 'uuid' ':' 'load' :)
            or $state[$p:lk] = 673216                       (: 'validate-with-relax-ng' ':' 'load' :)
            or $state[$p:lk] = 673217                       (: 'validate-with-schematron' ':' 'load' :)
            or $state[$p:lk] = 673218                       (: 'validate-with-xml-schema' ':' 'load' :)
            or $state[$p:lk] = 673219                       (: 'variable' ':' 'load' :)
            or $state[$p:lk] = 673220                       (: 'viewport' ':' 'load' :)
            or $state[$p:lk] = 673222                       (: 'wrap' ':' 'load' :)
            or $state[$p:lk] = 673223                       (: 'wrap-sequence' ':' 'load' :)
            or $state[$p:lk] = 673224                       (: 'www-form-urldecode' ':' 'load' :)
            or $state[$p:lk] = 673225                       (: 'www-form-urlencode' ':' 'load' :)
            or $state[$p:lk] = 673226                       (: 'xinclude' ':' 'load' :)
            or $state[$p:lk] = 673227                       (: 'xquery' ':' 'load' :)
            or $state[$p:lk] = 673228                       (: 'xsl-formatter' ':' 'load' :)
            or $state[$p:lk] = 673229                       (: 'xslt' ':' 'load' :)
            or $state[$p:lk] = 689541                       (: NCName^Token ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689552                       (: 'add-attribute' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689553                       (: 'add-xml-base' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689555                       (: 'compare' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689556                       (: 'count' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689557                       (: 'default' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689558                       (: 'delete' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689559                       (: 'directory-list' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689561                       (: 'else' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689563                       (: 'error' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689564                       (: 'escape-markup' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689565                       (: 'exec' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689566                       (: 'filter' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689567                       (: 'for-each' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689569                       (: 'hash' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689570                       (: 'http-request' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689571                       (: 'identity' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689572                       (: 'if' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689573                       (: 'insert' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689575                       (: 'label-elements' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689576                       (: 'library' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689577                       (: 'load' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689578                       (: 'make-absolute-uris' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689579                       (: 'namespace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689580                       (: 'namespace-rename' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689581                       (: 'pack' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689582                       (: 'parameters' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689584                       (: 'pipeline' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689586                       (: 'rename' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689587                       (: 'replace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689590                       (: 'set-attributes' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689591                       (: 'sink' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689592                       (: 'split-sequence' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689593                       (: 'step' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689594                       (: 'store' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689595                       (: 'string-replace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689596                       (: 'try' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689597                       (: 'unescape-markup' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689598                       (: 'unwrap' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689599                       (: 'uuid' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689600                       (: 'validate-with-relax-ng' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689601                       (: 'validate-with-schematron' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689602                       (: 'validate-with-xml-schema' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689603                       (: 'variable' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689604                       (: 'viewport' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689606                       (: 'wrap' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689607                       (: 'wrap-sequence' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689608                       (: 'www-form-urldecode' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689609                       (: 'www-form-urlencode' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689610                       (: 'xinclude' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689611                       (: 'xquery' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689612                       (: 'xsl-formatter' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689613                       (: 'xslt' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 705925                       (: NCName^Token ':' 'namespace' :)
            or $state[$p:lk] = 705936                       (: 'add-attribute' ':' 'namespace' :)
            or $state[$p:lk] = 705937                       (: 'add-xml-base' ':' 'namespace' :)
            or $state[$p:lk] = 705939                       (: 'compare' ':' 'namespace' :)
            or $state[$p:lk] = 705940                       (: 'count' ':' 'namespace' :)
            or $state[$p:lk] = 705941                       (: 'default' ':' 'namespace' :)
            or $state[$p:lk] = 705942                       (: 'delete' ':' 'namespace' :)
            or $state[$p:lk] = 705943                       (: 'directory-list' ':' 'namespace' :)
            or $state[$p:lk] = 705945                       (: 'else' ':' 'namespace' :)
            or $state[$p:lk] = 705947                       (: 'error' ':' 'namespace' :)
            or $state[$p:lk] = 705948                       (: 'escape-markup' ':' 'namespace' :)
            or $state[$p:lk] = 705949                       (: 'exec' ':' 'namespace' :)
            or $state[$p:lk] = 705950                       (: 'filter' ':' 'namespace' :)
            or $state[$p:lk] = 705951                       (: 'for-each' ':' 'namespace' :)
            or $state[$p:lk] = 705953                       (: 'hash' ':' 'namespace' :)
            or $state[$p:lk] = 705954                       (: 'http-request' ':' 'namespace' :)
            or $state[$p:lk] = 705955                       (: 'identity' ':' 'namespace' :)
            or $state[$p:lk] = 705956                       (: 'if' ':' 'namespace' :)
            or $state[$p:lk] = 705957                       (: 'insert' ':' 'namespace' :)
            or $state[$p:lk] = 705959                       (: 'label-elements' ':' 'namespace' :)
            or $state[$p:lk] = 705960                       (: 'library' ':' 'namespace' :)
            or $state[$p:lk] = 705961                       (: 'load' ':' 'namespace' :)
            or $state[$p:lk] = 705962                       (: 'make-absolute-uris' ':' 'namespace' :)
            or $state[$p:lk] = 705963                       (: 'namespace' ':' 'namespace' :)
            or $state[$p:lk] = 705964                       (: 'namespace-rename' ':' 'namespace' :)
            or $state[$p:lk] = 705965                       (: 'pack' ':' 'namespace' :)
            or $state[$p:lk] = 705966                       (: 'parameters' ':' 'namespace' :)
            or $state[$p:lk] = 705968                       (: 'pipeline' ':' 'namespace' :)
            or $state[$p:lk] = 705970                       (: 'rename' ':' 'namespace' :)
            or $state[$p:lk] = 705971                       (: 'replace' ':' 'namespace' :)
            or $state[$p:lk] = 705974                       (: 'set-attributes' ':' 'namespace' :)
            or $state[$p:lk] = 705975                       (: 'sink' ':' 'namespace' :)
            or $state[$p:lk] = 705976                       (: 'split-sequence' ':' 'namespace' :)
            or $state[$p:lk] = 705977                       (: 'step' ':' 'namespace' :)
            or $state[$p:lk] = 705978                       (: 'store' ':' 'namespace' :)
            or $state[$p:lk] = 705979                       (: 'string-replace' ':' 'namespace' :)
            or $state[$p:lk] = 705980                       (: 'try' ':' 'namespace' :)
            or $state[$p:lk] = 705981                       (: 'unescape-markup' ':' 'namespace' :)
            or $state[$p:lk] = 705982                       (: 'unwrap' ':' 'namespace' :)
            or $state[$p:lk] = 705983                       (: 'uuid' ':' 'namespace' :)
            or $state[$p:lk] = 705984                       (: 'validate-with-relax-ng' ':' 'namespace' :)
            or $state[$p:lk] = 705985                       (: 'validate-with-schematron' ':' 'namespace' :)
            or $state[$p:lk] = 705986                       (: 'validate-with-xml-schema' ':' 'namespace' :)
            or $state[$p:lk] = 705987                       (: 'variable' ':' 'namespace' :)
            or $state[$p:lk] = 705988                       (: 'viewport' ':' 'namespace' :)
            or $state[$p:lk] = 705990                       (: 'wrap' ':' 'namespace' :)
            or $state[$p:lk] = 705991                       (: 'wrap-sequence' ':' 'namespace' :)
            or $state[$p:lk] = 705992                       (: 'www-form-urldecode' ':' 'namespace' :)
            or $state[$p:lk] = 705993                       (: 'www-form-urlencode' ':' 'namespace' :)
            or $state[$p:lk] = 705994                       (: 'xinclude' ':' 'namespace' :)
            or $state[$p:lk] = 705995                       (: 'xquery' ':' 'namespace' :)
            or $state[$p:lk] = 705996                       (: 'xsl-formatter' ':' 'namespace' :)
            or $state[$p:lk] = 705997                       (: 'xslt' ':' 'namespace' :)
            or $state[$p:lk] = 722309                       (: NCName^Token ':' 'namespace-rename' :)
            or $state[$p:lk] = 722320                       (: 'add-attribute' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722321                       (: 'add-xml-base' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722323                       (: 'compare' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722324                       (: 'count' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722325                       (: 'default' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722326                       (: 'delete' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722327                       (: 'directory-list' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722329                       (: 'else' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722331                       (: 'error' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722332                       (: 'escape-markup' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722333                       (: 'exec' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722334                       (: 'filter' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722335                       (: 'for-each' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722337                       (: 'hash' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722338                       (: 'http-request' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722339                       (: 'identity' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722340                       (: 'if' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722341                       (: 'insert' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722343                       (: 'label-elements' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722344                       (: 'library' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722345                       (: 'load' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722346                       (: 'make-absolute-uris' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722347                       (: 'namespace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722348                       (: 'namespace-rename' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722349                       (: 'pack' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722350                       (: 'parameters' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722352                       (: 'pipeline' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722354                       (: 'rename' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722355                       (: 'replace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722358                       (: 'set-attributes' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722359                       (: 'sink' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722360                       (: 'split-sequence' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722361                       (: 'step' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722362                       (: 'store' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722363                       (: 'string-replace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722364                       (: 'try' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722365                       (: 'unescape-markup' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722366                       (: 'unwrap' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722367                       (: 'uuid' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722368                       (: 'validate-with-relax-ng' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722369                       (: 'validate-with-schematron' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722370                       (: 'validate-with-xml-schema' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722371                       (: 'variable' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722372                       (: 'viewport' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722374                       (: 'wrap' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722375                       (: 'wrap-sequence' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722376                       (: 'www-form-urldecode' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722377                       (: 'www-form-urlencode' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722378                       (: 'xinclude' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722379                       (: 'xquery' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722380                       (: 'xsl-formatter' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722381                       (: 'xslt' ':' 'namespace-rename' :)
            or $state[$p:lk] = 738693                       (: NCName^Token ':' 'pack' :)
            or $state[$p:lk] = 738704                       (: 'add-attribute' ':' 'pack' :)
            or $state[$p:lk] = 738705                       (: 'add-xml-base' ':' 'pack' :)
            or $state[$p:lk] = 738707                       (: 'compare' ':' 'pack' :)
            or $state[$p:lk] = 738708                       (: 'count' ':' 'pack' :)
            or $state[$p:lk] = 738709                       (: 'default' ':' 'pack' :)
            or $state[$p:lk] = 738710                       (: 'delete' ':' 'pack' :)
            or $state[$p:lk] = 738711                       (: 'directory-list' ':' 'pack' :)
            or $state[$p:lk] = 738713                       (: 'else' ':' 'pack' :)
            or $state[$p:lk] = 738715                       (: 'error' ':' 'pack' :)
            or $state[$p:lk] = 738716                       (: 'escape-markup' ':' 'pack' :)
            or $state[$p:lk] = 738717                       (: 'exec' ':' 'pack' :)
            or $state[$p:lk] = 738718                       (: 'filter' ':' 'pack' :)
            or $state[$p:lk] = 738719                       (: 'for-each' ':' 'pack' :)
            or $state[$p:lk] = 738721                       (: 'hash' ':' 'pack' :)
            or $state[$p:lk] = 738722                       (: 'http-request' ':' 'pack' :)
            or $state[$p:lk] = 738723                       (: 'identity' ':' 'pack' :)
            or $state[$p:lk] = 738724                       (: 'if' ':' 'pack' :)
            or $state[$p:lk] = 738725                       (: 'insert' ':' 'pack' :)
            or $state[$p:lk] = 738727                       (: 'label-elements' ':' 'pack' :)
            or $state[$p:lk] = 738728                       (: 'library' ':' 'pack' :)
            or $state[$p:lk] = 738729                       (: 'load' ':' 'pack' :)
            or $state[$p:lk] = 738730                       (: 'make-absolute-uris' ':' 'pack' :)
            or $state[$p:lk] = 738731                       (: 'namespace' ':' 'pack' :)
            or $state[$p:lk] = 738732                       (: 'namespace-rename' ':' 'pack' :)
            or $state[$p:lk] = 738733                       (: 'pack' ':' 'pack' :)
            or $state[$p:lk] = 738734                       (: 'parameters' ':' 'pack' :)
            or $state[$p:lk] = 738736                       (: 'pipeline' ':' 'pack' :)
            or $state[$p:lk] = 738738                       (: 'rename' ':' 'pack' :)
            or $state[$p:lk] = 738739                       (: 'replace' ':' 'pack' :)
            or $state[$p:lk] = 738742                       (: 'set-attributes' ':' 'pack' :)
            or $state[$p:lk] = 738743                       (: 'sink' ':' 'pack' :)
            or $state[$p:lk] = 738744                       (: 'split-sequence' ':' 'pack' :)
            or $state[$p:lk] = 738745                       (: 'step' ':' 'pack' :)
            or $state[$p:lk] = 738746                       (: 'store' ':' 'pack' :)
            or $state[$p:lk] = 738747                       (: 'string-replace' ':' 'pack' :)
            or $state[$p:lk] = 738748                       (: 'try' ':' 'pack' :)
            or $state[$p:lk] = 738749                       (: 'unescape-markup' ':' 'pack' :)
            or $state[$p:lk] = 738750                       (: 'unwrap' ':' 'pack' :)
            or $state[$p:lk] = 738751                       (: 'uuid' ':' 'pack' :)
            or $state[$p:lk] = 738752                       (: 'validate-with-relax-ng' ':' 'pack' :)
            or $state[$p:lk] = 738753                       (: 'validate-with-schematron' ':' 'pack' :)
            or $state[$p:lk] = 738754                       (: 'validate-with-xml-schema' ':' 'pack' :)
            or $state[$p:lk] = 738755                       (: 'variable' ':' 'pack' :)
            or $state[$p:lk] = 738756                       (: 'viewport' ':' 'pack' :)
            or $state[$p:lk] = 738758                       (: 'wrap' ':' 'pack' :)
            or $state[$p:lk] = 738759                       (: 'wrap-sequence' ':' 'pack' :)
            or $state[$p:lk] = 738760                       (: 'www-form-urldecode' ':' 'pack' :)
            or $state[$p:lk] = 738761                       (: 'www-form-urlencode' ':' 'pack' :)
            or $state[$p:lk] = 738762                       (: 'xinclude' ':' 'pack' :)
            or $state[$p:lk] = 738763                       (: 'xquery' ':' 'pack' :)
            or $state[$p:lk] = 738764                       (: 'xsl-formatter' ':' 'pack' :)
            or $state[$p:lk] = 738765                       (: 'xslt' ':' 'pack' :)
            or $state[$p:lk] = 755077                       (: NCName^Token ':' 'parameters' :)
            or $state[$p:lk] = 755088                       (: 'add-attribute' ':' 'parameters' :)
            or $state[$p:lk] = 755089                       (: 'add-xml-base' ':' 'parameters' :)
            or $state[$p:lk] = 755091                       (: 'compare' ':' 'parameters' :)
            or $state[$p:lk] = 755092                       (: 'count' ':' 'parameters' :)
            or $state[$p:lk] = 755093                       (: 'default' ':' 'parameters' :)
            or $state[$p:lk] = 755094                       (: 'delete' ':' 'parameters' :)
            or $state[$p:lk] = 755095                       (: 'directory-list' ':' 'parameters' :)
            or $state[$p:lk] = 755097                       (: 'else' ':' 'parameters' :)
            or $state[$p:lk] = 755099                       (: 'error' ':' 'parameters' :)
            or $state[$p:lk] = 755100                       (: 'escape-markup' ':' 'parameters' :)
            or $state[$p:lk] = 755101                       (: 'exec' ':' 'parameters' :)
            or $state[$p:lk] = 755102                       (: 'filter' ':' 'parameters' :)
            or $state[$p:lk] = 755103                       (: 'for-each' ':' 'parameters' :)
            or $state[$p:lk] = 755105                       (: 'hash' ':' 'parameters' :)
            or $state[$p:lk] = 755106                       (: 'http-request' ':' 'parameters' :)
            or $state[$p:lk] = 755107                       (: 'identity' ':' 'parameters' :)
            or $state[$p:lk] = 755108                       (: 'if' ':' 'parameters' :)
            or $state[$p:lk] = 755109                       (: 'insert' ':' 'parameters' :)
            or $state[$p:lk] = 755111                       (: 'label-elements' ':' 'parameters' :)
            or $state[$p:lk] = 755112                       (: 'library' ':' 'parameters' :)
            or $state[$p:lk] = 755113                       (: 'load' ':' 'parameters' :)
            or $state[$p:lk] = 755114                       (: 'make-absolute-uris' ':' 'parameters' :)
            or $state[$p:lk] = 755115                       (: 'namespace' ':' 'parameters' :)
            or $state[$p:lk] = 755116                       (: 'namespace-rename' ':' 'parameters' :)
            or $state[$p:lk] = 755117                       (: 'pack' ':' 'parameters' :)
            or $state[$p:lk] = 755118                       (: 'parameters' ':' 'parameters' :)
            or $state[$p:lk] = 755120                       (: 'pipeline' ':' 'parameters' :)
            or $state[$p:lk] = 755122                       (: 'rename' ':' 'parameters' :)
            or $state[$p:lk] = 755123                       (: 'replace' ':' 'parameters' :)
            or $state[$p:lk] = 755126                       (: 'set-attributes' ':' 'parameters' :)
            or $state[$p:lk] = 755127                       (: 'sink' ':' 'parameters' :)
            or $state[$p:lk] = 755128                       (: 'split-sequence' ':' 'parameters' :)
            or $state[$p:lk] = 755129                       (: 'step' ':' 'parameters' :)
            or $state[$p:lk] = 755130                       (: 'store' ':' 'parameters' :)
            or $state[$p:lk] = 755131                       (: 'string-replace' ':' 'parameters' :)
            or $state[$p:lk] = 755132                       (: 'try' ':' 'parameters' :)
            or $state[$p:lk] = 755133                       (: 'unescape-markup' ':' 'parameters' :)
            or $state[$p:lk] = 755134                       (: 'unwrap' ':' 'parameters' :)
            or $state[$p:lk] = 755135                       (: 'uuid' ':' 'parameters' :)
            or $state[$p:lk] = 755136                       (: 'validate-with-relax-ng' ':' 'parameters' :)
            or $state[$p:lk] = 755137                       (: 'validate-with-schematron' ':' 'parameters' :)
            or $state[$p:lk] = 755138                       (: 'validate-with-xml-schema' ':' 'parameters' :)
            or $state[$p:lk] = 755139                       (: 'variable' ':' 'parameters' :)
            or $state[$p:lk] = 755140                       (: 'viewport' ':' 'parameters' :)
            or $state[$p:lk] = 755142                       (: 'wrap' ':' 'parameters' :)
            or $state[$p:lk] = 755143                       (: 'wrap-sequence' ':' 'parameters' :)
            or $state[$p:lk] = 755144                       (: 'www-form-urldecode' ':' 'parameters' :)
            or $state[$p:lk] = 755145                       (: 'www-form-urlencode' ':' 'parameters' :)
            or $state[$p:lk] = 755146                       (: 'xinclude' ':' 'parameters' :)
            or $state[$p:lk] = 755147                       (: 'xquery' ':' 'parameters' :)
            or $state[$p:lk] = 755148                       (: 'xsl-formatter' ':' 'parameters' :)
            or $state[$p:lk] = 755149                       (: 'xslt' ':' 'parameters' :)
            or $state[$p:lk] = 787845                       (: NCName^Token ':' 'pipeline' :)
            or $state[$p:lk] = 787856                       (: 'add-attribute' ':' 'pipeline' :)
            or $state[$p:lk] = 787857                       (: 'add-xml-base' ':' 'pipeline' :)
            or $state[$p:lk] = 787859                       (: 'compare' ':' 'pipeline' :)
            or $state[$p:lk] = 787860                       (: 'count' ':' 'pipeline' :)
            or $state[$p:lk] = 787861                       (: 'default' ':' 'pipeline' :)
            or $state[$p:lk] = 787862                       (: 'delete' ':' 'pipeline' :)
            or $state[$p:lk] = 787863                       (: 'directory-list' ':' 'pipeline' :)
            or $state[$p:lk] = 787865                       (: 'else' ':' 'pipeline' :)
            or $state[$p:lk] = 787867                       (: 'error' ':' 'pipeline' :)
            or $state[$p:lk] = 787868                       (: 'escape-markup' ':' 'pipeline' :)
            or $state[$p:lk] = 787869                       (: 'exec' ':' 'pipeline' :)
            or $state[$p:lk] = 787870                       (: 'filter' ':' 'pipeline' :)
            or $state[$p:lk] = 787871                       (: 'for-each' ':' 'pipeline' :)
            or $state[$p:lk] = 787873                       (: 'hash' ':' 'pipeline' :)
            or $state[$p:lk] = 787874                       (: 'http-request' ':' 'pipeline' :)
            or $state[$p:lk] = 787875                       (: 'identity' ':' 'pipeline' :)
            or $state[$p:lk] = 787876                       (: 'if' ':' 'pipeline' :)
            or $state[$p:lk] = 787877                       (: 'insert' ':' 'pipeline' :)
            or $state[$p:lk] = 787879                       (: 'label-elements' ':' 'pipeline' :)
            or $state[$p:lk] = 787880                       (: 'library' ':' 'pipeline' :)
            or $state[$p:lk] = 787881                       (: 'load' ':' 'pipeline' :)
            or $state[$p:lk] = 787882                       (: 'make-absolute-uris' ':' 'pipeline' :)
            or $state[$p:lk] = 787883                       (: 'namespace' ':' 'pipeline' :)
            or $state[$p:lk] = 787884                       (: 'namespace-rename' ':' 'pipeline' :)
            or $state[$p:lk] = 787885                       (: 'pack' ':' 'pipeline' :)
            or $state[$p:lk] = 787886                       (: 'parameters' ':' 'pipeline' :)
            or $state[$p:lk] = 787888                       (: 'pipeline' ':' 'pipeline' :)
            or $state[$p:lk] = 787890                       (: 'rename' ':' 'pipeline' :)
            or $state[$p:lk] = 787891                       (: 'replace' ':' 'pipeline' :)
            or $state[$p:lk] = 787894                       (: 'set-attributes' ':' 'pipeline' :)
            or $state[$p:lk] = 787895                       (: 'sink' ':' 'pipeline' :)
            or $state[$p:lk] = 787896                       (: 'split-sequence' ':' 'pipeline' :)
            or $state[$p:lk] = 787897                       (: 'step' ':' 'pipeline' :)
            or $state[$p:lk] = 787898                       (: 'store' ':' 'pipeline' :)
            or $state[$p:lk] = 787899                       (: 'string-replace' ':' 'pipeline' :)
            or $state[$p:lk] = 787900                       (: 'try' ':' 'pipeline' :)
            or $state[$p:lk] = 787901                       (: 'unescape-markup' ':' 'pipeline' :)
            or $state[$p:lk] = 787902                       (: 'unwrap' ':' 'pipeline' :)
            or $state[$p:lk] = 787903                       (: 'uuid' ':' 'pipeline' :)
            or $state[$p:lk] = 787904                       (: 'validate-with-relax-ng' ':' 'pipeline' :)
            or $state[$p:lk] = 787905                       (: 'validate-with-schematron' ':' 'pipeline' :)
            or $state[$p:lk] = 787906                       (: 'validate-with-xml-schema' ':' 'pipeline' :)
            or $state[$p:lk] = 787907                       (: 'variable' ':' 'pipeline' :)
            or $state[$p:lk] = 787908                       (: 'viewport' ':' 'pipeline' :)
            or $state[$p:lk] = 787910                       (: 'wrap' ':' 'pipeline' :)
            or $state[$p:lk] = 787911                       (: 'wrap-sequence' ':' 'pipeline' :)
            or $state[$p:lk] = 787912                       (: 'www-form-urldecode' ':' 'pipeline' :)
            or $state[$p:lk] = 787913                       (: 'www-form-urlencode' ':' 'pipeline' :)
            or $state[$p:lk] = 787914                       (: 'xinclude' ':' 'pipeline' :)
            or $state[$p:lk] = 787915                       (: 'xquery' ':' 'pipeline' :)
            or $state[$p:lk] = 787916                       (: 'xsl-formatter' ':' 'pipeline' :)
            or $state[$p:lk] = 787917                       (: 'xslt' ':' 'pipeline' :)
            or $state[$p:lk] = 820613                       (: NCName^Token ':' 'rename' :)
            or $state[$p:lk] = 820624                       (: 'add-attribute' ':' 'rename' :)
            or $state[$p:lk] = 820625                       (: 'add-xml-base' ':' 'rename' :)
            or $state[$p:lk] = 820627                       (: 'compare' ':' 'rename' :)
            or $state[$p:lk] = 820628                       (: 'count' ':' 'rename' :)
            or $state[$p:lk] = 820629                       (: 'default' ':' 'rename' :)
            or $state[$p:lk] = 820630                       (: 'delete' ':' 'rename' :)
            or $state[$p:lk] = 820631                       (: 'directory-list' ':' 'rename' :)
            or $state[$p:lk] = 820633                       (: 'else' ':' 'rename' :)
            or $state[$p:lk] = 820635                       (: 'error' ':' 'rename' :)
            or $state[$p:lk] = 820636                       (: 'escape-markup' ':' 'rename' :)
            or $state[$p:lk] = 820637                       (: 'exec' ':' 'rename' :)
            or $state[$p:lk] = 820638                       (: 'filter' ':' 'rename' :)
            or $state[$p:lk] = 820639                       (: 'for-each' ':' 'rename' :)
            or $state[$p:lk] = 820641                       (: 'hash' ':' 'rename' :)
            or $state[$p:lk] = 820642                       (: 'http-request' ':' 'rename' :)
            or $state[$p:lk] = 820643                       (: 'identity' ':' 'rename' :)
            or $state[$p:lk] = 820644                       (: 'if' ':' 'rename' :)
            or $state[$p:lk] = 820645                       (: 'insert' ':' 'rename' :)
            or $state[$p:lk] = 820647                       (: 'label-elements' ':' 'rename' :)
            or $state[$p:lk] = 820648                       (: 'library' ':' 'rename' :)
            or $state[$p:lk] = 820649                       (: 'load' ':' 'rename' :)
            or $state[$p:lk] = 820650                       (: 'make-absolute-uris' ':' 'rename' :)
            or $state[$p:lk] = 820651                       (: 'namespace' ':' 'rename' :)
            or $state[$p:lk] = 820652                       (: 'namespace-rename' ':' 'rename' :)
            or $state[$p:lk] = 820653                       (: 'pack' ':' 'rename' :)
            or $state[$p:lk] = 820654                       (: 'parameters' ':' 'rename' :)
            or $state[$p:lk] = 820656                       (: 'pipeline' ':' 'rename' :)
            or $state[$p:lk] = 820658                       (: 'rename' ':' 'rename' :)
            or $state[$p:lk] = 820659                       (: 'replace' ':' 'rename' :)
            or $state[$p:lk] = 820662                       (: 'set-attributes' ':' 'rename' :)
            or $state[$p:lk] = 820663                       (: 'sink' ':' 'rename' :)
            or $state[$p:lk] = 820664                       (: 'split-sequence' ':' 'rename' :)
            or $state[$p:lk] = 820665                       (: 'step' ':' 'rename' :)
            or $state[$p:lk] = 820666                       (: 'store' ':' 'rename' :)
            or $state[$p:lk] = 820667                       (: 'string-replace' ':' 'rename' :)
            or $state[$p:lk] = 820668                       (: 'try' ':' 'rename' :)
            or $state[$p:lk] = 820669                       (: 'unescape-markup' ':' 'rename' :)
            or $state[$p:lk] = 820670                       (: 'unwrap' ':' 'rename' :)
            or $state[$p:lk] = 820671                       (: 'uuid' ':' 'rename' :)
            or $state[$p:lk] = 820672                       (: 'validate-with-relax-ng' ':' 'rename' :)
            or $state[$p:lk] = 820673                       (: 'validate-with-schematron' ':' 'rename' :)
            or $state[$p:lk] = 820674                       (: 'validate-with-xml-schema' ':' 'rename' :)
            or $state[$p:lk] = 820675                       (: 'variable' ':' 'rename' :)
            or $state[$p:lk] = 820676                       (: 'viewport' ':' 'rename' :)
            or $state[$p:lk] = 820678                       (: 'wrap' ':' 'rename' :)
            or $state[$p:lk] = 820679                       (: 'wrap-sequence' ':' 'rename' :)
            or $state[$p:lk] = 820680                       (: 'www-form-urldecode' ':' 'rename' :)
            or $state[$p:lk] = 820681                       (: 'www-form-urlencode' ':' 'rename' :)
            or $state[$p:lk] = 820682                       (: 'xinclude' ':' 'rename' :)
            or $state[$p:lk] = 820683                       (: 'xquery' ':' 'rename' :)
            or $state[$p:lk] = 820684                       (: 'xsl-formatter' ':' 'rename' :)
            or $state[$p:lk] = 820685                       (: 'xslt' ':' 'rename' :)
            or $state[$p:lk] = 836997                       (: NCName^Token ':' 'replace' :)
            or $state[$p:lk] = 837008                       (: 'add-attribute' ':' 'replace' :)
            or $state[$p:lk] = 837009                       (: 'add-xml-base' ':' 'replace' :)
            or $state[$p:lk] = 837011                       (: 'compare' ':' 'replace' :)
            or $state[$p:lk] = 837012                       (: 'count' ':' 'replace' :)
            or $state[$p:lk] = 837013                       (: 'default' ':' 'replace' :)
            or $state[$p:lk] = 837014                       (: 'delete' ':' 'replace' :)
            or $state[$p:lk] = 837015                       (: 'directory-list' ':' 'replace' :)
            or $state[$p:lk] = 837017                       (: 'else' ':' 'replace' :)
            or $state[$p:lk] = 837019                       (: 'error' ':' 'replace' :)
            or $state[$p:lk] = 837020                       (: 'escape-markup' ':' 'replace' :)
            or $state[$p:lk] = 837021                       (: 'exec' ':' 'replace' :)
            or $state[$p:lk] = 837022                       (: 'filter' ':' 'replace' :)
            or $state[$p:lk] = 837023                       (: 'for-each' ':' 'replace' :)
            or $state[$p:lk] = 837025                       (: 'hash' ':' 'replace' :)
            or $state[$p:lk] = 837026                       (: 'http-request' ':' 'replace' :)
            or $state[$p:lk] = 837027                       (: 'identity' ':' 'replace' :)
            or $state[$p:lk] = 837028                       (: 'if' ':' 'replace' :)
            or $state[$p:lk] = 837029                       (: 'insert' ':' 'replace' :)
            or $state[$p:lk] = 837031                       (: 'label-elements' ':' 'replace' :)
            or $state[$p:lk] = 837032                       (: 'library' ':' 'replace' :)
            or $state[$p:lk] = 837033                       (: 'load' ':' 'replace' :)
            or $state[$p:lk] = 837034                       (: 'make-absolute-uris' ':' 'replace' :)
            or $state[$p:lk] = 837035                       (: 'namespace' ':' 'replace' :)
            or $state[$p:lk] = 837036                       (: 'namespace-rename' ':' 'replace' :)
            or $state[$p:lk] = 837037                       (: 'pack' ':' 'replace' :)
            or $state[$p:lk] = 837038                       (: 'parameters' ':' 'replace' :)
            or $state[$p:lk] = 837040                       (: 'pipeline' ':' 'replace' :)
            or $state[$p:lk] = 837042                       (: 'rename' ':' 'replace' :)
            or $state[$p:lk] = 837043                       (: 'replace' ':' 'replace' :)
            or $state[$p:lk] = 837046                       (: 'set-attributes' ':' 'replace' :)
            or $state[$p:lk] = 837047                       (: 'sink' ':' 'replace' :)
            or $state[$p:lk] = 837048                       (: 'split-sequence' ':' 'replace' :)
            or $state[$p:lk] = 837049                       (: 'step' ':' 'replace' :)
            or $state[$p:lk] = 837050                       (: 'store' ':' 'replace' :)
            or $state[$p:lk] = 837051                       (: 'string-replace' ':' 'replace' :)
            or $state[$p:lk] = 837052                       (: 'try' ':' 'replace' :)
            or $state[$p:lk] = 837053                       (: 'unescape-markup' ':' 'replace' :)
            or $state[$p:lk] = 837054                       (: 'unwrap' ':' 'replace' :)
            or $state[$p:lk] = 837055                       (: 'uuid' ':' 'replace' :)
            or $state[$p:lk] = 837056                       (: 'validate-with-relax-ng' ':' 'replace' :)
            or $state[$p:lk] = 837057                       (: 'validate-with-schematron' ':' 'replace' :)
            or $state[$p:lk] = 837058                       (: 'validate-with-xml-schema' ':' 'replace' :)
            or $state[$p:lk] = 837059                       (: 'variable' ':' 'replace' :)
            or $state[$p:lk] = 837060                       (: 'viewport' ':' 'replace' :)
            or $state[$p:lk] = 837062                       (: 'wrap' ':' 'replace' :)
            or $state[$p:lk] = 837063                       (: 'wrap-sequence' ':' 'replace' :)
            or $state[$p:lk] = 837064                       (: 'www-form-urldecode' ':' 'replace' :)
            or $state[$p:lk] = 837065                       (: 'www-form-urlencode' ':' 'replace' :)
            or $state[$p:lk] = 837066                       (: 'xinclude' ':' 'replace' :)
            or $state[$p:lk] = 837067                       (: 'xquery' ':' 'replace' :)
            or $state[$p:lk] = 837068                       (: 'xsl-formatter' ':' 'replace' :)
            or $state[$p:lk] = 837069                       (: 'xslt' ':' 'replace' :)
            or $state[$p:lk] = 886149                       (: NCName^Token ':' 'set-attributes' :)
            or $state[$p:lk] = 886160                       (: 'add-attribute' ':' 'set-attributes' :)
            or $state[$p:lk] = 886161                       (: 'add-xml-base' ':' 'set-attributes' :)
            or $state[$p:lk] = 886163                       (: 'compare' ':' 'set-attributes' :)
            or $state[$p:lk] = 886164                       (: 'count' ':' 'set-attributes' :)
            or $state[$p:lk] = 886165                       (: 'default' ':' 'set-attributes' :)
            or $state[$p:lk] = 886166                       (: 'delete' ':' 'set-attributes' :)
            or $state[$p:lk] = 886167                       (: 'directory-list' ':' 'set-attributes' :)
            or $state[$p:lk] = 886169                       (: 'else' ':' 'set-attributes' :)
            or $state[$p:lk] = 886171                       (: 'error' ':' 'set-attributes' :)
            or $state[$p:lk] = 886172                       (: 'escape-markup' ':' 'set-attributes' :)
            or $state[$p:lk] = 886173                       (: 'exec' ':' 'set-attributes' :)
            or $state[$p:lk] = 886174                       (: 'filter' ':' 'set-attributes' :)
            or $state[$p:lk] = 886175                       (: 'for-each' ':' 'set-attributes' :)
            or $state[$p:lk] = 886177                       (: 'hash' ':' 'set-attributes' :)
            or $state[$p:lk] = 886178                       (: 'http-request' ':' 'set-attributes' :)
            or $state[$p:lk] = 886179                       (: 'identity' ':' 'set-attributes' :)
            or $state[$p:lk] = 886180                       (: 'if' ':' 'set-attributes' :)
            or $state[$p:lk] = 886181                       (: 'insert' ':' 'set-attributes' :)
            or $state[$p:lk] = 886183                       (: 'label-elements' ':' 'set-attributes' :)
            or $state[$p:lk] = 886184                       (: 'library' ':' 'set-attributes' :)
            or $state[$p:lk] = 886185                       (: 'load' ':' 'set-attributes' :)
            or $state[$p:lk] = 886186                       (: 'make-absolute-uris' ':' 'set-attributes' :)
            or $state[$p:lk] = 886187                       (: 'namespace' ':' 'set-attributes' :)
            or $state[$p:lk] = 886188                       (: 'namespace-rename' ':' 'set-attributes' :)
            or $state[$p:lk] = 886189                       (: 'pack' ':' 'set-attributes' :)
            or $state[$p:lk] = 886190                       (: 'parameters' ':' 'set-attributes' :)
            or $state[$p:lk] = 886192                       (: 'pipeline' ':' 'set-attributes' :)
            or $state[$p:lk] = 886194                       (: 'rename' ':' 'set-attributes' :)
            or $state[$p:lk] = 886195                       (: 'replace' ':' 'set-attributes' :)
            or $state[$p:lk] = 886198                       (: 'set-attributes' ':' 'set-attributes' :)
            or $state[$p:lk] = 886199                       (: 'sink' ':' 'set-attributes' :)
            or $state[$p:lk] = 886200                       (: 'split-sequence' ':' 'set-attributes' :)
            or $state[$p:lk] = 886201                       (: 'step' ':' 'set-attributes' :)
            or $state[$p:lk] = 886202                       (: 'store' ':' 'set-attributes' :)
            or $state[$p:lk] = 886203                       (: 'string-replace' ':' 'set-attributes' :)
            or $state[$p:lk] = 886204                       (: 'try' ':' 'set-attributes' :)
            or $state[$p:lk] = 886205                       (: 'unescape-markup' ':' 'set-attributes' :)
            or $state[$p:lk] = 886206                       (: 'unwrap' ':' 'set-attributes' :)
            or $state[$p:lk] = 886207                       (: 'uuid' ':' 'set-attributes' :)
            or $state[$p:lk] = 886208                       (: 'validate-with-relax-ng' ':' 'set-attributes' :)
            or $state[$p:lk] = 886209                       (: 'validate-with-schematron' ':' 'set-attributes' :)
            or $state[$p:lk] = 886210                       (: 'validate-with-xml-schema' ':' 'set-attributes' :)
            or $state[$p:lk] = 886211                       (: 'variable' ':' 'set-attributes' :)
            or $state[$p:lk] = 886212                       (: 'viewport' ':' 'set-attributes' :)
            or $state[$p:lk] = 886214                       (: 'wrap' ':' 'set-attributes' :)
            or $state[$p:lk] = 886215                       (: 'wrap-sequence' ':' 'set-attributes' :)
            or $state[$p:lk] = 886216                       (: 'www-form-urldecode' ':' 'set-attributes' :)
            or $state[$p:lk] = 886217                       (: 'www-form-urlencode' ':' 'set-attributes' :)
            or $state[$p:lk] = 886218                       (: 'xinclude' ':' 'set-attributes' :)
            or $state[$p:lk] = 886219                       (: 'xquery' ':' 'set-attributes' :)
            or $state[$p:lk] = 886220                       (: 'xsl-formatter' ':' 'set-attributes' :)
            or $state[$p:lk] = 886221                       (: 'xslt' ':' 'set-attributes' :)
            or $state[$p:lk] = 902533                       (: NCName^Token ':' 'sink' :)
            or $state[$p:lk] = 902544                       (: 'add-attribute' ':' 'sink' :)
            or $state[$p:lk] = 902545                       (: 'add-xml-base' ':' 'sink' :)
            or $state[$p:lk] = 902547                       (: 'compare' ':' 'sink' :)
            or $state[$p:lk] = 902548                       (: 'count' ':' 'sink' :)
            or $state[$p:lk] = 902549                       (: 'default' ':' 'sink' :)
            or $state[$p:lk] = 902550                       (: 'delete' ':' 'sink' :)
            or $state[$p:lk] = 902551                       (: 'directory-list' ':' 'sink' :)
            or $state[$p:lk] = 902553                       (: 'else' ':' 'sink' :)
            or $state[$p:lk] = 902555                       (: 'error' ':' 'sink' :)
            or $state[$p:lk] = 902556                       (: 'escape-markup' ':' 'sink' :)
            or $state[$p:lk] = 902557                       (: 'exec' ':' 'sink' :)
            or $state[$p:lk] = 902558                       (: 'filter' ':' 'sink' :)
            or $state[$p:lk] = 902559                       (: 'for-each' ':' 'sink' :)
            or $state[$p:lk] = 902561                       (: 'hash' ':' 'sink' :)
            or $state[$p:lk] = 902562                       (: 'http-request' ':' 'sink' :)
            or $state[$p:lk] = 902563                       (: 'identity' ':' 'sink' :)
            or $state[$p:lk] = 902564                       (: 'if' ':' 'sink' :)
            or $state[$p:lk] = 902565                       (: 'insert' ':' 'sink' :)
            or $state[$p:lk] = 902567                       (: 'label-elements' ':' 'sink' :)
            or $state[$p:lk] = 902568                       (: 'library' ':' 'sink' :)
            or $state[$p:lk] = 902569                       (: 'load' ':' 'sink' :)
            or $state[$p:lk] = 902570                       (: 'make-absolute-uris' ':' 'sink' :)
            or $state[$p:lk] = 902571                       (: 'namespace' ':' 'sink' :)
            or $state[$p:lk] = 902572                       (: 'namespace-rename' ':' 'sink' :)
            or $state[$p:lk] = 902573                       (: 'pack' ':' 'sink' :)
            or $state[$p:lk] = 902574                       (: 'parameters' ':' 'sink' :)
            or $state[$p:lk] = 902576                       (: 'pipeline' ':' 'sink' :)
            or $state[$p:lk] = 902578                       (: 'rename' ':' 'sink' :)
            or $state[$p:lk] = 902579                       (: 'replace' ':' 'sink' :)
            or $state[$p:lk] = 902582                       (: 'set-attributes' ':' 'sink' :)
            or $state[$p:lk] = 902583                       (: 'sink' ':' 'sink' :)
            or $state[$p:lk] = 902584                       (: 'split-sequence' ':' 'sink' :)
            or $state[$p:lk] = 902585                       (: 'step' ':' 'sink' :)
            or $state[$p:lk] = 902586                       (: 'store' ':' 'sink' :)
            or $state[$p:lk] = 902587                       (: 'string-replace' ':' 'sink' :)
            or $state[$p:lk] = 902588                       (: 'try' ':' 'sink' :)
            or $state[$p:lk] = 902589                       (: 'unescape-markup' ':' 'sink' :)
            or $state[$p:lk] = 902590                       (: 'unwrap' ':' 'sink' :)
            or $state[$p:lk] = 902591                       (: 'uuid' ':' 'sink' :)
            or $state[$p:lk] = 902592                       (: 'validate-with-relax-ng' ':' 'sink' :)
            or $state[$p:lk] = 902593                       (: 'validate-with-schematron' ':' 'sink' :)
            or $state[$p:lk] = 902594                       (: 'validate-with-xml-schema' ':' 'sink' :)
            or $state[$p:lk] = 902595                       (: 'variable' ':' 'sink' :)
            or $state[$p:lk] = 902596                       (: 'viewport' ':' 'sink' :)
            or $state[$p:lk] = 902598                       (: 'wrap' ':' 'sink' :)
            or $state[$p:lk] = 902599                       (: 'wrap-sequence' ':' 'sink' :)
            or $state[$p:lk] = 902600                       (: 'www-form-urldecode' ':' 'sink' :)
            or $state[$p:lk] = 902601                       (: 'www-form-urlencode' ':' 'sink' :)
            or $state[$p:lk] = 902602                       (: 'xinclude' ':' 'sink' :)
            or $state[$p:lk] = 902603                       (: 'xquery' ':' 'sink' :)
            or $state[$p:lk] = 902604                       (: 'xsl-formatter' ':' 'sink' :)
            or $state[$p:lk] = 902605                       (: 'xslt' ':' 'sink' :)
            or $state[$p:lk] = 918917                       (: NCName^Token ':' 'split-sequence' :)
            or $state[$p:lk] = 918928                       (: 'add-attribute' ':' 'split-sequence' :)
            or $state[$p:lk] = 918929                       (: 'add-xml-base' ':' 'split-sequence' :)
            or $state[$p:lk] = 918931                       (: 'compare' ':' 'split-sequence' :)
            or $state[$p:lk] = 918932                       (: 'count' ':' 'split-sequence' :)
            or $state[$p:lk] = 918933                       (: 'default' ':' 'split-sequence' :)
            or $state[$p:lk] = 918934                       (: 'delete' ':' 'split-sequence' :)
            or $state[$p:lk] = 918935                       (: 'directory-list' ':' 'split-sequence' :)
            or $state[$p:lk] = 918937                       (: 'else' ':' 'split-sequence' :)
            or $state[$p:lk] = 918939                       (: 'error' ':' 'split-sequence' :)
            or $state[$p:lk] = 918940                       (: 'escape-markup' ':' 'split-sequence' :)
            or $state[$p:lk] = 918941                       (: 'exec' ':' 'split-sequence' :)
            or $state[$p:lk] = 918942                       (: 'filter' ':' 'split-sequence' :)
            or $state[$p:lk] = 918943                       (: 'for-each' ':' 'split-sequence' :)
            or $state[$p:lk] = 918945                       (: 'hash' ':' 'split-sequence' :)
            or $state[$p:lk] = 918946                       (: 'http-request' ':' 'split-sequence' :)
            or $state[$p:lk] = 918947                       (: 'identity' ':' 'split-sequence' :)
            or $state[$p:lk] = 918948                       (: 'if' ':' 'split-sequence' :)
            or $state[$p:lk] = 918949                       (: 'insert' ':' 'split-sequence' :)
            or $state[$p:lk] = 918951                       (: 'label-elements' ':' 'split-sequence' :)
            or $state[$p:lk] = 918952                       (: 'library' ':' 'split-sequence' :)
            or $state[$p:lk] = 918953                       (: 'load' ':' 'split-sequence' :)
            or $state[$p:lk] = 918954                       (: 'make-absolute-uris' ':' 'split-sequence' :)
            or $state[$p:lk] = 918955                       (: 'namespace' ':' 'split-sequence' :)
            or $state[$p:lk] = 918956                       (: 'namespace-rename' ':' 'split-sequence' :)
            or $state[$p:lk] = 918957                       (: 'pack' ':' 'split-sequence' :)
            or $state[$p:lk] = 918958                       (: 'parameters' ':' 'split-sequence' :)
            or $state[$p:lk] = 918960                       (: 'pipeline' ':' 'split-sequence' :)
            or $state[$p:lk] = 918962                       (: 'rename' ':' 'split-sequence' :)
            or $state[$p:lk] = 918963                       (: 'replace' ':' 'split-sequence' :)
            or $state[$p:lk] = 918966                       (: 'set-attributes' ':' 'split-sequence' :)
            or $state[$p:lk] = 918967                       (: 'sink' ':' 'split-sequence' :)
            or $state[$p:lk] = 918968                       (: 'split-sequence' ':' 'split-sequence' :)
            or $state[$p:lk] = 918969                       (: 'step' ':' 'split-sequence' :)
            or $state[$p:lk] = 918970                       (: 'store' ':' 'split-sequence' :)
            or $state[$p:lk] = 918971                       (: 'string-replace' ':' 'split-sequence' :)
            or $state[$p:lk] = 918972                       (: 'try' ':' 'split-sequence' :)
            or $state[$p:lk] = 918973                       (: 'unescape-markup' ':' 'split-sequence' :)
            or $state[$p:lk] = 918974                       (: 'unwrap' ':' 'split-sequence' :)
            or $state[$p:lk] = 918975                       (: 'uuid' ':' 'split-sequence' :)
            or $state[$p:lk] = 918976                       (: 'validate-with-relax-ng' ':' 'split-sequence' :)
            or $state[$p:lk] = 918977                       (: 'validate-with-schematron' ':' 'split-sequence' :)
            or $state[$p:lk] = 918978                       (: 'validate-with-xml-schema' ':' 'split-sequence' :)
            or $state[$p:lk] = 918979                       (: 'variable' ':' 'split-sequence' :)
            or $state[$p:lk] = 918980                       (: 'viewport' ':' 'split-sequence' :)
            or $state[$p:lk] = 918982                       (: 'wrap' ':' 'split-sequence' :)
            or $state[$p:lk] = 918983                       (: 'wrap-sequence' ':' 'split-sequence' :)
            or $state[$p:lk] = 918984                       (: 'www-form-urldecode' ':' 'split-sequence' :)
            or $state[$p:lk] = 918985                       (: 'www-form-urlencode' ':' 'split-sequence' :)
            or $state[$p:lk] = 918986                       (: 'xinclude' ':' 'split-sequence' :)
            or $state[$p:lk] = 918987                       (: 'xquery' ':' 'split-sequence' :)
            or $state[$p:lk] = 918988                       (: 'xsl-formatter' ':' 'split-sequence' :)
            or $state[$p:lk] = 918989                       (: 'xslt' ':' 'split-sequence' :)
            or $state[$p:lk] = 935301                       (: NCName^Token ':' 'step' :)
            or $state[$p:lk] = 935312                       (: 'add-attribute' ':' 'step' :)
            or $state[$p:lk] = 935313                       (: 'add-xml-base' ':' 'step' :)
            or $state[$p:lk] = 935315                       (: 'compare' ':' 'step' :)
            or $state[$p:lk] = 935316                       (: 'count' ':' 'step' :)
            or $state[$p:lk] = 935317                       (: 'default' ':' 'step' :)
            or $state[$p:lk] = 935318                       (: 'delete' ':' 'step' :)
            or $state[$p:lk] = 935319                       (: 'directory-list' ':' 'step' :)
            or $state[$p:lk] = 935321                       (: 'else' ':' 'step' :)
            or $state[$p:lk] = 935323                       (: 'error' ':' 'step' :)
            or $state[$p:lk] = 935324                       (: 'escape-markup' ':' 'step' :)
            or $state[$p:lk] = 935325                       (: 'exec' ':' 'step' :)
            or $state[$p:lk] = 935326                       (: 'filter' ':' 'step' :)
            or $state[$p:lk] = 935327                       (: 'for-each' ':' 'step' :)
            or $state[$p:lk] = 935329                       (: 'hash' ':' 'step' :)
            or $state[$p:lk] = 935330                       (: 'http-request' ':' 'step' :)
            or $state[$p:lk] = 935331                       (: 'identity' ':' 'step' :)
            or $state[$p:lk] = 935332                       (: 'if' ':' 'step' :)
            or $state[$p:lk] = 935333                       (: 'insert' ':' 'step' :)
            or $state[$p:lk] = 935335                       (: 'label-elements' ':' 'step' :)
            or $state[$p:lk] = 935336                       (: 'library' ':' 'step' :)
            or $state[$p:lk] = 935337                       (: 'load' ':' 'step' :)
            or $state[$p:lk] = 935338                       (: 'make-absolute-uris' ':' 'step' :)
            or $state[$p:lk] = 935339                       (: 'namespace' ':' 'step' :)
            or $state[$p:lk] = 935340                       (: 'namespace-rename' ':' 'step' :)
            or $state[$p:lk] = 935341                       (: 'pack' ':' 'step' :)
            or $state[$p:lk] = 935342                       (: 'parameters' ':' 'step' :)
            or $state[$p:lk] = 935344                       (: 'pipeline' ':' 'step' :)
            or $state[$p:lk] = 935346                       (: 'rename' ':' 'step' :)
            or $state[$p:lk] = 935347                       (: 'replace' ':' 'step' :)
            or $state[$p:lk] = 935350                       (: 'set-attributes' ':' 'step' :)
            or $state[$p:lk] = 935351                       (: 'sink' ':' 'step' :)
            or $state[$p:lk] = 935352                       (: 'split-sequence' ':' 'step' :)
            or $state[$p:lk] = 935353                       (: 'step' ':' 'step' :)
            or $state[$p:lk] = 935354                       (: 'store' ':' 'step' :)
            or $state[$p:lk] = 935355                       (: 'string-replace' ':' 'step' :)
            or $state[$p:lk] = 935356                       (: 'try' ':' 'step' :)
            or $state[$p:lk] = 935357                       (: 'unescape-markup' ':' 'step' :)
            or $state[$p:lk] = 935358                       (: 'unwrap' ':' 'step' :)
            or $state[$p:lk] = 935359                       (: 'uuid' ':' 'step' :)
            or $state[$p:lk] = 935360                       (: 'validate-with-relax-ng' ':' 'step' :)
            or $state[$p:lk] = 935361                       (: 'validate-with-schematron' ':' 'step' :)
            or $state[$p:lk] = 935362                       (: 'validate-with-xml-schema' ':' 'step' :)
            or $state[$p:lk] = 935363                       (: 'variable' ':' 'step' :)
            or $state[$p:lk] = 935364                       (: 'viewport' ':' 'step' :)
            or $state[$p:lk] = 935366                       (: 'wrap' ':' 'step' :)
            or $state[$p:lk] = 935367                       (: 'wrap-sequence' ':' 'step' :)
            or $state[$p:lk] = 935368                       (: 'www-form-urldecode' ':' 'step' :)
            or $state[$p:lk] = 935369                       (: 'www-form-urlencode' ':' 'step' :)
            or $state[$p:lk] = 935370                       (: 'xinclude' ':' 'step' :)
            or $state[$p:lk] = 935371                       (: 'xquery' ':' 'step' :)
            or $state[$p:lk] = 935372                       (: 'xsl-formatter' ':' 'step' :)
            or $state[$p:lk] = 935373                       (: 'xslt' ':' 'step' :)
            or $state[$p:lk] = 951685                       (: NCName^Token ':' 'store' :)
            or $state[$p:lk] = 951696                       (: 'add-attribute' ':' 'store' :)
            or $state[$p:lk] = 951697                       (: 'add-xml-base' ':' 'store' :)
            or $state[$p:lk] = 951699                       (: 'compare' ':' 'store' :)
            or $state[$p:lk] = 951700                       (: 'count' ':' 'store' :)
            or $state[$p:lk] = 951701                       (: 'default' ':' 'store' :)
            or $state[$p:lk] = 951702                       (: 'delete' ':' 'store' :)
            or $state[$p:lk] = 951703                       (: 'directory-list' ':' 'store' :)
            or $state[$p:lk] = 951705                       (: 'else' ':' 'store' :)
            or $state[$p:lk] = 951707                       (: 'error' ':' 'store' :)
            or $state[$p:lk] = 951708                       (: 'escape-markup' ':' 'store' :)
            or $state[$p:lk] = 951709                       (: 'exec' ':' 'store' :)
            or $state[$p:lk] = 951710                       (: 'filter' ':' 'store' :)
            or $state[$p:lk] = 951711                       (: 'for-each' ':' 'store' :)
            or $state[$p:lk] = 951713                       (: 'hash' ':' 'store' :)
            or $state[$p:lk] = 951714                       (: 'http-request' ':' 'store' :)
            or $state[$p:lk] = 951715                       (: 'identity' ':' 'store' :)
            or $state[$p:lk] = 951716                       (: 'if' ':' 'store' :)
            or $state[$p:lk] = 951717                       (: 'insert' ':' 'store' :)
            or $state[$p:lk] = 951719                       (: 'label-elements' ':' 'store' :)
            or $state[$p:lk] = 951720                       (: 'library' ':' 'store' :)
            or $state[$p:lk] = 951721                       (: 'load' ':' 'store' :)
            or $state[$p:lk] = 951722                       (: 'make-absolute-uris' ':' 'store' :)
            or $state[$p:lk] = 951723                       (: 'namespace' ':' 'store' :)
            or $state[$p:lk] = 951724                       (: 'namespace-rename' ':' 'store' :)
            or $state[$p:lk] = 951725                       (: 'pack' ':' 'store' :)
            or $state[$p:lk] = 951726                       (: 'parameters' ':' 'store' :)
            or $state[$p:lk] = 951728                       (: 'pipeline' ':' 'store' :)
            or $state[$p:lk] = 951730                       (: 'rename' ':' 'store' :)
            or $state[$p:lk] = 951731                       (: 'replace' ':' 'store' :)
            or $state[$p:lk] = 951734                       (: 'set-attributes' ':' 'store' :)
            or $state[$p:lk] = 951735                       (: 'sink' ':' 'store' :)
            or $state[$p:lk] = 951736                       (: 'split-sequence' ':' 'store' :)
            or $state[$p:lk] = 951737                       (: 'step' ':' 'store' :)
            or $state[$p:lk] = 951738                       (: 'store' ':' 'store' :)
            or $state[$p:lk] = 951739                       (: 'string-replace' ':' 'store' :)
            or $state[$p:lk] = 951740                       (: 'try' ':' 'store' :)
            or $state[$p:lk] = 951741                       (: 'unescape-markup' ':' 'store' :)
            or $state[$p:lk] = 951742                       (: 'unwrap' ':' 'store' :)
            or $state[$p:lk] = 951743                       (: 'uuid' ':' 'store' :)
            or $state[$p:lk] = 951744                       (: 'validate-with-relax-ng' ':' 'store' :)
            or $state[$p:lk] = 951745                       (: 'validate-with-schematron' ':' 'store' :)
            or $state[$p:lk] = 951746                       (: 'validate-with-xml-schema' ':' 'store' :)
            or $state[$p:lk] = 951747                       (: 'variable' ':' 'store' :)
            or $state[$p:lk] = 951748                       (: 'viewport' ':' 'store' :)
            or $state[$p:lk] = 951750                       (: 'wrap' ':' 'store' :)
            or $state[$p:lk] = 951751                       (: 'wrap-sequence' ':' 'store' :)
            or $state[$p:lk] = 951752                       (: 'www-form-urldecode' ':' 'store' :)
            or $state[$p:lk] = 951753                       (: 'www-form-urlencode' ':' 'store' :)
            or $state[$p:lk] = 951754                       (: 'xinclude' ':' 'store' :)
            or $state[$p:lk] = 951755                       (: 'xquery' ':' 'store' :)
            or $state[$p:lk] = 951756                       (: 'xsl-formatter' ':' 'store' :)
            or $state[$p:lk] = 951757                       (: 'xslt' ':' 'store' :)
            or $state[$p:lk] = 968069                       (: NCName^Token ':' 'string-replace' :)
            or $state[$p:lk] = 968080                       (: 'add-attribute' ':' 'string-replace' :)
            or $state[$p:lk] = 968081                       (: 'add-xml-base' ':' 'string-replace' :)
            or $state[$p:lk] = 968083                       (: 'compare' ':' 'string-replace' :)
            or $state[$p:lk] = 968084                       (: 'count' ':' 'string-replace' :)
            or $state[$p:lk] = 968085                       (: 'default' ':' 'string-replace' :)
            or $state[$p:lk] = 968086                       (: 'delete' ':' 'string-replace' :)
            or $state[$p:lk] = 968087                       (: 'directory-list' ':' 'string-replace' :)
            or $state[$p:lk] = 968089                       (: 'else' ':' 'string-replace' :)
            or $state[$p:lk] = 968091                       (: 'error' ':' 'string-replace' :)
            or $state[$p:lk] = 968092                       (: 'escape-markup' ':' 'string-replace' :)
            or $state[$p:lk] = 968093                       (: 'exec' ':' 'string-replace' :)
            or $state[$p:lk] = 968094                       (: 'filter' ':' 'string-replace' :)
            or $state[$p:lk] = 968095                       (: 'for-each' ':' 'string-replace' :)
            or $state[$p:lk] = 968097                       (: 'hash' ':' 'string-replace' :)
            or $state[$p:lk] = 968098                       (: 'http-request' ':' 'string-replace' :)
            or $state[$p:lk] = 968099                       (: 'identity' ':' 'string-replace' :)
            or $state[$p:lk] = 968100                       (: 'if' ':' 'string-replace' :)
            or $state[$p:lk] = 968101                       (: 'insert' ':' 'string-replace' :)
            or $state[$p:lk] = 968103                       (: 'label-elements' ':' 'string-replace' :)
            or $state[$p:lk] = 968104                       (: 'library' ':' 'string-replace' :)
            or $state[$p:lk] = 968105                       (: 'load' ':' 'string-replace' :)
            or $state[$p:lk] = 968106                       (: 'make-absolute-uris' ':' 'string-replace' :)
            or $state[$p:lk] = 968107                       (: 'namespace' ':' 'string-replace' :)
            or $state[$p:lk] = 968108                       (: 'namespace-rename' ':' 'string-replace' :)
            or $state[$p:lk] = 968109                       (: 'pack' ':' 'string-replace' :)
            or $state[$p:lk] = 968110                       (: 'parameters' ':' 'string-replace' :)
            or $state[$p:lk] = 968112                       (: 'pipeline' ':' 'string-replace' :)
            or $state[$p:lk] = 968114                       (: 'rename' ':' 'string-replace' :)
            or $state[$p:lk] = 968115                       (: 'replace' ':' 'string-replace' :)
            or $state[$p:lk] = 968118                       (: 'set-attributes' ':' 'string-replace' :)
            or $state[$p:lk] = 968119                       (: 'sink' ':' 'string-replace' :)
            or $state[$p:lk] = 968120                       (: 'split-sequence' ':' 'string-replace' :)
            or $state[$p:lk] = 968121                       (: 'step' ':' 'string-replace' :)
            or $state[$p:lk] = 968122                       (: 'store' ':' 'string-replace' :)
            or $state[$p:lk] = 968123                       (: 'string-replace' ':' 'string-replace' :)
            or $state[$p:lk] = 968124                       (: 'try' ':' 'string-replace' :)
            or $state[$p:lk] = 968125                       (: 'unescape-markup' ':' 'string-replace' :)
            or $state[$p:lk] = 968126                       (: 'unwrap' ':' 'string-replace' :)
            or $state[$p:lk] = 968127                       (: 'uuid' ':' 'string-replace' :)
            or $state[$p:lk] = 968128                       (: 'validate-with-relax-ng' ':' 'string-replace' :)
            or $state[$p:lk] = 968129                       (: 'validate-with-schematron' ':' 'string-replace' :)
            or $state[$p:lk] = 968130                       (: 'validate-with-xml-schema' ':' 'string-replace' :)
            or $state[$p:lk] = 968131                       (: 'variable' ':' 'string-replace' :)
            or $state[$p:lk] = 968132                       (: 'viewport' ':' 'string-replace' :)
            or $state[$p:lk] = 968134                       (: 'wrap' ':' 'string-replace' :)
            or $state[$p:lk] = 968135                       (: 'wrap-sequence' ':' 'string-replace' :)
            or $state[$p:lk] = 968136                       (: 'www-form-urldecode' ':' 'string-replace' :)
            or $state[$p:lk] = 968137                       (: 'www-form-urlencode' ':' 'string-replace' :)
            or $state[$p:lk] = 968138                       (: 'xinclude' ':' 'string-replace' :)
            or $state[$p:lk] = 968139                       (: 'xquery' ':' 'string-replace' :)
            or $state[$p:lk] = 968140                       (: 'xsl-formatter' ':' 'string-replace' :)
            or $state[$p:lk] = 968141                       (: 'xslt' ':' 'string-replace' :)
            or $state[$p:lk] = 984453                       (: NCName^Token ':' 'try' :)
            or $state[$p:lk] = 984464                       (: 'add-attribute' ':' 'try' :)
            or $state[$p:lk] = 984465                       (: 'add-xml-base' ':' 'try' :)
            or $state[$p:lk] = 984467                       (: 'compare' ':' 'try' :)
            or $state[$p:lk] = 984468                       (: 'count' ':' 'try' :)
            or $state[$p:lk] = 984469                       (: 'default' ':' 'try' :)
            or $state[$p:lk] = 984470                       (: 'delete' ':' 'try' :)
            or $state[$p:lk] = 984471                       (: 'directory-list' ':' 'try' :)
            or $state[$p:lk] = 984473                       (: 'else' ':' 'try' :)
            or $state[$p:lk] = 984475                       (: 'error' ':' 'try' :)
            or $state[$p:lk] = 984476                       (: 'escape-markup' ':' 'try' :)
            or $state[$p:lk] = 984477                       (: 'exec' ':' 'try' :)
            or $state[$p:lk] = 984478                       (: 'filter' ':' 'try' :)
            or $state[$p:lk] = 984479                       (: 'for-each' ':' 'try' :)
            or $state[$p:lk] = 984481                       (: 'hash' ':' 'try' :)
            or $state[$p:lk] = 984482                       (: 'http-request' ':' 'try' :)
            or $state[$p:lk] = 984483                       (: 'identity' ':' 'try' :)
            or $state[$p:lk] = 984484                       (: 'if' ':' 'try' :)
            or $state[$p:lk] = 984485                       (: 'insert' ':' 'try' :)
            or $state[$p:lk] = 984487                       (: 'label-elements' ':' 'try' :)
            or $state[$p:lk] = 984488                       (: 'library' ':' 'try' :)
            or $state[$p:lk] = 984489                       (: 'load' ':' 'try' :)
            or $state[$p:lk] = 984490                       (: 'make-absolute-uris' ':' 'try' :)
            or $state[$p:lk] = 984491                       (: 'namespace' ':' 'try' :)
            or $state[$p:lk] = 984492                       (: 'namespace-rename' ':' 'try' :)
            or $state[$p:lk] = 984493                       (: 'pack' ':' 'try' :)
            or $state[$p:lk] = 984494                       (: 'parameters' ':' 'try' :)
            or $state[$p:lk] = 984496                       (: 'pipeline' ':' 'try' :)
            or $state[$p:lk] = 984498                       (: 'rename' ':' 'try' :)
            or $state[$p:lk] = 984499                       (: 'replace' ':' 'try' :)
            or $state[$p:lk] = 984502                       (: 'set-attributes' ':' 'try' :)
            or $state[$p:lk] = 984503                       (: 'sink' ':' 'try' :)
            or $state[$p:lk] = 984504                       (: 'split-sequence' ':' 'try' :)
            or $state[$p:lk] = 984505                       (: 'step' ':' 'try' :)
            or $state[$p:lk] = 984506                       (: 'store' ':' 'try' :)
            or $state[$p:lk] = 984507                       (: 'string-replace' ':' 'try' :)
            or $state[$p:lk] = 984508                       (: 'try' ':' 'try' :)
            or $state[$p:lk] = 984509                       (: 'unescape-markup' ':' 'try' :)
            or $state[$p:lk] = 984510                       (: 'unwrap' ':' 'try' :)
            or $state[$p:lk] = 984511                       (: 'uuid' ':' 'try' :)
            or $state[$p:lk] = 984512                       (: 'validate-with-relax-ng' ':' 'try' :)
            or $state[$p:lk] = 984513                       (: 'validate-with-schematron' ':' 'try' :)
            or $state[$p:lk] = 984514                       (: 'validate-with-xml-schema' ':' 'try' :)
            or $state[$p:lk] = 984515                       (: 'variable' ':' 'try' :)
            or $state[$p:lk] = 984516                       (: 'viewport' ':' 'try' :)
            or $state[$p:lk] = 984518                       (: 'wrap' ':' 'try' :)
            or $state[$p:lk] = 984519                       (: 'wrap-sequence' ':' 'try' :)
            or $state[$p:lk] = 984520                       (: 'www-form-urldecode' ':' 'try' :)
            or $state[$p:lk] = 984521                       (: 'www-form-urlencode' ':' 'try' :)
            or $state[$p:lk] = 984522                       (: 'xinclude' ':' 'try' :)
            or $state[$p:lk] = 984523                       (: 'xquery' ':' 'try' :)
            or $state[$p:lk] = 984524                       (: 'xsl-formatter' ':' 'try' :)
            or $state[$p:lk] = 984525                       (: 'xslt' ':' 'try' :)
            or $state[$p:lk] = 1000837                      (: NCName^Token ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000848                      (: 'add-attribute' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000849                      (: 'add-xml-base' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000851                      (: 'compare' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000852                      (: 'count' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000853                      (: 'default' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000854                      (: 'delete' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000855                      (: 'directory-list' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000857                      (: 'else' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000859                      (: 'error' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000860                      (: 'escape-markup' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000861                      (: 'exec' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000862                      (: 'filter' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000863                      (: 'for-each' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000865                      (: 'hash' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000866                      (: 'http-request' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000867                      (: 'identity' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000868                      (: 'if' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000869                      (: 'insert' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000871                      (: 'label-elements' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000872                      (: 'library' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000873                      (: 'load' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000874                      (: 'make-absolute-uris' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000875                      (: 'namespace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000876                      (: 'namespace-rename' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000877                      (: 'pack' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000878                      (: 'parameters' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000880                      (: 'pipeline' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000882                      (: 'rename' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000883                      (: 'replace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000886                      (: 'set-attributes' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000887                      (: 'sink' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000888                      (: 'split-sequence' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000889                      (: 'step' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000890                      (: 'store' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000891                      (: 'string-replace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000892                      (: 'try' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000893                      (: 'unescape-markup' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000894                      (: 'unwrap' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000895                      (: 'uuid' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000896                      (: 'validate-with-relax-ng' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000897                      (: 'validate-with-schematron' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000898                      (: 'validate-with-xml-schema' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000899                      (: 'variable' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000900                      (: 'viewport' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000902                      (: 'wrap' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000903                      (: 'wrap-sequence' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000904                      (: 'www-form-urldecode' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000905                      (: 'www-form-urlencode' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000906                      (: 'xinclude' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000907                      (: 'xquery' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000908                      (: 'xsl-formatter' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000909                      (: 'xslt' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1017221                      (: NCName^Token ':' 'unwrap' :)
            or $state[$p:lk] = 1017232                      (: 'add-attribute' ':' 'unwrap' :)
            or $state[$p:lk] = 1017233                      (: 'add-xml-base' ':' 'unwrap' :)
            or $state[$p:lk] = 1017235                      (: 'compare' ':' 'unwrap' :)
            or $state[$p:lk] = 1017236                      (: 'count' ':' 'unwrap' :)
            or $state[$p:lk] = 1017237                      (: 'default' ':' 'unwrap' :)
            or $state[$p:lk] = 1017238                      (: 'delete' ':' 'unwrap' :)
            or $state[$p:lk] = 1017239                      (: 'directory-list' ':' 'unwrap' :)
            or $state[$p:lk] = 1017241                      (: 'else' ':' 'unwrap' :)
            or $state[$p:lk] = 1017243                      (: 'error' ':' 'unwrap' :)
            or $state[$p:lk] = 1017244                      (: 'escape-markup' ':' 'unwrap' :)
            or $state[$p:lk] = 1017245                      (: 'exec' ':' 'unwrap' :)
            or $state[$p:lk] = 1017246                      (: 'filter' ':' 'unwrap' :)
            or $state[$p:lk] = 1017247                      (: 'for-each' ':' 'unwrap' :)
            or $state[$p:lk] = 1017249                      (: 'hash' ':' 'unwrap' :)
            or $state[$p:lk] = 1017250                      (: 'http-request' ':' 'unwrap' :)
            or $state[$p:lk] = 1017251                      (: 'identity' ':' 'unwrap' :)
            or $state[$p:lk] = 1017252                      (: 'if' ':' 'unwrap' :)
            or $state[$p:lk] = 1017253                      (: 'insert' ':' 'unwrap' :)
            or $state[$p:lk] = 1017255                      (: 'label-elements' ':' 'unwrap' :)
            or $state[$p:lk] = 1017256                      (: 'library' ':' 'unwrap' :)
            or $state[$p:lk] = 1017257                      (: 'load' ':' 'unwrap' :)
            or $state[$p:lk] = 1017258                      (: 'make-absolute-uris' ':' 'unwrap' :)
            or $state[$p:lk] = 1017259                      (: 'namespace' ':' 'unwrap' :)
            or $state[$p:lk] = 1017260                      (: 'namespace-rename' ':' 'unwrap' :)
            or $state[$p:lk] = 1017261                      (: 'pack' ':' 'unwrap' :)
            or $state[$p:lk] = 1017262                      (: 'parameters' ':' 'unwrap' :)
            or $state[$p:lk] = 1017264                      (: 'pipeline' ':' 'unwrap' :)
            or $state[$p:lk] = 1017266                      (: 'rename' ':' 'unwrap' :)
            or $state[$p:lk] = 1017267                      (: 'replace' ':' 'unwrap' :)
            or $state[$p:lk] = 1017270                      (: 'set-attributes' ':' 'unwrap' :)
            or $state[$p:lk] = 1017271                      (: 'sink' ':' 'unwrap' :)
            or $state[$p:lk] = 1017272                      (: 'split-sequence' ':' 'unwrap' :)
            or $state[$p:lk] = 1017273                      (: 'step' ':' 'unwrap' :)
            or $state[$p:lk] = 1017274                      (: 'store' ':' 'unwrap' :)
            or $state[$p:lk] = 1017275                      (: 'string-replace' ':' 'unwrap' :)
            or $state[$p:lk] = 1017276                      (: 'try' ':' 'unwrap' :)
            or $state[$p:lk] = 1017277                      (: 'unescape-markup' ':' 'unwrap' :)
            or $state[$p:lk] = 1017278                      (: 'unwrap' ':' 'unwrap' :)
            or $state[$p:lk] = 1017279                      (: 'uuid' ':' 'unwrap' :)
            or $state[$p:lk] = 1017280                      (: 'validate-with-relax-ng' ':' 'unwrap' :)
            or $state[$p:lk] = 1017281                      (: 'validate-with-schematron' ':' 'unwrap' :)
            or $state[$p:lk] = 1017282                      (: 'validate-with-xml-schema' ':' 'unwrap' :)
            or $state[$p:lk] = 1017283                      (: 'variable' ':' 'unwrap' :)
            or $state[$p:lk] = 1017284                      (: 'viewport' ':' 'unwrap' :)
            or $state[$p:lk] = 1017286                      (: 'wrap' ':' 'unwrap' :)
            or $state[$p:lk] = 1017287                      (: 'wrap-sequence' ':' 'unwrap' :)
            or $state[$p:lk] = 1017288                      (: 'www-form-urldecode' ':' 'unwrap' :)
            or $state[$p:lk] = 1017289                      (: 'www-form-urlencode' ':' 'unwrap' :)
            or $state[$p:lk] = 1017290                      (: 'xinclude' ':' 'unwrap' :)
            or $state[$p:lk] = 1017291                      (: 'xquery' ':' 'unwrap' :)
            or $state[$p:lk] = 1017292                      (: 'xsl-formatter' ':' 'unwrap' :)
            or $state[$p:lk] = 1017293                      (: 'xslt' ':' 'unwrap' :)
            or $state[$p:lk] = 1033605                      (: NCName^Token ':' 'uuid' :)
            or $state[$p:lk] = 1033616                      (: 'add-attribute' ':' 'uuid' :)
            or $state[$p:lk] = 1033617                      (: 'add-xml-base' ':' 'uuid' :)
            or $state[$p:lk] = 1033619                      (: 'compare' ':' 'uuid' :)
            or $state[$p:lk] = 1033620                      (: 'count' ':' 'uuid' :)
            or $state[$p:lk] = 1033621                      (: 'default' ':' 'uuid' :)
            or $state[$p:lk] = 1033622                      (: 'delete' ':' 'uuid' :)
            or $state[$p:lk] = 1033623                      (: 'directory-list' ':' 'uuid' :)
            or $state[$p:lk] = 1033625                      (: 'else' ':' 'uuid' :)
            or $state[$p:lk] = 1033627                      (: 'error' ':' 'uuid' :)
            or $state[$p:lk] = 1033628                      (: 'escape-markup' ':' 'uuid' :)
            or $state[$p:lk] = 1033629                      (: 'exec' ':' 'uuid' :)
            or $state[$p:lk] = 1033630                      (: 'filter' ':' 'uuid' :)
            or $state[$p:lk] = 1033631                      (: 'for-each' ':' 'uuid' :)
            or $state[$p:lk] = 1033633                      (: 'hash' ':' 'uuid' :)
            or $state[$p:lk] = 1033634                      (: 'http-request' ':' 'uuid' :)
            or $state[$p:lk] = 1033635                      (: 'identity' ':' 'uuid' :)
            or $state[$p:lk] = 1033636                      (: 'if' ':' 'uuid' :)
            or $state[$p:lk] = 1033637                      (: 'insert' ':' 'uuid' :)
            or $state[$p:lk] = 1033639                      (: 'label-elements' ':' 'uuid' :)
            or $state[$p:lk] = 1033640                      (: 'library' ':' 'uuid' :)
            or $state[$p:lk] = 1033641                      (: 'load' ':' 'uuid' :)
            or $state[$p:lk] = 1033642                      (: 'make-absolute-uris' ':' 'uuid' :)
            or $state[$p:lk] = 1033643                      (: 'namespace' ':' 'uuid' :)
            or $state[$p:lk] = 1033644                      (: 'namespace-rename' ':' 'uuid' :)
            or $state[$p:lk] = 1033645                      (: 'pack' ':' 'uuid' :)
            or $state[$p:lk] = 1033646                      (: 'parameters' ':' 'uuid' :)
            or $state[$p:lk] = 1033648                      (: 'pipeline' ':' 'uuid' :)
            or $state[$p:lk] = 1033650                      (: 'rename' ':' 'uuid' :)
            or $state[$p:lk] = 1033651                      (: 'replace' ':' 'uuid' :)
            or $state[$p:lk] = 1033654                      (: 'set-attributes' ':' 'uuid' :)
            or $state[$p:lk] = 1033655                      (: 'sink' ':' 'uuid' :)
            or $state[$p:lk] = 1033656                      (: 'split-sequence' ':' 'uuid' :)
            or $state[$p:lk] = 1033657                      (: 'step' ':' 'uuid' :)
            or $state[$p:lk] = 1033658                      (: 'store' ':' 'uuid' :)
            or $state[$p:lk] = 1033659                      (: 'string-replace' ':' 'uuid' :)
            or $state[$p:lk] = 1033660                      (: 'try' ':' 'uuid' :)
            or $state[$p:lk] = 1033661                      (: 'unescape-markup' ':' 'uuid' :)
            or $state[$p:lk] = 1033662                      (: 'unwrap' ':' 'uuid' :)
            or $state[$p:lk] = 1033663                      (: 'uuid' ':' 'uuid' :)
            or $state[$p:lk] = 1033664                      (: 'validate-with-relax-ng' ':' 'uuid' :)
            or $state[$p:lk] = 1033665                      (: 'validate-with-schematron' ':' 'uuid' :)
            or $state[$p:lk] = 1033666                      (: 'validate-with-xml-schema' ':' 'uuid' :)
            or $state[$p:lk] = 1033667                      (: 'variable' ':' 'uuid' :)
            or $state[$p:lk] = 1033668                      (: 'viewport' ':' 'uuid' :)
            or $state[$p:lk] = 1033670                      (: 'wrap' ':' 'uuid' :)
            or $state[$p:lk] = 1033671                      (: 'wrap-sequence' ':' 'uuid' :)
            or $state[$p:lk] = 1033672                      (: 'www-form-urldecode' ':' 'uuid' :)
            or $state[$p:lk] = 1033673                      (: 'www-form-urlencode' ':' 'uuid' :)
            or $state[$p:lk] = 1033674                      (: 'xinclude' ':' 'uuid' :)
            or $state[$p:lk] = 1033675                      (: 'xquery' ':' 'uuid' :)
            or $state[$p:lk] = 1033676                      (: 'xsl-formatter' ':' 'uuid' :)
            or $state[$p:lk] = 1033677                      (: 'xslt' ':' 'uuid' :)
            or $state[$p:lk] = 1049989                      (: NCName^Token ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050000                      (: 'add-attribute' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050001                      (: 'add-xml-base' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050003                      (: 'compare' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050004                      (: 'count' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050005                      (: 'default' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050006                      (: 'delete' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050007                      (: 'directory-list' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050009                      (: 'else' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050011                      (: 'error' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050012                      (: 'escape-markup' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050013                      (: 'exec' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050014                      (: 'filter' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050015                      (: 'for-each' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050017                      (: 'hash' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050018                      (: 'http-request' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050019                      (: 'identity' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050020                      (: 'if' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050021                      (: 'insert' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050023                      (: 'label-elements' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050024                      (: 'library' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050025                      (: 'load' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050026                      (: 'make-absolute-uris' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050027                      (: 'namespace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050028                      (: 'namespace-rename' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050029                      (: 'pack' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050030                      (: 'parameters' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050032                      (: 'pipeline' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050034                      (: 'rename' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050035                      (: 'replace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050038                      (: 'set-attributes' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050039                      (: 'sink' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050040                      (: 'split-sequence' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050041                      (: 'step' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050042                      (: 'store' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050043                      (: 'string-replace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050044                      (: 'try' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050045                      (: 'unescape-markup' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050046                      (: 'unwrap' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050047                      (: 'uuid' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050048                      (: 'validate-with-relax-ng' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050049                      (: 'validate-with-schematron' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050050                      (: 'validate-with-xml-schema' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050051                      (: 'variable' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050052                      (: 'viewport' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050054                      (: 'wrap' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050055                      (: 'wrap-sequence' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050056                      (: 'www-form-urldecode' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050057                      (: 'www-form-urlencode' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050058                      (: 'xinclude' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050059                      (: 'xquery' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050060                      (: 'xsl-formatter' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050061                      (: 'xslt' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1066373                      (: NCName^Token ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066384                      (: 'add-attribute' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066385                      (: 'add-xml-base' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066387                      (: 'compare' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066388                      (: 'count' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066389                      (: 'default' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066390                      (: 'delete' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066391                      (: 'directory-list' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066393                      (: 'else' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066395                      (: 'error' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066396                      (: 'escape-markup' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066397                      (: 'exec' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066398                      (: 'filter' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066399                      (: 'for-each' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066401                      (: 'hash' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066402                      (: 'http-request' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066403                      (: 'identity' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066404                      (: 'if' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066405                      (: 'insert' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066407                      (: 'label-elements' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066408                      (: 'library' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066409                      (: 'load' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066410                      (: 'make-absolute-uris' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066411                      (: 'namespace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066412                      (: 'namespace-rename' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066413                      (: 'pack' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066414                      (: 'parameters' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066416                      (: 'pipeline' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066418                      (: 'rename' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066419                      (: 'replace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066422                      (: 'set-attributes' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066423                      (: 'sink' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066424                      (: 'split-sequence' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066425                      (: 'step' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066426                      (: 'store' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066427                      (: 'string-replace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066428                      (: 'try' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066429                      (: 'unescape-markup' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066430                      (: 'unwrap' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066431                      (: 'uuid' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066432                      (: 'validate-with-relax-ng' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066433                      (: 'validate-with-schematron' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066434                      (: 'validate-with-xml-schema' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066435                      (: 'variable' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066436                      (: 'viewport' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066438                      (: 'wrap' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066439                      (: 'wrap-sequence' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066440                      (: 'www-form-urldecode' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066441                      (: 'www-form-urlencode' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066442                      (: 'xinclude' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066443                      (: 'xquery' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066444                      (: 'xsl-formatter' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066445                      (: 'xslt' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1082757                      (: NCName^Token ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082768                      (: 'add-attribute' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082769                      (: 'add-xml-base' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082771                      (: 'compare' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082772                      (: 'count' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082773                      (: 'default' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082774                      (: 'delete' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082775                      (: 'directory-list' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082777                      (: 'else' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082779                      (: 'error' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082780                      (: 'escape-markup' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082781                      (: 'exec' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082782                      (: 'filter' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082783                      (: 'for-each' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082785                      (: 'hash' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082786                      (: 'http-request' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082787                      (: 'identity' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082788                      (: 'if' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082789                      (: 'insert' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082791                      (: 'label-elements' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082792                      (: 'library' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082793                      (: 'load' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082794                      (: 'make-absolute-uris' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082795                      (: 'namespace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082796                      (: 'namespace-rename' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082797                      (: 'pack' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082798                      (: 'parameters' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082800                      (: 'pipeline' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082802                      (: 'rename' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082803                      (: 'replace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082806                      (: 'set-attributes' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082807                      (: 'sink' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082808                      (: 'split-sequence' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082809                      (: 'step' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082810                      (: 'store' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082811                      (: 'string-replace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082812                      (: 'try' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082813                      (: 'unescape-markup' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082814                      (: 'unwrap' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082815                      (: 'uuid' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082816                      (: 'validate-with-relax-ng' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082817                      (: 'validate-with-schematron' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082818                      (: 'validate-with-xml-schema' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082819                      (: 'variable' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082820                      (: 'viewport' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082822                      (: 'wrap' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082823                      (: 'wrap-sequence' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082824                      (: 'www-form-urldecode' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082825                      (: 'www-form-urlencode' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082826                      (: 'xinclude' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082827                      (: 'xquery' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082828                      (: 'xsl-formatter' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082829                      (: 'xslt' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1099141                      (: NCName^Token ':' 'variable' :)
            or $state[$p:lk] = 1099152                      (: 'add-attribute' ':' 'variable' :)
            or $state[$p:lk] = 1099153                      (: 'add-xml-base' ':' 'variable' :)
            or $state[$p:lk] = 1099155                      (: 'compare' ':' 'variable' :)
            or $state[$p:lk] = 1099156                      (: 'count' ':' 'variable' :)
            or $state[$p:lk] = 1099157                      (: 'default' ':' 'variable' :)
            or $state[$p:lk] = 1099158                      (: 'delete' ':' 'variable' :)
            or $state[$p:lk] = 1099159                      (: 'directory-list' ':' 'variable' :)
            or $state[$p:lk] = 1099161                      (: 'else' ':' 'variable' :)
            or $state[$p:lk] = 1099163                      (: 'error' ':' 'variable' :)
            or $state[$p:lk] = 1099164                      (: 'escape-markup' ':' 'variable' :)
            or $state[$p:lk] = 1099165                      (: 'exec' ':' 'variable' :)
            or $state[$p:lk] = 1099166                      (: 'filter' ':' 'variable' :)
            or $state[$p:lk] = 1099167                      (: 'for-each' ':' 'variable' :)
            or $state[$p:lk] = 1099169                      (: 'hash' ':' 'variable' :)
            or $state[$p:lk] = 1099170                      (: 'http-request' ':' 'variable' :)
            or $state[$p:lk] = 1099171                      (: 'identity' ':' 'variable' :)
            or $state[$p:lk] = 1099172                      (: 'if' ':' 'variable' :)
            or $state[$p:lk] = 1099173                      (: 'insert' ':' 'variable' :)
            or $state[$p:lk] = 1099175                      (: 'label-elements' ':' 'variable' :)
            or $state[$p:lk] = 1099176                      (: 'library' ':' 'variable' :)
            or $state[$p:lk] = 1099177                      (: 'load' ':' 'variable' :)
            or $state[$p:lk] = 1099178                      (: 'make-absolute-uris' ':' 'variable' :)
            or $state[$p:lk] = 1099179                      (: 'namespace' ':' 'variable' :)
            or $state[$p:lk] = 1099180                      (: 'namespace-rename' ':' 'variable' :)
            or $state[$p:lk] = 1099181                      (: 'pack' ':' 'variable' :)
            or $state[$p:lk] = 1099182                      (: 'parameters' ':' 'variable' :)
            or $state[$p:lk] = 1099184                      (: 'pipeline' ':' 'variable' :)
            or $state[$p:lk] = 1099186                      (: 'rename' ':' 'variable' :)
            or $state[$p:lk] = 1099187                      (: 'replace' ':' 'variable' :)
            or $state[$p:lk] = 1099190                      (: 'set-attributes' ':' 'variable' :)
            or $state[$p:lk] = 1099191                      (: 'sink' ':' 'variable' :)
            or $state[$p:lk] = 1099192                      (: 'split-sequence' ':' 'variable' :)
            or $state[$p:lk] = 1099193                      (: 'step' ':' 'variable' :)
            or $state[$p:lk] = 1099194                      (: 'store' ':' 'variable' :)
            or $state[$p:lk] = 1099195                      (: 'string-replace' ':' 'variable' :)
            or $state[$p:lk] = 1099196                      (: 'try' ':' 'variable' :)
            or $state[$p:lk] = 1099197                      (: 'unescape-markup' ':' 'variable' :)
            or $state[$p:lk] = 1099198                      (: 'unwrap' ':' 'variable' :)
            or $state[$p:lk] = 1099199                      (: 'uuid' ':' 'variable' :)
            or $state[$p:lk] = 1099200                      (: 'validate-with-relax-ng' ':' 'variable' :)
            or $state[$p:lk] = 1099201                      (: 'validate-with-schematron' ':' 'variable' :)
            or $state[$p:lk] = 1099202                      (: 'validate-with-xml-schema' ':' 'variable' :)
            or $state[$p:lk] = 1099203                      (: 'variable' ':' 'variable' :)
            or $state[$p:lk] = 1099204                      (: 'viewport' ':' 'variable' :)
            or $state[$p:lk] = 1099206                      (: 'wrap' ':' 'variable' :)
            or $state[$p:lk] = 1099207                      (: 'wrap-sequence' ':' 'variable' :)
            or $state[$p:lk] = 1099208                      (: 'www-form-urldecode' ':' 'variable' :)
            or $state[$p:lk] = 1099209                      (: 'www-form-urlencode' ':' 'variable' :)
            or $state[$p:lk] = 1099210                      (: 'xinclude' ':' 'variable' :)
            or $state[$p:lk] = 1099211                      (: 'xquery' ':' 'variable' :)
            or $state[$p:lk] = 1099212                      (: 'xsl-formatter' ':' 'variable' :)
            or $state[$p:lk] = 1099213                      (: 'xslt' ':' 'variable' :)
            or $state[$p:lk] = 1099269                      (: NCName^Token '=' 'variable' :)
            or $state[$p:lk] = 1099280                      (: 'add-attribute' '=' 'variable' :)
            or $state[$p:lk] = 1099281                      (: 'add-xml-base' '=' 'variable' :)
            or $state[$p:lk] = 1099283                      (: 'compare' '=' 'variable' :)
            or $state[$p:lk] = 1099284                      (: 'count' '=' 'variable' :)
            or $state[$p:lk] = 1099285                      (: 'default' '=' 'variable' :)
            or $state[$p:lk] = 1099286                      (: 'delete' '=' 'variable' :)
            or $state[$p:lk] = 1099287                      (: 'directory-list' '=' 'variable' :)
            or $state[$p:lk] = 1099289                      (: 'else' '=' 'variable' :)
            or $state[$p:lk] = 1099291                      (: 'error' '=' 'variable' :)
            or $state[$p:lk] = 1099292                      (: 'escape-markup' '=' 'variable' :)
            or $state[$p:lk] = 1099293                      (: 'exec' '=' 'variable' :)
            or $state[$p:lk] = 1099294                      (: 'filter' '=' 'variable' :)
            or $state[$p:lk] = 1099295                      (: 'for-each' '=' 'variable' :)
            or $state[$p:lk] = 1099297                      (: 'hash' '=' 'variable' :)
            or $state[$p:lk] = 1099298                      (: 'http-request' '=' 'variable' :)
            or $state[$p:lk] = 1099299                      (: 'identity' '=' 'variable' :)
            or $state[$p:lk] = 1099300                      (: 'if' '=' 'variable' :)
            or $state[$p:lk] = 1099301                      (: 'insert' '=' 'variable' :)
            or $state[$p:lk] = 1099303                      (: 'label-elements' '=' 'variable' :)
            or $state[$p:lk] = 1099304                      (: 'library' '=' 'variable' :)
            or $state[$p:lk] = 1099305                      (: 'load' '=' 'variable' :)
            or $state[$p:lk] = 1099306                      (: 'make-absolute-uris' '=' 'variable' :)
            or $state[$p:lk] = 1099307                      (: 'namespace' '=' 'variable' :)
            or $state[$p:lk] = 1099308                      (: 'namespace-rename' '=' 'variable' :)
            or $state[$p:lk] = 1099309                      (: 'pack' '=' 'variable' :)
            or $state[$p:lk] = 1099310                      (: 'parameters' '=' 'variable' :)
            or $state[$p:lk] = 1099312                      (: 'pipeline' '=' 'variable' :)
            or $state[$p:lk] = 1099314                      (: 'rename' '=' 'variable' :)
            or $state[$p:lk] = 1099315                      (: 'replace' '=' 'variable' :)
            or $state[$p:lk] = 1099318                      (: 'set-attributes' '=' 'variable' :)
            or $state[$p:lk] = 1099319                      (: 'sink' '=' 'variable' :)
            or $state[$p:lk] = 1099320                      (: 'split-sequence' '=' 'variable' :)
            or $state[$p:lk] = 1099321                      (: 'step' '=' 'variable' :)
            or $state[$p:lk] = 1099322                      (: 'store' '=' 'variable' :)
            or $state[$p:lk] = 1099323                      (: 'string-replace' '=' 'variable' :)
            or $state[$p:lk] = 1099324                      (: 'try' '=' 'variable' :)
            or $state[$p:lk] = 1099325                      (: 'unescape-markup' '=' 'variable' :)
            or $state[$p:lk] = 1099326                      (: 'unwrap' '=' 'variable' :)
            or $state[$p:lk] = 1099327                      (: 'uuid' '=' 'variable' :)
            or $state[$p:lk] = 1099328                      (: 'validate-with-relax-ng' '=' 'variable' :)
            or $state[$p:lk] = 1099329                      (: 'validate-with-schematron' '=' 'variable' :)
            or $state[$p:lk] = 1099330                      (: 'validate-with-xml-schema' '=' 'variable' :)
            or $state[$p:lk] = 1099331                      (: 'variable' '=' 'variable' :)
            or $state[$p:lk] = 1099332                      (: 'viewport' '=' 'variable' :)
            or $state[$p:lk] = 1099334                      (: 'wrap' '=' 'variable' :)
            or $state[$p:lk] = 1099335                      (: 'wrap-sequence' '=' 'variable' :)
            or $state[$p:lk] = 1099336                      (: 'www-form-urldecode' '=' 'variable' :)
            or $state[$p:lk] = 1099337                      (: 'www-form-urlencode' '=' 'variable' :)
            or $state[$p:lk] = 1099338                      (: 'xinclude' '=' 'variable' :)
            or $state[$p:lk] = 1099339                      (: 'xquery' '=' 'variable' :)
            or $state[$p:lk] = 1099340                      (: 'xsl-formatter' '=' 'variable' :)
            or $state[$p:lk] = 1099341                      (: 'xslt' '=' 'variable' :)
            or $state[$p:lk] = 1115525                      (: NCName^Token ':' 'viewport' :)
            or $state[$p:lk] = 1115536                      (: 'add-attribute' ':' 'viewport' :)
            or $state[$p:lk] = 1115537                      (: 'add-xml-base' ':' 'viewport' :)
            or $state[$p:lk] = 1115539                      (: 'compare' ':' 'viewport' :)
            or $state[$p:lk] = 1115540                      (: 'count' ':' 'viewport' :)
            or $state[$p:lk] = 1115541                      (: 'default' ':' 'viewport' :)
            or $state[$p:lk] = 1115542                      (: 'delete' ':' 'viewport' :)
            or $state[$p:lk] = 1115543                      (: 'directory-list' ':' 'viewport' :)
            or $state[$p:lk] = 1115545                      (: 'else' ':' 'viewport' :)
            or $state[$p:lk] = 1115547                      (: 'error' ':' 'viewport' :)
            or $state[$p:lk] = 1115548                      (: 'escape-markup' ':' 'viewport' :)
            or $state[$p:lk] = 1115549                      (: 'exec' ':' 'viewport' :)
            or $state[$p:lk] = 1115550                      (: 'filter' ':' 'viewport' :)
            or $state[$p:lk] = 1115551                      (: 'for-each' ':' 'viewport' :)
            or $state[$p:lk] = 1115553                      (: 'hash' ':' 'viewport' :)
            or $state[$p:lk] = 1115554                      (: 'http-request' ':' 'viewport' :)
            or $state[$p:lk] = 1115555                      (: 'identity' ':' 'viewport' :)
            or $state[$p:lk] = 1115556                      (: 'if' ':' 'viewport' :)
            or $state[$p:lk] = 1115557                      (: 'insert' ':' 'viewport' :)
            or $state[$p:lk] = 1115559                      (: 'label-elements' ':' 'viewport' :)
            or $state[$p:lk] = 1115560                      (: 'library' ':' 'viewport' :)
            or $state[$p:lk] = 1115561                      (: 'load' ':' 'viewport' :)
            or $state[$p:lk] = 1115562                      (: 'make-absolute-uris' ':' 'viewport' :)
            or $state[$p:lk] = 1115563                      (: 'namespace' ':' 'viewport' :)
            or $state[$p:lk] = 1115564                      (: 'namespace-rename' ':' 'viewport' :)
            or $state[$p:lk] = 1115565                      (: 'pack' ':' 'viewport' :)
            or $state[$p:lk] = 1115566                      (: 'parameters' ':' 'viewport' :)
            or $state[$p:lk] = 1115568                      (: 'pipeline' ':' 'viewport' :)
            or $state[$p:lk] = 1115570                      (: 'rename' ':' 'viewport' :)
            or $state[$p:lk] = 1115571                      (: 'replace' ':' 'viewport' :)
            or $state[$p:lk] = 1115574                      (: 'set-attributes' ':' 'viewport' :)
            or $state[$p:lk] = 1115575                      (: 'sink' ':' 'viewport' :)
            or $state[$p:lk] = 1115576                      (: 'split-sequence' ':' 'viewport' :)
            or $state[$p:lk] = 1115577                      (: 'step' ':' 'viewport' :)
            or $state[$p:lk] = 1115578                      (: 'store' ':' 'viewport' :)
            or $state[$p:lk] = 1115579                      (: 'string-replace' ':' 'viewport' :)
            or $state[$p:lk] = 1115580                      (: 'try' ':' 'viewport' :)
            or $state[$p:lk] = 1115581                      (: 'unescape-markup' ':' 'viewport' :)
            or $state[$p:lk] = 1115582                      (: 'unwrap' ':' 'viewport' :)
            or $state[$p:lk] = 1115583                      (: 'uuid' ':' 'viewport' :)
            or $state[$p:lk] = 1115584                      (: 'validate-with-relax-ng' ':' 'viewport' :)
            or $state[$p:lk] = 1115585                      (: 'validate-with-schematron' ':' 'viewport' :)
            or $state[$p:lk] = 1115586                      (: 'validate-with-xml-schema' ':' 'viewport' :)
            or $state[$p:lk] = 1115587                      (: 'variable' ':' 'viewport' :)
            or $state[$p:lk] = 1115588                      (: 'viewport' ':' 'viewport' :)
            or $state[$p:lk] = 1115590                      (: 'wrap' ':' 'viewport' :)
            or $state[$p:lk] = 1115591                      (: 'wrap-sequence' ':' 'viewport' :)
            or $state[$p:lk] = 1115592                      (: 'www-form-urldecode' ':' 'viewport' :)
            or $state[$p:lk] = 1115593                      (: 'www-form-urlencode' ':' 'viewport' :)
            or $state[$p:lk] = 1115594                      (: 'xinclude' ':' 'viewport' :)
            or $state[$p:lk] = 1115595                      (: 'xquery' ':' 'viewport' :)
            or $state[$p:lk] = 1115596                      (: 'xsl-formatter' ':' 'viewport' :)
            or $state[$p:lk] = 1115597                      (: 'xslt' ':' 'viewport' :)
            or $state[$p:lk] = 1148293                      (: NCName^Token ':' 'wrap' :)
            or $state[$p:lk] = 1148304                      (: 'add-attribute' ':' 'wrap' :)
            or $state[$p:lk] = 1148305                      (: 'add-xml-base' ':' 'wrap' :)
            or $state[$p:lk] = 1148307                      (: 'compare' ':' 'wrap' :)
            or $state[$p:lk] = 1148308                      (: 'count' ':' 'wrap' :)
            or $state[$p:lk] = 1148309                      (: 'default' ':' 'wrap' :)
            or $state[$p:lk] = 1148310                      (: 'delete' ':' 'wrap' :)
            or $state[$p:lk] = 1148311                      (: 'directory-list' ':' 'wrap' :)
            or $state[$p:lk] = 1148313                      (: 'else' ':' 'wrap' :)
            or $state[$p:lk] = 1148315                      (: 'error' ':' 'wrap' :)
            or $state[$p:lk] = 1148316                      (: 'escape-markup' ':' 'wrap' :)
            or $state[$p:lk] = 1148317                      (: 'exec' ':' 'wrap' :)
            or $state[$p:lk] = 1148318                      (: 'filter' ':' 'wrap' :)
            or $state[$p:lk] = 1148319                      (: 'for-each' ':' 'wrap' :)
            or $state[$p:lk] = 1148321                      (: 'hash' ':' 'wrap' :)
            or $state[$p:lk] = 1148322                      (: 'http-request' ':' 'wrap' :)
            or $state[$p:lk] = 1148323                      (: 'identity' ':' 'wrap' :)
            or $state[$p:lk] = 1148324                      (: 'if' ':' 'wrap' :)
            or $state[$p:lk] = 1148325                      (: 'insert' ':' 'wrap' :)
            or $state[$p:lk] = 1148327                      (: 'label-elements' ':' 'wrap' :)
            or $state[$p:lk] = 1148328                      (: 'library' ':' 'wrap' :)
            or $state[$p:lk] = 1148329                      (: 'load' ':' 'wrap' :)
            or $state[$p:lk] = 1148330                      (: 'make-absolute-uris' ':' 'wrap' :)
            or $state[$p:lk] = 1148331                      (: 'namespace' ':' 'wrap' :)
            or $state[$p:lk] = 1148332                      (: 'namespace-rename' ':' 'wrap' :)
            or $state[$p:lk] = 1148333                      (: 'pack' ':' 'wrap' :)
            or $state[$p:lk] = 1148334                      (: 'parameters' ':' 'wrap' :)
            or $state[$p:lk] = 1148336                      (: 'pipeline' ':' 'wrap' :)
            or $state[$p:lk] = 1148338                      (: 'rename' ':' 'wrap' :)
            or $state[$p:lk] = 1148339                      (: 'replace' ':' 'wrap' :)
            or $state[$p:lk] = 1148342                      (: 'set-attributes' ':' 'wrap' :)
            or $state[$p:lk] = 1148343                      (: 'sink' ':' 'wrap' :)
            or $state[$p:lk] = 1148344                      (: 'split-sequence' ':' 'wrap' :)
            or $state[$p:lk] = 1148345                      (: 'step' ':' 'wrap' :)
            or $state[$p:lk] = 1148346                      (: 'store' ':' 'wrap' :)
            or $state[$p:lk] = 1148347                      (: 'string-replace' ':' 'wrap' :)
            or $state[$p:lk] = 1148348                      (: 'try' ':' 'wrap' :)
            or $state[$p:lk] = 1148349                      (: 'unescape-markup' ':' 'wrap' :)
            or $state[$p:lk] = 1148350                      (: 'unwrap' ':' 'wrap' :)
            or $state[$p:lk] = 1148351                      (: 'uuid' ':' 'wrap' :)
            or $state[$p:lk] = 1148352                      (: 'validate-with-relax-ng' ':' 'wrap' :)
            or $state[$p:lk] = 1148353                      (: 'validate-with-schematron' ':' 'wrap' :)
            or $state[$p:lk] = 1148354                      (: 'validate-with-xml-schema' ':' 'wrap' :)
            or $state[$p:lk] = 1148355                      (: 'variable' ':' 'wrap' :)
            or $state[$p:lk] = 1148356                      (: 'viewport' ':' 'wrap' :)
            or $state[$p:lk] = 1148358                      (: 'wrap' ':' 'wrap' :)
            or $state[$p:lk] = 1148359                      (: 'wrap-sequence' ':' 'wrap' :)
            or $state[$p:lk] = 1148360                      (: 'www-form-urldecode' ':' 'wrap' :)
            or $state[$p:lk] = 1148361                      (: 'www-form-urlencode' ':' 'wrap' :)
            or $state[$p:lk] = 1148362                      (: 'xinclude' ':' 'wrap' :)
            or $state[$p:lk] = 1148363                      (: 'xquery' ':' 'wrap' :)
            or $state[$p:lk] = 1148364                      (: 'xsl-formatter' ':' 'wrap' :)
            or $state[$p:lk] = 1148365                      (: 'xslt' ':' 'wrap' :)
            or $state[$p:lk] = 1164677                      (: NCName^Token ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164688                      (: 'add-attribute' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164689                      (: 'add-xml-base' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164691                      (: 'compare' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164692                      (: 'count' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164693                      (: 'default' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164694                      (: 'delete' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164695                      (: 'directory-list' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164697                      (: 'else' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164699                      (: 'error' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164700                      (: 'escape-markup' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164701                      (: 'exec' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164702                      (: 'filter' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164703                      (: 'for-each' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164705                      (: 'hash' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164706                      (: 'http-request' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164707                      (: 'identity' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164708                      (: 'if' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164709                      (: 'insert' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164711                      (: 'label-elements' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164712                      (: 'library' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164713                      (: 'load' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164714                      (: 'make-absolute-uris' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164715                      (: 'namespace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164716                      (: 'namespace-rename' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164717                      (: 'pack' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164718                      (: 'parameters' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164720                      (: 'pipeline' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164722                      (: 'rename' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164723                      (: 'replace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164726                      (: 'set-attributes' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164727                      (: 'sink' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164728                      (: 'split-sequence' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164729                      (: 'step' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164730                      (: 'store' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164731                      (: 'string-replace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164732                      (: 'try' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164733                      (: 'unescape-markup' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164734                      (: 'unwrap' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164735                      (: 'uuid' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164736                      (: 'validate-with-relax-ng' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164737                      (: 'validate-with-schematron' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164738                      (: 'validate-with-xml-schema' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164739                      (: 'variable' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164740                      (: 'viewport' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164742                      (: 'wrap' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164743                      (: 'wrap-sequence' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164744                      (: 'www-form-urldecode' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164745                      (: 'www-form-urlencode' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164746                      (: 'xinclude' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164747                      (: 'xquery' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164748                      (: 'xsl-formatter' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164749                      (: 'xslt' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1181061                      (: NCName^Token ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181072                      (: 'add-attribute' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181073                      (: 'add-xml-base' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181075                      (: 'compare' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181076                      (: 'count' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181077                      (: 'default' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181078                      (: 'delete' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181079                      (: 'directory-list' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181081                      (: 'else' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181083                      (: 'error' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181084                      (: 'escape-markup' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181085                      (: 'exec' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181086                      (: 'filter' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181087                      (: 'for-each' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181089                      (: 'hash' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181090                      (: 'http-request' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181091                      (: 'identity' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181092                      (: 'if' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181093                      (: 'insert' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181095                      (: 'label-elements' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181096                      (: 'library' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181097                      (: 'load' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181098                      (: 'make-absolute-uris' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181099                      (: 'namespace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181100                      (: 'namespace-rename' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181101                      (: 'pack' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181102                      (: 'parameters' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181104                      (: 'pipeline' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181106                      (: 'rename' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181107                      (: 'replace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181110                      (: 'set-attributes' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181111                      (: 'sink' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181112                      (: 'split-sequence' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181113                      (: 'step' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181114                      (: 'store' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181115                      (: 'string-replace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181116                      (: 'try' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181117                      (: 'unescape-markup' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181118                      (: 'unwrap' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181119                      (: 'uuid' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181120                      (: 'validate-with-relax-ng' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181121                      (: 'validate-with-schematron' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181122                      (: 'validate-with-xml-schema' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181123                      (: 'variable' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181124                      (: 'viewport' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181126                      (: 'wrap' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181127                      (: 'wrap-sequence' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181128                      (: 'www-form-urldecode' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181129                      (: 'www-form-urlencode' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181130                      (: 'xinclude' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181131                      (: 'xquery' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181132                      (: 'xsl-formatter' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181133                      (: 'xslt' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1197445                      (: NCName^Token ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197456                      (: 'add-attribute' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197457                      (: 'add-xml-base' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197459                      (: 'compare' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197460                      (: 'count' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197461                      (: 'default' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197462                      (: 'delete' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197463                      (: 'directory-list' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197465                      (: 'else' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197467                      (: 'error' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197468                      (: 'escape-markup' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197469                      (: 'exec' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197470                      (: 'filter' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197471                      (: 'for-each' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197473                      (: 'hash' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197474                      (: 'http-request' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197475                      (: 'identity' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197476                      (: 'if' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197477                      (: 'insert' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197479                      (: 'label-elements' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197480                      (: 'library' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197481                      (: 'load' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197482                      (: 'make-absolute-uris' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197483                      (: 'namespace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197484                      (: 'namespace-rename' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197485                      (: 'pack' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197486                      (: 'parameters' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197488                      (: 'pipeline' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197490                      (: 'rename' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197491                      (: 'replace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197494                      (: 'set-attributes' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197495                      (: 'sink' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197496                      (: 'split-sequence' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197497                      (: 'step' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197498                      (: 'store' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197499                      (: 'string-replace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197500                      (: 'try' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197501                      (: 'unescape-markup' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197502                      (: 'unwrap' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197503                      (: 'uuid' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197504                      (: 'validate-with-relax-ng' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197505                      (: 'validate-with-schematron' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197506                      (: 'validate-with-xml-schema' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197507                      (: 'variable' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197508                      (: 'viewport' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197510                      (: 'wrap' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197511                      (: 'wrap-sequence' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197512                      (: 'www-form-urldecode' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197513                      (: 'www-form-urlencode' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197514                      (: 'xinclude' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197515                      (: 'xquery' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197516                      (: 'xsl-formatter' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197517                      (: 'xslt' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1213829                      (: NCName^Token ':' 'xinclude' :)
            or $state[$p:lk] = 1213840                      (: 'add-attribute' ':' 'xinclude' :)
            or $state[$p:lk] = 1213841                      (: 'add-xml-base' ':' 'xinclude' :)
            or $state[$p:lk] = 1213843                      (: 'compare' ':' 'xinclude' :)
            or $state[$p:lk] = 1213844                      (: 'count' ':' 'xinclude' :)
            or $state[$p:lk] = 1213845                      (: 'default' ':' 'xinclude' :)
            or $state[$p:lk] = 1213846                      (: 'delete' ':' 'xinclude' :)
            or $state[$p:lk] = 1213847                      (: 'directory-list' ':' 'xinclude' :)
            or $state[$p:lk] = 1213849                      (: 'else' ':' 'xinclude' :)
            or $state[$p:lk] = 1213851                      (: 'error' ':' 'xinclude' :)
            or $state[$p:lk] = 1213852                      (: 'escape-markup' ':' 'xinclude' :)
            or $state[$p:lk] = 1213853                      (: 'exec' ':' 'xinclude' :)
            or $state[$p:lk] = 1213854                      (: 'filter' ':' 'xinclude' :)
            or $state[$p:lk] = 1213855                      (: 'for-each' ':' 'xinclude' :)
            or $state[$p:lk] = 1213857                      (: 'hash' ':' 'xinclude' :)
            or $state[$p:lk] = 1213858                      (: 'http-request' ':' 'xinclude' :)
            or $state[$p:lk] = 1213859                      (: 'identity' ':' 'xinclude' :)
            or $state[$p:lk] = 1213860                      (: 'if' ':' 'xinclude' :)
            or $state[$p:lk] = 1213861                      (: 'insert' ':' 'xinclude' :)
            or $state[$p:lk] = 1213863                      (: 'label-elements' ':' 'xinclude' :)
            or $state[$p:lk] = 1213864                      (: 'library' ':' 'xinclude' :)
            or $state[$p:lk] = 1213865                      (: 'load' ':' 'xinclude' :)
            or $state[$p:lk] = 1213866                      (: 'make-absolute-uris' ':' 'xinclude' :)
            or $state[$p:lk] = 1213867                      (: 'namespace' ':' 'xinclude' :)
            or $state[$p:lk] = 1213868                      (: 'namespace-rename' ':' 'xinclude' :)
            or $state[$p:lk] = 1213869                      (: 'pack' ':' 'xinclude' :)
            or $state[$p:lk] = 1213870                      (: 'parameters' ':' 'xinclude' :)
            or $state[$p:lk] = 1213872                      (: 'pipeline' ':' 'xinclude' :)
            or $state[$p:lk] = 1213874                      (: 'rename' ':' 'xinclude' :)
            or $state[$p:lk] = 1213875                      (: 'replace' ':' 'xinclude' :)
            or $state[$p:lk] = 1213878                      (: 'set-attributes' ':' 'xinclude' :)
            or $state[$p:lk] = 1213879                      (: 'sink' ':' 'xinclude' :)
            or $state[$p:lk] = 1213880                      (: 'split-sequence' ':' 'xinclude' :)
            or $state[$p:lk] = 1213881                      (: 'step' ':' 'xinclude' :)
            or $state[$p:lk] = 1213882                      (: 'store' ':' 'xinclude' :)
            or $state[$p:lk] = 1213883                      (: 'string-replace' ':' 'xinclude' :)
            or $state[$p:lk] = 1213884                      (: 'try' ':' 'xinclude' :)
            or $state[$p:lk] = 1213885                      (: 'unescape-markup' ':' 'xinclude' :)
            or $state[$p:lk] = 1213886                      (: 'unwrap' ':' 'xinclude' :)
            or $state[$p:lk] = 1213887                      (: 'uuid' ':' 'xinclude' :)
            or $state[$p:lk] = 1213888                      (: 'validate-with-relax-ng' ':' 'xinclude' :)
            or $state[$p:lk] = 1213889                      (: 'validate-with-schematron' ':' 'xinclude' :)
            or $state[$p:lk] = 1213890                      (: 'validate-with-xml-schema' ':' 'xinclude' :)
            or $state[$p:lk] = 1213891                      (: 'variable' ':' 'xinclude' :)
            or $state[$p:lk] = 1213892                      (: 'viewport' ':' 'xinclude' :)
            or $state[$p:lk] = 1213894                      (: 'wrap' ':' 'xinclude' :)
            or $state[$p:lk] = 1213895                      (: 'wrap-sequence' ':' 'xinclude' :)
            or $state[$p:lk] = 1213896                      (: 'www-form-urldecode' ':' 'xinclude' :)
            or $state[$p:lk] = 1213897                      (: 'www-form-urlencode' ':' 'xinclude' :)
            or $state[$p:lk] = 1213898                      (: 'xinclude' ':' 'xinclude' :)
            or $state[$p:lk] = 1213899                      (: 'xquery' ':' 'xinclude' :)
            or $state[$p:lk] = 1213900                      (: 'xsl-formatter' ':' 'xinclude' :)
            or $state[$p:lk] = 1213901                      (: 'xslt' ':' 'xinclude' :)
            or $state[$p:lk] = 1230213                      (: NCName^Token ':' 'xquery' :)
            or $state[$p:lk] = 1230224                      (: 'add-attribute' ':' 'xquery' :)
            or $state[$p:lk] = 1230225                      (: 'add-xml-base' ':' 'xquery' :)
            or $state[$p:lk] = 1230227                      (: 'compare' ':' 'xquery' :)
            or $state[$p:lk] = 1230228                      (: 'count' ':' 'xquery' :)
            or $state[$p:lk] = 1230229                      (: 'default' ':' 'xquery' :)
            or $state[$p:lk] = 1230230                      (: 'delete' ':' 'xquery' :)
            or $state[$p:lk] = 1230231                      (: 'directory-list' ':' 'xquery' :)
            or $state[$p:lk] = 1230233                      (: 'else' ':' 'xquery' :)
            or $state[$p:lk] = 1230235                      (: 'error' ':' 'xquery' :)
            or $state[$p:lk] = 1230236                      (: 'escape-markup' ':' 'xquery' :)
            or $state[$p:lk] = 1230237                      (: 'exec' ':' 'xquery' :)
            or $state[$p:lk] = 1230238                      (: 'filter' ':' 'xquery' :)
            or $state[$p:lk] = 1230239                      (: 'for-each' ':' 'xquery' :)
            or $state[$p:lk] = 1230241                      (: 'hash' ':' 'xquery' :)
            or $state[$p:lk] = 1230242                      (: 'http-request' ':' 'xquery' :)
            or $state[$p:lk] = 1230243                      (: 'identity' ':' 'xquery' :)
            or $state[$p:lk] = 1230244                      (: 'if' ':' 'xquery' :)
            or $state[$p:lk] = 1230245                      (: 'insert' ':' 'xquery' :)
            or $state[$p:lk] = 1230247                      (: 'label-elements' ':' 'xquery' :)
            or $state[$p:lk] = 1230248                      (: 'library' ':' 'xquery' :)
            or $state[$p:lk] = 1230249                      (: 'load' ':' 'xquery' :)
            or $state[$p:lk] = 1230250                      (: 'make-absolute-uris' ':' 'xquery' :)
            or $state[$p:lk] = 1230251                      (: 'namespace' ':' 'xquery' :)
            or $state[$p:lk] = 1230252                      (: 'namespace-rename' ':' 'xquery' :)
            or $state[$p:lk] = 1230253                      (: 'pack' ':' 'xquery' :)
            or $state[$p:lk] = 1230254                      (: 'parameters' ':' 'xquery' :)
            or $state[$p:lk] = 1230256                      (: 'pipeline' ':' 'xquery' :)
            or $state[$p:lk] = 1230258                      (: 'rename' ':' 'xquery' :)
            or $state[$p:lk] = 1230259                      (: 'replace' ':' 'xquery' :)
            or $state[$p:lk] = 1230262                      (: 'set-attributes' ':' 'xquery' :)
            or $state[$p:lk] = 1230263                      (: 'sink' ':' 'xquery' :)
            or $state[$p:lk] = 1230264                      (: 'split-sequence' ':' 'xquery' :)
            or $state[$p:lk] = 1230265                      (: 'step' ':' 'xquery' :)
            or $state[$p:lk] = 1230266                      (: 'store' ':' 'xquery' :)
            or $state[$p:lk] = 1230267                      (: 'string-replace' ':' 'xquery' :)
            or $state[$p:lk] = 1230268                      (: 'try' ':' 'xquery' :)
            or $state[$p:lk] = 1230269                      (: 'unescape-markup' ':' 'xquery' :)
            or $state[$p:lk] = 1230270                      (: 'unwrap' ':' 'xquery' :)
            or $state[$p:lk] = 1230271                      (: 'uuid' ':' 'xquery' :)
            or $state[$p:lk] = 1230272                      (: 'validate-with-relax-ng' ':' 'xquery' :)
            or $state[$p:lk] = 1230273                      (: 'validate-with-schematron' ':' 'xquery' :)
            or $state[$p:lk] = 1230274                      (: 'validate-with-xml-schema' ':' 'xquery' :)
            or $state[$p:lk] = 1230275                      (: 'variable' ':' 'xquery' :)
            or $state[$p:lk] = 1230276                      (: 'viewport' ':' 'xquery' :)
            or $state[$p:lk] = 1230278                      (: 'wrap' ':' 'xquery' :)
            or $state[$p:lk] = 1230279                      (: 'wrap-sequence' ':' 'xquery' :)
            or $state[$p:lk] = 1230280                      (: 'www-form-urldecode' ':' 'xquery' :)
            or $state[$p:lk] = 1230281                      (: 'www-form-urlencode' ':' 'xquery' :)
            or $state[$p:lk] = 1230282                      (: 'xinclude' ':' 'xquery' :)
            or $state[$p:lk] = 1230283                      (: 'xquery' ':' 'xquery' :)
            or $state[$p:lk] = 1230284                      (: 'xsl-formatter' ':' 'xquery' :)
            or $state[$p:lk] = 1230285                      (: 'xslt' ':' 'xquery' :)
            or $state[$p:lk] = 1246597                      (: NCName^Token ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246608                      (: 'add-attribute' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246609                      (: 'add-xml-base' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246611                      (: 'compare' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246612                      (: 'count' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246613                      (: 'default' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246614                      (: 'delete' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246615                      (: 'directory-list' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246617                      (: 'else' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246619                      (: 'error' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246620                      (: 'escape-markup' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246621                      (: 'exec' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246622                      (: 'filter' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246623                      (: 'for-each' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246625                      (: 'hash' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246626                      (: 'http-request' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246627                      (: 'identity' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246628                      (: 'if' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246629                      (: 'insert' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246631                      (: 'label-elements' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246632                      (: 'library' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246633                      (: 'load' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246634                      (: 'make-absolute-uris' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246635                      (: 'namespace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246636                      (: 'namespace-rename' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246637                      (: 'pack' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246638                      (: 'parameters' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246640                      (: 'pipeline' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246642                      (: 'rename' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246643                      (: 'replace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246646                      (: 'set-attributes' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246647                      (: 'sink' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246648                      (: 'split-sequence' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246649                      (: 'step' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246650                      (: 'store' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246651                      (: 'string-replace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246652                      (: 'try' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246653                      (: 'unescape-markup' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246654                      (: 'unwrap' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246655                      (: 'uuid' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246656                      (: 'validate-with-relax-ng' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246657                      (: 'validate-with-schematron' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246658                      (: 'validate-with-xml-schema' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246659                      (: 'variable' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246660                      (: 'viewport' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246662                      (: 'wrap' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246663                      (: 'wrap-sequence' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246664                      (: 'www-form-urldecode' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246665                      (: 'www-form-urlencode' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246666                      (: 'xinclude' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246667                      (: 'xquery' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246668                      (: 'xsl-formatter' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246669                      (: 'xslt' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1262981                      (: NCName^Token ':' 'xslt' :)
            or $state[$p:lk] = 1262992                      (: 'add-attribute' ':' 'xslt' :)
            or $state[$p:lk] = 1262993                      (: 'add-xml-base' ':' 'xslt' :)
            or $state[$p:lk] = 1262995                      (: 'compare' ':' 'xslt' :)
            or $state[$p:lk] = 1262996                      (: 'count' ':' 'xslt' :)
            or $state[$p:lk] = 1262997                      (: 'default' ':' 'xslt' :)
            or $state[$p:lk] = 1262998                      (: 'delete' ':' 'xslt' :)
            or $state[$p:lk] = 1262999                      (: 'directory-list' ':' 'xslt' :)
            or $state[$p:lk] = 1263001                      (: 'else' ':' 'xslt' :)
            or $state[$p:lk] = 1263003                      (: 'error' ':' 'xslt' :)
            or $state[$p:lk] = 1263004                      (: 'escape-markup' ':' 'xslt' :)
            or $state[$p:lk] = 1263005                      (: 'exec' ':' 'xslt' :)
            or $state[$p:lk] = 1263006                      (: 'filter' ':' 'xslt' :)
            or $state[$p:lk] = 1263007                      (: 'for-each' ':' 'xslt' :)
            or $state[$p:lk] = 1263009                      (: 'hash' ':' 'xslt' :)
            or $state[$p:lk] = 1263010                      (: 'http-request' ':' 'xslt' :)
            or $state[$p:lk] = 1263011                      (: 'identity' ':' 'xslt' :)
            or $state[$p:lk] = 1263012                      (: 'if' ':' 'xslt' :)
            or $state[$p:lk] = 1263013                      (: 'insert' ':' 'xslt' :)
            or $state[$p:lk] = 1263015                      (: 'label-elements' ':' 'xslt' :)
            or $state[$p:lk] = 1263016                      (: 'library' ':' 'xslt' :)
            or $state[$p:lk] = 1263017                      (: 'load' ':' 'xslt' :)
            or $state[$p:lk] = 1263018                      (: 'make-absolute-uris' ':' 'xslt' :)
            or $state[$p:lk] = 1263019                      (: 'namespace' ':' 'xslt' :)
            or $state[$p:lk] = 1263020                      (: 'namespace-rename' ':' 'xslt' :)
            or $state[$p:lk] = 1263021                      (: 'pack' ':' 'xslt' :)
            or $state[$p:lk] = 1263022                      (: 'parameters' ':' 'xslt' :)
            or $state[$p:lk] = 1263024                      (: 'pipeline' ':' 'xslt' :)
            or $state[$p:lk] = 1263026                      (: 'rename' ':' 'xslt' :)
            or $state[$p:lk] = 1263027                      (: 'replace' ':' 'xslt' :)
            or $state[$p:lk] = 1263030                      (: 'set-attributes' ':' 'xslt' :)
            or $state[$p:lk] = 1263031                      (: 'sink' ':' 'xslt' :)
            or $state[$p:lk] = 1263032                      (: 'split-sequence' ':' 'xslt' :)
            or $state[$p:lk] = 1263033                      (: 'step' ':' 'xslt' :)
            or $state[$p:lk] = 1263034                      (: 'store' ':' 'xslt' :)
            or $state[$p:lk] = 1263035                      (: 'string-replace' ':' 'xslt' :)
            or $state[$p:lk] = 1263036                      (: 'try' ':' 'xslt' :)
            or $state[$p:lk] = 1263037                      (: 'unescape-markup' ':' 'xslt' :)
            or $state[$p:lk] = 1263038                      (: 'unwrap' ':' 'xslt' :)
            or $state[$p:lk] = 1263039                      (: 'uuid' ':' 'xslt' :)
            or $state[$p:lk] = 1263040                      (: 'validate-with-relax-ng' ':' 'xslt' :)
            or $state[$p:lk] = 1263041                      (: 'validate-with-schematron' ':' 'xslt' :)
            or $state[$p:lk] = 1263042                      (: 'validate-with-xml-schema' ':' 'xslt' :)
            or $state[$p:lk] = 1263043                      (: 'variable' ':' 'xslt' :)
            or $state[$p:lk] = 1263044                      (: 'viewport' ':' 'xslt' :)
            or $state[$p:lk] = 1263046                      (: 'wrap' ':' 'xslt' :)
            or $state[$p:lk] = 1263047                      (: 'wrap-sequence' ':' 'xslt' :)
            or $state[$p:lk] = 1263048                      (: 'www-form-urldecode' ':' 'xslt' :)
            or $state[$p:lk] = 1263049                      (: 'www-form-urlencode' ':' 'xslt' :)
            or $state[$p:lk] = 1263050                      (: 'xinclude' ':' 'xslt' :)
            or $state[$p:lk] = 1263051                      (: 'xquery' ':' 'xslt' :)
            or $state[$p:lk] = 1263052                      (: 'xsl-formatter' ':' 'xslt' :)
            or $state[$p:lk] = 1263053) then                (: 'xslt' ':' 'xslt' :)
        let $state := p:memoized($state, 1)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state := p:try-variable($input, $state)
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, -1, 1)
              else
                p:memoize($backtrack, $state, -7, 1)
      else
        $state
    let $state :=
      if ($state[$p:lk] = -1) then
        let $state := p:parse-variable($input, $state)
        return $state
      else if ($state[$p:lk] = 927                          (: 'for-each' '(' :)
            or $state[$p:lk] = 4127                         (: 'for-each' 'from' :)
            or $state[$p:lk] = 10015) then                  (: 'for-each' '{' :)
        let $state := p:parse-forEachStep($input, $state)
        return $state
      else if ($state[$p:lk] = 964                          (: 'viewport' '(' :)
            or $state[$p:lk] = 4164                         (: 'viewport' 'from' :)
            or $state[$p:lk] = 10052) then                  (: 'viewport' '{' :)
        let $state := p:parse-viewportStep($input, $state)
        return $state
      else if ($state[$p:lk] = 932) then                    (: 'if' '(' :)
        let $state := p:parse-chooseStep($input, $state)
        return $state
      else if ($state[$p:lk] = 10044) then                  (: 'try' '{' :)
        let $state := p:parse-tryStep($input, $state)
        return $state
      else if ($state[$p:lk] = 78) then                     (: '{' :)
        let $state := p:parse-groupStep($input, $state)
        return $state
      else if ($state[$p:error]) then
        $state
      else
        let $state := p:parse-atomicStep($input, $state)
        return $state
    let $state := p:lookahead1W(54, $input, $state)         (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
    return
      if ($state[$p:l1] = 79) then                          (: '}' :)
        $state
      else
        p:parse-subpipeline-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production subpipeline (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-subpipeline-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(49, $input, $state)         (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
    let $state :=
      if ($state[$p:l1] = 36) then                          (: 'if' :)
        let $state := p:lookahead2W(33, $input, $state)     (: Whitespace | '(' | ':' | '=' :)
        let $state :=
          if ($state[$p:lk] = 1444) then                    (: 'if' ':' :)
            let $state := p:lookahead3(47, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1572) then               (: 'if' '=' :)
            let $state := p:lookahead3W(48, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 60) then                     (: 'try' :)
        let $state := p:lookahead2W(39, $input, $state)     (: Whitespace | ':' | '=' | '{' :)
        let $state :=
          if ($state[$p:lk] = 1468) then                    (: 'try' ':' :)
            let $state := p:lookahead3(47, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1596) then               (: 'try' '=' :)
            let $state := p:lookahead3W(48, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 31                           (: 'viewport' :)
            or $state[$p:l1] = 68) then                     (: 'viewport' :)
        let $state := p:lookahead2W(45, $input, $state)     (: Whitespace | '(' | ':' | '=' | 'from' | '{' :)
        let $state :=
          if ($state[$p:lk] = 1439                          (: 'viewport' ':' :)
           or $state[$p:lk] = 1476) then                    (: 'viewport' ':' :)
            let $state := p:lookahead3(47, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1567                     (: 'viewport' '=' :)
                or $state[$p:lk] = 1604) then               (: 'viewport' '=' :)
            let $state := p:lookahead3W(48, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 5                            (: 'default' :)
            or $state[$p:l1] = 21                           (: 'else' :)
            or $state[$p:l1] = 25                           (: 'library' :)
            or $state[$p:l1] = 40                           (: 'namespace' :)
            or $state[$p:l1] = 43                           (: 'pipeline' :)
            or $state[$p:l1] = 48                           (: 'step' :)
            or $state[$p:l1] = 57                           (: 'variable' :)
            or $state[$p:l1] = 67) then                     (: 'variable' :)
        let $state := p:lookahead2W(28, $input, $state)     (: Whitespace | ':' | '=' :)
        let $state :=
          if ($state[$p:lk] = 1413                          (: 'default' ':' :)
           or $state[$p:lk] = 1429                          (: 'else' ':' :)
           or $state[$p:lk] = 1433                          (: 'library' ':' :)
           or $state[$p:lk] = 1448                          (: 'namespace' ':' :)
           or $state[$p:lk] = 1451                          (: 'pipeline' ':' :)
           or $state[$p:lk] = 1456                          (: 'step' ':' :)
           or $state[$p:lk] = 1465                          (: 'variable' ':' :)
           or $state[$p:lk] = 1475) then                    (: 'variable' ':' :)
            let $state := p:lookahead3(47, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1541                     (: 'default' '=' :)
                or $state[$p:lk] = 1557                     (: 'else' '=' :)
                or $state[$p:lk] = 1561                     (: 'library' '=' :)
                or $state[$p:lk] = 1576                     (: 'namespace' '=' :)
                or $state[$p:lk] = 1579                     (: 'pipeline' '=' :)
                or $state[$p:lk] = 1584                     (: 'step' '=' :)
                or $state[$p:lk] = 1593                     (: 'variable' '=' :)
                or $state[$p:lk] = 1603) then               (: 'variable' '=' :)
            let $state := p:lookahead3W(48, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else if ($state[$p:l1] = 16                           (: 'add-xml-base' :)
            or $state[$p:l1] = 17                           (: 'compare' :)
            or $state[$p:l1] = 19                           (: 'count' :)
            or $state[$p:l1] = 20                           (: 'delete' :)
            or $state[$p:l1] = 22                           (: 'directory-list' :)
            or $state[$p:l1] = 23                           (: 'error' :)
            or $state[$p:l1] = 27                           (: 'escape-markup' :)
            or $state[$p:l1] = 28                           (: 'exec' :)
            or $state[$p:l1] = 29                           (: 'filter' :)
            or $state[$p:l1] = 30                           (: 'hash' :)
            or $state[$p:l1] = 33                           (: 'http-request' :)
            or $state[$p:l1] = 34                           (: 'identity' :)
            or $state[$p:l1] = 35                           (: 'insert' :)
            or $state[$p:l1] = 37                           (: 'label-elements' :)
            or $state[$p:l1] = 39                           (: 'load' :)
            or $state[$p:l1] = 41                           (: 'make-absolute-uris' :)
            or $state[$p:l1] = 42                           (: 'namespace-rename' :)
            or $state[$p:l1] = 44                           (: 'pack' :)
            or $state[$p:l1] = 45                           (: 'parameters' :)
            or $state[$p:l1] = 46                           (: 'rename' :)
            or $state[$p:l1] = 50                           (: 'replace' :)
            or $state[$p:l1] = 51                           (: 'set-attributes' :)
            or $state[$p:l1] = 54                           (: 'sink' :)
            or $state[$p:l1] = 55                           (: 'split-sequence' :)
            or $state[$p:l1] = 56                           (: 'store' :)
            or $state[$p:l1] = 58                           (: 'string-replace' :)
            or $state[$p:l1] = 59                           (: 'unescape-markup' :)
            or $state[$p:l1] = 61                           (: 'unwrap' :)
            or $state[$p:l1] = 62                           (: 'uuid' :)
            or $state[$p:l1] = 63                           (: 'validate-with-relax-ng' :)
            or $state[$p:l1] = 64                           (: 'validate-with-schematron' :)
            or $state[$p:l1] = 65                           (: 'validate-with-xml-schema' :)
            or $state[$p:l1] = 66                           (: 'wrap' :)
            or $state[$p:l1] = 70                           (: 'wrap-sequence' :)
            or $state[$p:l1] = 71                           (: 'www-form-urldecode' :)
            or $state[$p:l1] = 72                           (: 'www-form-urlencode' :)
            or $state[$p:l1] = 73                           (: 'xinclude' :)
            or $state[$p:l1] = 74                           (: 'xquery' :)
            or $state[$p:l1] = 75                           (: 'xsl-formatter' :)
            or $state[$p:l1] = 76                           (: 'xslt' :)
            or $state[$p:l1] = 77) then                     (: 'xslt' :)
        let $state := p:lookahead2W(59, $input, $state)     (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
        let $state :=
          if ($state[$p:lk] = 1424                          (: 'add-xml-base' ':' :)
           or $state[$p:lk] = 1425                          (: 'compare' ':' :)
           or $state[$p:lk] = 1427                          (: 'count' ':' :)
           or $state[$p:lk] = 1428                          (: 'delete' ':' :)
           or $state[$p:lk] = 1430                          (: 'directory-list' ':' :)
           or $state[$p:lk] = 1431                          (: 'error' ':' :)
           or $state[$p:lk] = 1435                          (: 'escape-markup' ':' :)
           or $state[$p:lk] = 1436                          (: 'exec' ':' :)
           or $state[$p:lk] = 1437                          (: 'filter' ':' :)
           or $state[$p:lk] = 1438                          (: 'hash' ':' :)
           or $state[$p:lk] = 1441                          (: 'http-request' ':' :)
           or $state[$p:lk] = 1442                          (: 'identity' ':' :)
           or $state[$p:lk] = 1443                          (: 'insert' ':' :)
           or $state[$p:lk] = 1445                          (: 'label-elements' ':' :)
           or $state[$p:lk] = 1447                          (: 'load' ':' :)
           or $state[$p:lk] = 1449                          (: 'make-absolute-uris' ':' :)
           or $state[$p:lk] = 1450                          (: 'namespace-rename' ':' :)
           or $state[$p:lk] = 1452                          (: 'pack' ':' :)
           or $state[$p:lk] = 1453                          (: 'parameters' ':' :)
           or $state[$p:lk] = 1454                          (: 'rename' ':' :)
           or $state[$p:lk] = 1458                          (: 'replace' ':' :)
           or $state[$p:lk] = 1459                          (: 'set-attributes' ':' :)
           or $state[$p:lk] = 1462                          (: 'sink' ':' :)
           or $state[$p:lk] = 1463                          (: 'split-sequence' ':' :)
           or $state[$p:lk] = 1464                          (: 'store' ':' :)
           or $state[$p:lk] = 1466                          (: 'string-replace' ':' :)
           or $state[$p:lk] = 1467                          (: 'unescape-markup' ':' :)
           or $state[$p:lk] = 1469                          (: 'unwrap' ':' :)
           or $state[$p:lk] = 1470                          (: 'uuid' ':' :)
           or $state[$p:lk] = 1471                          (: 'validate-with-relax-ng' ':' :)
           or $state[$p:lk] = 1472                          (: 'validate-with-schematron' ':' :)
           or $state[$p:lk] = 1473                          (: 'validate-with-xml-schema' ':' :)
           or $state[$p:lk] = 1474                          (: 'wrap' ':' :)
           or $state[$p:lk] = 1478                          (: 'wrap-sequence' ':' :)
           or $state[$p:lk] = 1479                          (: 'www-form-urldecode' ':' :)
           or $state[$p:lk] = 1480                          (: 'www-form-urlencode' ':' :)
           or $state[$p:lk] = 1481                          (: 'xinclude' ':' :)
           or $state[$p:lk] = 1482                          (: 'xquery' ':' :)
           or $state[$p:lk] = 1483                          (: 'xsl-formatter' ':' :)
           or $state[$p:lk] = 1484                          (: 'xslt' ':' :)
           or $state[$p:lk] = 1485) then                    (: 'xslt' ':' :)
            let $state := p:lookahead3(47, $input, $state)  (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else if ($state[$p:lk] = 1552                     (: 'add-xml-base' '=' :)
                or $state[$p:lk] = 1553                     (: 'compare' '=' :)
                or $state[$p:lk] = 1555                     (: 'count' '=' :)
                or $state[$p:lk] = 1556                     (: 'delete' '=' :)
                or $state[$p:lk] = 1558                     (: 'directory-list' '=' :)
                or $state[$p:lk] = 1559                     (: 'error' '=' :)
                or $state[$p:lk] = 1563                     (: 'escape-markup' '=' :)
                or $state[$p:lk] = 1564                     (: 'exec' '=' :)
                or $state[$p:lk] = 1565                     (: 'filter' '=' :)
                or $state[$p:lk] = 1566                     (: 'hash' '=' :)
                or $state[$p:lk] = 1569                     (: 'http-request' '=' :)
                or $state[$p:lk] = 1570                     (: 'identity' '=' :)
                or $state[$p:lk] = 1571                     (: 'insert' '=' :)
                or $state[$p:lk] = 1573                     (: 'label-elements' '=' :)
                or $state[$p:lk] = 1575                     (: 'load' '=' :)
                or $state[$p:lk] = 1577                     (: 'make-absolute-uris' '=' :)
                or $state[$p:lk] = 1578                     (: 'namespace-rename' '=' :)
                or $state[$p:lk] = 1580                     (: 'pack' '=' :)
                or $state[$p:lk] = 1581                     (: 'parameters' '=' :)
                or $state[$p:lk] = 1582                     (: 'rename' '=' :)
                or $state[$p:lk] = 1586                     (: 'replace' '=' :)
                or $state[$p:lk] = 1587                     (: 'set-attributes' '=' :)
                or $state[$p:lk] = 1590                     (: 'sink' '=' :)
                or $state[$p:lk] = 1591                     (: 'split-sequence' '=' :)
                or $state[$p:lk] = 1592                     (: 'store' '=' :)
                or $state[$p:lk] = 1594                     (: 'string-replace' '=' :)
                or $state[$p:lk] = 1595                     (: 'unescape-markup' '=' :)
                or $state[$p:lk] = 1597                     (: 'unwrap' '=' :)
                or $state[$p:lk] = 1598                     (: 'uuid' '=' :)
                or $state[$p:lk] = 1599                     (: 'validate-with-relax-ng' '=' :)
                or $state[$p:lk] = 1600                     (: 'validate-with-schematron' '=' :)
                or $state[$p:lk] = 1601                     (: 'validate-with-xml-schema' '=' :)
                or $state[$p:lk] = 1602                     (: 'wrap' '=' :)
                or $state[$p:lk] = 1606                     (: 'wrap-sequence' '=' :)
                or $state[$p:lk] = 1607                     (: 'www-form-urldecode' '=' :)
                or $state[$p:lk] = 1608                     (: 'www-form-urlencode' '=' :)
                or $state[$p:lk] = 1609                     (: 'xinclude' '=' :)
                or $state[$p:lk] = 1610                     (: 'xquery' '=' :)
                or $state[$p:lk] = 1611                     (: 'xsl-formatter' '=' :)
                or $state[$p:lk] = 1612                     (: 'xslt' '=' :)
                or $state[$p:lk] = 1613) then               (: 'xslt' '=' :)
            let $state := p:lookahead3W(48, $input, $state) (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
            return $state
          else
            $state
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    let $state :=
      if ($state[$p:error]) then
        $state
      else if ($state[$p:lk] = 83333                        (: NCName^Token ':' NCName^Token :)
            or $state[$p:lk] = 83344                        (: 'add-attribute' ':' NCName^Token :)
            or $state[$p:lk] = 83345                        (: 'add-xml-base' ':' NCName^Token :)
            or $state[$p:lk] = 83347                        (: 'compare' ':' NCName^Token :)
            or $state[$p:lk] = 83348                        (: 'count' ':' NCName^Token :)
            or $state[$p:lk] = 83349                        (: 'default' ':' NCName^Token :)
            or $state[$p:lk] = 83350                        (: 'delete' ':' NCName^Token :)
            or $state[$p:lk] = 83351                        (: 'directory-list' ':' NCName^Token :)
            or $state[$p:lk] = 83353                        (: 'else' ':' NCName^Token :)
            or $state[$p:lk] = 83355                        (: 'error' ':' NCName^Token :)
            or $state[$p:lk] = 83356                        (: 'escape-markup' ':' NCName^Token :)
            or $state[$p:lk] = 83357                        (: 'exec' ':' NCName^Token :)
            or $state[$p:lk] = 83358                        (: 'filter' ':' NCName^Token :)
            or $state[$p:lk] = 83359                        (: 'for-each' ':' NCName^Token :)
            or $state[$p:lk] = 83361                        (: 'hash' ':' NCName^Token :)
            or $state[$p:lk] = 83362                        (: 'http-request' ':' NCName^Token :)
            or $state[$p:lk] = 83363                        (: 'identity' ':' NCName^Token :)
            or $state[$p:lk] = 83364                        (: 'if' ':' NCName^Token :)
            or $state[$p:lk] = 83365                        (: 'insert' ':' NCName^Token :)
            or $state[$p:lk] = 83367                        (: 'label-elements' ':' NCName^Token :)
            or $state[$p:lk] = 83368                        (: 'library' ':' NCName^Token :)
            or $state[$p:lk] = 83369                        (: 'load' ':' NCName^Token :)
            or $state[$p:lk] = 83370                        (: 'make-absolute-uris' ':' NCName^Token :)
            or $state[$p:lk] = 83371                        (: 'namespace' ':' NCName^Token :)
            or $state[$p:lk] = 83372                        (: 'namespace-rename' ':' NCName^Token :)
            or $state[$p:lk] = 83373                        (: 'pack' ':' NCName^Token :)
            or $state[$p:lk] = 83374                        (: 'parameters' ':' NCName^Token :)
            or $state[$p:lk] = 83376                        (: 'pipeline' ':' NCName^Token :)
            or $state[$p:lk] = 83378                        (: 'rename' ':' NCName^Token :)
            or $state[$p:lk] = 83379                        (: 'replace' ':' NCName^Token :)
            or $state[$p:lk] = 83382                        (: 'set-attributes' ':' NCName^Token :)
            or $state[$p:lk] = 83383                        (: 'sink' ':' NCName^Token :)
            or $state[$p:lk] = 83384                        (: 'split-sequence' ':' NCName^Token :)
            or $state[$p:lk] = 83385                        (: 'step' ':' NCName^Token :)
            or $state[$p:lk] = 83386                        (: 'store' ':' NCName^Token :)
            or $state[$p:lk] = 83387                        (: 'string-replace' ':' NCName^Token :)
            or $state[$p:lk] = 83388                        (: 'try' ':' NCName^Token :)
            or $state[$p:lk] = 83389                        (: 'unescape-markup' ':' NCName^Token :)
            or $state[$p:lk] = 83390                        (: 'unwrap' ':' NCName^Token :)
            or $state[$p:lk] = 83391                        (: 'uuid' ':' NCName^Token :)
            or $state[$p:lk] = 83392                        (: 'validate-with-relax-ng' ':' NCName^Token :)
            or $state[$p:lk] = 83393                        (: 'validate-with-schematron' ':' NCName^Token :)
            or $state[$p:lk] = 83394                        (: 'validate-with-xml-schema' ':' NCName^Token :)
            or $state[$p:lk] = 83395                        (: 'variable' ':' NCName^Token :)
            or $state[$p:lk] = 83396                        (: 'viewport' ':' NCName^Token :)
            or $state[$p:lk] = 83398                        (: 'wrap' ':' NCName^Token :)
            or $state[$p:lk] = 83399                        (: 'wrap-sequence' ':' NCName^Token :)
            or $state[$p:lk] = 83400                        (: 'www-form-urldecode' ':' NCName^Token :)
            or $state[$p:lk] = 83401                        (: 'www-form-urlencode' ':' NCName^Token :)
            or $state[$p:lk] = 83402                        (: 'xinclude' ':' NCName^Token :)
            or $state[$p:lk] = 83403                        (: 'xquery' ':' NCName^Token :)
            or $state[$p:lk] = 83404                        (: 'xsl-formatter' ':' NCName^Token :)
            or $state[$p:lk] = 83405                        (: 'xslt' ':' NCName^Token :)
            or $state[$p:lk] = 263557                       (: NCName^Token ':' 'add-attribute' :)
            or $state[$p:lk] = 263568                       (: 'add-attribute' ':' 'add-attribute' :)
            or $state[$p:lk] = 263569                       (: 'add-xml-base' ':' 'add-attribute' :)
            or $state[$p:lk] = 263571                       (: 'compare' ':' 'add-attribute' :)
            or $state[$p:lk] = 263572                       (: 'count' ':' 'add-attribute' :)
            or $state[$p:lk] = 263573                       (: 'default' ':' 'add-attribute' :)
            or $state[$p:lk] = 263574                       (: 'delete' ':' 'add-attribute' :)
            or $state[$p:lk] = 263575                       (: 'directory-list' ':' 'add-attribute' :)
            or $state[$p:lk] = 263577                       (: 'else' ':' 'add-attribute' :)
            or $state[$p:lk] = 263579                       (: 'error' ':' 'add-attribute' :)
            or $state[$p:lk] = 263580                       (: 'escape-markup' ':' 'add-attribute' :)
            or $state[$p:lk] = 263581                       (: 'exec' ':' 'add-attribute' :)
            or $state[$p:lk] = 263582                       (: 'filter' ':' 'add-attribute' :)
            or $state[$p:lk] = 263583                       (: 'for-each' ':' 'add-attribute' :)
            or $state[$p:lk] = 263585                       (: 'hash' ':' 'add-attribute' :)
            or $state[$p:lk] = 263586                       (: 'http-request' ':' 'add-attribute' :)
            or $state[$p:lk] = 263587                       (: 'identity' ':' 'add-attribute' :)
            or $state[$p:lk] = 263588                       (: 'if' ':' 'add-attribute' :)
            or $state[$p:lk] = 263589                       (: 'insert' ':' 'add-attribute' :)
            or $state[$p:lk] = 263591                       (: 'label-elements' ':' 'add-attribute' :)
            or $state[$p:lk] = 263592                       (: 'library' ':' 'add-attribute' :)
            or $state[$p:lk] = 263593                       (: 'load' ':' 'add-attribute' :)
            or $state[$p:lk] = 263594                       (: 'make-absolute-uris' ':' 'add-attribute' :)
            or $state[$p:lk] = 263595                       (: 'namespace' ':' 'add-attribute' :)
            or $state[$p:lk] = 263596                       (: 'namespace-rename' ':' 'add-attribute' :)
            or $state[$p:lk] = 263597                       (: 'pack' ':' 'add-attribute' :)
            or $state[$p:lk] = 263598                       (: 'parameters' ':' 'add-attribute' :)
            or $state[$p:lk] = 263600                       (: 'pipeline' ':' 'add-attribute' :)
            or $state[$p:lk] = 263602                       (: 'rename' ':' 'add-attribute' :)
            or $state[$p:lk] = 263603                       (: 'replace' ':' 'add-attribute' :)
            or $state[$p:lk] = 263606                       (: 'set-attributes' ':' 'add-attribute' :)
            or $state[$p:lk] = 263607                       (: 'sink' ':' 'add-attribute' :)
            or $state[$p:lk] = 263608                       (: 'split-sequence' ':' 'add-attribute' :)
            or $state[$p:lk] = 263609                       (: 'step' ':' 'add-attribute' :)
            or $state[$p:lk] = 263610                       (: 'store' ':' 'add-attribute' :)
            or $state[$p:lk] = 263611                       (: 'string-replace' ':' 'add-attribute' :)
            or $state[$p:lk] = 263612                       (: 'try' ':' 'add-attribute' :)
            or $state[$p:lk] = 263613                       (: 'unescape-markup' ':' 'add-attribute' :)
            or $state[$p:lk] = 263614                       (: 'unwrap' ':' 'add-attribute' :)
            or $state[$p:lk] = 263615                       (: 'uuid' ':' 'add-attribute' :)
            or $state[$p:lk] = 263616                       (: 'validate-with-relax-ng' ':' 'add-attribute' :)
            or $state[$p:lk] = 263617                       (: 'validate-with-schematron' ':' 'add-attribute' :)
            or $state[$p:lk] = 263618                       (: 'validate-with-xml-schema' ':' 'add-attribute' :)
            or $state[$p:lk] = 263619                       (: 'variable' ':' 'add-attribute' :)
            or $state[$p:lk] = 263620                       (: 'viewport' ':' 'add-attribute' :)
            or $state[$p:lk] = 263622                       (: 'wrap' ':' 'add-attribute' :)
            or $state[$p:lk] = 263623                       (: 'wrap-sequence' ':' 'add-attribute' :)
            or $state[$p:lk] = 263624                       (: 'www-form-urldecode' ':' 'add-attribute' :)
            or $state[$p:lk] = 263625                       (: 'www-form-urlencode' ':' 'add-attribute' :)
            or $state[$p:lk] = 263626                       (: 'xinclude' ':' 'add-attribute' :)
            or $state[$p:lk] = 263627                       (: 'xquery' ':' 'add-attribute' :)
            or $state[$p:lk] = 263628                       (: 'xsl-formatter' ':' 'add-attribute' :)
            or $state[$p:lk] = 263629                       (: 'xslt' ':' 'add-attribute' :)
            or $state[$p:lk] = 279941                       (: NCName^Token ':' 'add-xml-base' :)
            or $state[$p:lk] = 279952                       (: 'add-attribute' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279953                       (: 'add-xml-base' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279955                       (: 'compare' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279956                       (: 'count' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279957                       (: 'default' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279958                       (: 'delete' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279959                       (: 'directory-list' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279961                       (: 'else' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279963                       (: 'error' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279964                       (: 'escape-markup' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279965                       (: 'exec' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279966                       (: 'filter' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279967                       (: 'for-each' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279969                       (: 'hash' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279970                       (: 'http-request' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279971                       (: 'identity' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279972                       (: 'if' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279973                       (: 'insert' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279975                       (: 'label-elements' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279976                       (: 'library' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279977                       (: 'load' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279978                       (: 'make-absolute-uris' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279979                       (: 'namespace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279980                       (: 'namespace-rename' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279981                       (: 'pack' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279982                       (: 'parameters' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279984                       (: 'pipeline' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279986                       (: 'rename' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279987                       (: 'replace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279990                       (: 'set-attributes' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279991                       (: 'sink' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279992                       (: 'split-sequence' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279993                       (: 'step' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279994                       (: 'store' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279995                       (: 'string-replace' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279996                       (: 'try' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279997                       (: 'unescape-markup' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279998                       (: 'unwrap' ':' 'add-xml-base' :)
            or $state[$p:lk] = 279999                       (: 'uuid' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280000                       (: 'validate-with-relax-ng' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280001                       (: 'validate-with-schematron' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280002                       (: 'validate-with-xml-schema' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280003                       (: 'variable' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280004                       (: 'viewport' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280006                       (: 'wrap' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280007                       (: 'wrap-sequence' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280008                       (: 'www-form-urldecode' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280009                       (: 'www-form-urlencode' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280010                       (: 'xinclude' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280011                       (: 'xquery' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280012                       (: 'xsl-formatter' ':' 'add-xml-base' :)
            or $state[$p:lk] = 280013                       (: 'xslt' ':' 'add-xml-base' :)
            or $state[$p:lk] = 312709                       (: NCName^Token ':' 'compare' :)
            or $state[$p:lk] = 312720                       (: 'add-attribute' ':' 'compare' :)
            or $state[$p:lk] = 312721                       (: 'add-xml-base' ':' 'compare' :)
            or $state[$p:lk] = 312723                       (: 'compare' ':' 'compare' :)
            or $state[$p:lk] = 312724                       (: 'count' ':' 'compare' :)
            or $state[$p:lk] = 312725                       (: 'default' ':' 'compare' :)
            or $state[$p:lk] = 312726                       (: 'delete' ':' 'compare' :)
            or $state[$p:lk] = 312727                       (: 'directory-list' ':' 'compare' :)
            or $state[$p:lk] = 312729                       (: 'else' ':' 'compare' :)
            or $state[$p:lk] = 312731                       (: 'error' ':' 'compare' :)
            or $state[$p:lk] = 312732                       (: 'escape-markup' ':' 'compare' :)
            or $state[$p:lk] = 312733                       (: 'exec' ':' 'compare' :)
            or $state[$p:lk] = 312734                       (: 'filter' ':' 'compare' :)
            or $state[$p:lk] = 312735                       (: 'for-each' ':' 'compare' :)
            or $state[$p:lk] = 312737                       (: 'hash' ':' 'compare' :)
            or $state[$p:lk] = 312738                       (: 'http-request' ':' 'compare' :)
            or $state[$p:lk] = 312739                       (: 'identity' ':' 'compare' :)
            or $state[$p:lk] = 312740                       (: 'if' ':' 'compare' :)
            or $state[$p:lk] = 312741                       (: 'insert' ':' 'compare' :)
            or $state[$p:lk] = 312743                       (: 'label-elements' ':' 'compare' :)
            or $state[$p:lk] = 312744                       (: 'library' ':' 'compare' :)
            or $state[$p:lk] = 312745                       (: 'load' ':' 'compare' :)
            or $state[$p:lk] = 312746                       (: 'make-absolute-uris' ':' 'compare' :)
            or $state[$p:lk] = 312747                       (: 'namespace' ':' 'compare' :)
            or $state[$p:lk] = 312748                       (: 'namespace-rename' ':' 'compare' :)
            or $state[$p:lk] = 312749                       (: 'pack' ':' 'compare' :)
            or $state[$p:lk] = 312750                       (: 'parameters' ':' 'compare' :)
            or $state[$p:lk] = 312752                       (: 'pipeline' ':' 'compare' :)
            or $state[$p:lk] = 312754                       (: 'rename' ':' 'compare' :)
            or $state[$p:lk] = 312755                       (: 'replace' ':' 'compare' :)
            or $state[$p:lk] = 312758                       (: 'set-attributes' ':' 'compare' :)
            or $state[$p:lk] = 312759                       (: 'sink' ':' 'compare' :)
            or $state[$p:lk] = 312760                       (: 'split-sequence' ':' 'compare' :)
            or $state[$p:lk] = 312761                       (: 'step' ':' 'compare' :)
            or $state[$p:lk] = 312762                       (: 'store' ':' 'compare' :)
            or $state[$p:lk] = 312763                       (: 'string-replace' ':' 'compare' :)
            or $state[$p:lk] = 312764                       (: 'try' ':' 'compare' :)
            or $state[$p:lk] = 312765                       (: 'unescape-markup' ':' 'compare' :)
            or $state[$p:lk] = 312766                       (: 'unwrap' ':' 'compare' :)
            or $state[$p:lk] = 312767                       (: 'uuid' ':' 'compare' :)
            or $state[$p:lk] = 312768                       (: 'validate-with-relax-ng' ':' 'compare' :)
            or $state[$p:lk] = 312769                       (: 'validate-with-schematron' ':' 'compare' :)
            or $state[$p:lk] = 312770                       (: 'validate-with-xml-schema' ':' 'compare' :)
            or $state[$p:lk] = 312771                       (: 'variable' ':' 'compare' :)
            or $state[$p:lk] = 312772                       (: 'viewport' ':' 'compare' :)
            or $state[$p:lk] = 312774                       (: 'wrap' ':' 'compare' :)
            or $state[$p:lk] = 312775                       (: 'wrap-sequence' ':' 'compare' :)
            or $state[$p:lk] = 312776                       (: 'www-form-urldecode' ':' 'compare' :)
            or $state[$p:lk] = 312777                       (: 'www-form-urlencode' ':' 'compare' :)
            or $state[$p:lk] = 312778                       (: 'xinclude' ':' 'compare' :)
            or $state[$p:lk] = 312779                       (: 'xquery' ':' 'compare' :)
            or $state[$p:lk] = 312780                       (: 'xsl-formatter' ':' 'compare' :)
            or $state[$p:lk] = 312781                       (: 'xslt' ':' 'compare' :)
            or $state[$p:lk] = 329093                       (: NCName^Token ':' 'count' :)
            or $state[$p:lk] = 329104                       (: 'add-attribute' ':' 'count' :)
            or $state[$p:lk] = 329105                       (: 'add-xml-base' ':' 'count' :)
            or $state[$p:lk] = 329107                       (: 'compare' ':' 'count' :)
            or $state[$p:lk] = 329108                       (: 'count' ':' 'count' :)
            or $state[$p:lk] = 329109                       (: 'default' ':' 'count' :)
            or $state[$p:lk] = 329110                       (: 'delete' ':' 'count' :)
            or $state[$p:lk] = 329111                       (: 'directory-list' ':' 'count' :)
            or $state[$p:lk] = 329113                       (: 'else' ':' 'count' :)
            or $state[$p:lk] = 329115                       (: 'error' ':' 'count' :)
            or $state[$p:lk] = 329116                       (: 'escape-markup' ':' 'count' :)
            or $state[$p:lk] = 329117                       (: 'exec' ':' 'count' :)
            or $state[$p:lk] = 329118                       (: 'filter' ':' 'count' :)
            or $state[$p:lk] = 329119                       (: 'for-each' ':' 'count' :)
            or $state[$p:lk] = 329121                       (: 'hash' ':' 'count' :)
            or $state[$p:lk] = 329122                       (: 'http-request' ':' 'count' :)
            or $state[$p:lk] = 329123                       (: 'identity' ':' 'count' :)
            or $state[$p:lk] = 329124                       (: 'if' ':' 'count' :)
            or $state[$p:lk] = 329125                       (: 'insert' ':' 'count' :)
            or $state[$p:lk] = 329127                       (: 'label-elements' ':' 'count' :)
            or $state[$p:lk] = 329128                       (: 'library' ':' 'count' :)
            or $state[$p:lk] = 329129                       (: 'load' ':' 'count' :)
            or $state[$p:lk] = 329130                       (: 'make-absolute-uris' ':' 'count' :)
            or $state[$p:lk] = 329131                       (: 'namespace' ':' 'count' :)
            or $state[$p:lk] = 329132                       (: 'namespace-rename' ':' 'count' :)
            or $state[$p:lk] = 329133                       (: 'pack' ':' 'count' :)
            or $state[$p:lk] = 329134                       (: 'parameters' ':' 'count' :)
            or $state[$p:lk] = 329136                       (: 'pipeline' ':' 'count' :)
            or $state[$p:lk] = 329138                       (: 'rename' ':' 'count' :)
            or $state[$p:lk] = 329139                       (: 'replace' ':' 'count' :)
            or $state[$p:lk] = 329142                       (: 'set-attributes' ':' 'count' :)
            or $state[$p:lk] = 329143                       (: 'sink' ':' 'count' :)
            or $state[$p:lk] = 329144                       (: 'split-sequence' ':' 'count' :)
            or $state[$p:lk] = 329145                       (: 'step' ':' 'count' :)
            or $state[$p:lk] = 329146                       (: 'store' ':' 'count' :)
            or $state[$p:lk] = 329147                       (: 'string-replace' ':' 'count' :)
            or $state[$p:lk] = 329148                       (: 'try' ':' 'count' :)
            or $state[$p:lk] = 329149                       (: 'unescape-markup' ':' 'count' :)
            or $state[$p:lk] = 329150                       (: 'unwrap' ':' 'count' :)
            or $state[$p:lk] = 329151                       (: 'uuid' ':' 'count' :)
            or $state[$p:lk] = 329152                       (: 'validate-with-relax-ng' ':' 'count' :)
            or $state[$p:lk] = 329153                       (: 'validate-with-schematron' ':' 'count' :)
            or $state[$p:lk] = 329154                       (: 'validate-with-xml-schema' ':' 'count' :)
            or $state[$p:lk] = 329155                       (: 'variable' ':' 'count' :)
            or $state[$p:lk] = 329156                       (: 'viewport' ':' 'count' :)
            or $state[$p:lk] = 329158                       (: 'wrap' ':' 'count' :)
            or $state[$p:lk] = 329159                       (: 'wrap-sequence' ':' 'count' :)
            or $state[$p:lk] = 329160                       (: 'www-form-urldecode' ':' 'count' :)
            or $state[$p:lk] = 329161                       (: 'www-form-urlencode' ':' 'count' :)
            or $state[$p:lk] = 329162                       (: 'xinclude' ':' 'count' :)
            or $state[$p:lk] = 329163                       (: 'xquery' ':' 'count' :)
            or $state[$p:lk] = 329164                       (: 'xsl-formatter' ':' 'count' :)
            or $state[$p:lk] = 329165                       (: 'xslt' ':' 'count' :)
            or $state[$p:lk] = 345477                       (: NCName^Token ':' 'default' :)
            or $state[$p:lk] = 345488                       (: 'add-attribute' ':' 'default' :)
            or $state[$p:lk] = 345489                       (: 'add-xml-base' ':' 'default' :)
            or $state[$p:lk] = 345491                       (: 'compare' ':' 'default' :)
            or $state[$p:lk] = 345492                       (: 'count' ':' 'default' :)
            or $state[$p:lk] = 345493                       (: 'default' ':' 'default' :)
            or $state[$p:lk] = 345494                       (: 'delete' ':' 'default' :)
            or $state[$p:lk] = 345495                       (: 'directory-list' ':' 'default' :)
            or $state[$p:lk] = 345497                       (: 'else' ':' 'default' :)
            or $state[$p:lk] = 345499                       (: 'error' ':' 'default' :)
            or $state[$p:lk] = 345500                       (: 'escape-markup' ':' 'default' :)
            or $state[$p:lk] = 345501                       (: 'exec' ':' 'default' :)
            or $state[$p:lk] = 345502                       (: 'filter' ':' 'default' :)
            or $state[$p:lk] = 345503                       (: 'for-each' ':' 'default' :)
            or $state[$p:lk] = 345505                       (: 'hash' ':' 'default' :)
            or $state[$p:lk] = 345506                       (: 'http-request' ':' 'default' :)
            or $state[$p:lk] = 345507                       (: 'identity' ':' 'default' :)
            or $state[$p:lk] = 345508                       (: 'if' ':' 'default' :)
            or $state[$p:lk] = 345509                       (: 'insert' ':' 'default' :)
            or $state[$p:lk] = 345511                       (: 'label-elements' ':' 'default' :)
            or $state[$p:lk] = 345512                       (: 'library' ':' 'default' :)
            or $state[$p:lk] = 345513                       (: 'load' ':' 'default' :)
            or $state[$p:lk] = 345514                       (: 'make-absolute-uris' ':' 'default' :)
            or $state[$p:lk] = 345515                       (: 'namespace' ':' 'default' :)
            or $state[$p:lk] = 345516                       (: 'namespace-rename' ':' 'default' :)
            or $state[$p:lk] = 345517                       (: 'pack' ':' 'default' :)
            or $state[$p:lk] = 345518                       (: 'parameters' ':' 'default' :)
            or $state[$p:lk] = 345520                       (: 'pipeline' ':' 'default' :)
            or $state[$p:lk] = 345522                       (: 'rename' ':' 'default' :)
            or $state[$p:lk] = 345523                       (: 'replace' ':' 'default' :)
            or $state[$p:lk] = 345526                       (: 'set-attributes' ':' 'default' :)
            or $state[$p:lk] = 345527                       (: 'sink' ':' 'default' :)
            or $state[$p:lk] = 345528                       (: 'split-sequence' ':' 'default' :)
            or $state[$p:lk] = 345529                       (: 'step' ':' 'default' :)
            or $state[$p:lk] = 345530                       (: 'store' ':' 'default' :)
            or $state[$p:lk] = 345531                       (: 'string-replace' ':' 'default' :)
            or $state[$p:lk] = 345532                       (: 'try' ':' 'default' :)
            or $state[$p:lk] = 345533                       (: 'unescape-markup' ':' 'default' :)
            or $state[$p:lk] = 345534                       (: 'unwrap' ':' 'default' :)
            or $state[$p:lk] = 345535                       (: 'uuid' ':' 'default' :)
            or $state[$p:lk] = 345536                       (: 'validate-with-relax-ng' ':' 'default' :)
            or $state[$p:lk] = 345537                       (: 'validate-with-schematron' ':' 'default' :)
            or $state[$p:lk] = 345538                       (: 'validate-with-xml-schema' ':' 'default' :)
            or $state[$p:lk] = 345539                       (: 'variable' ':' 'default' :)
            or $state[$p:lk] = 345540                       (: 'viewport' ':' 'default' :)
            or $state[$p:lk] = 345542                       (: 'wrap' ':' 'default' :)
            or $state[$p:lk] = 345543                       (: 'wrap-sequence' ':' 'default' :)
            or $state[$p:lk] = 345544                       (: 'www-form-urldecode' ':' 'default' :)
            or $state[$p:lk] = 345545                       (: 'www-form-urlencode' ':' 'default' :)
            or $state[$p:lk] = 345546                       (: 'xinclude' ':' 'default' :)
            or $state[$p:lk] = 345547                       (: 'xquery' ':' 'default' :)
            or $state[$p:lk] = 345548                       (: 'xsl-formatter' ':' 'default' :)
            or $state[$p:lk] = 345549                       (: 'xslt' ':' 'default' :)
            or $state[$p:lk] = 361861                       (: NCName^Token ':' 'delete' :)
            or $state[$p:lk] = 361872                       (: 'add-attribute' ':' 'delete' :)
            or $state[$p:lk] = 361873                       (: 'add-xml-base' ':' 'delete' :)
            or $state[$p:lk] = 361875                       (: 'compare' ':' 'delete' :)
            or $state[$p:lk] = 361876                       (: 'count' ':' 'delete' :)
            or $state[$p:lk] = 361877                       (: 'default' ':' 'delete' :)
            or $state[$p:lk] = 361878                       (: 'delete' ':' 'delete' :)
            or $state[$p:lk] = 361879                       (: 'directory-list' ':' 'delete' :)
            or $state[$p:lk] = 361881                       (: 'else' ':' 'delete' :)
            or $state[$p:lk] = 361883                       (: 'error' ':' 'delete' :)
            or $state[$p:lk] = 361884                       (: 'escape-markup' ':' 'delete' :)
            or $state[$p:lk] = 361885                       (: 'exec' ':' 'delete' :)
            or $state[$p:lk] = 361886                       (: 'filter' ':' 'delete' :)
            or $state[$p:lk] = 361887                       (: 'for-each' ':' 'delete' :)
            or $state[$p:lk] = 361889                       (: 'hash' ':' 'delete' :)
            or $state[$p:lk] = 361890                       (: 'http-request' ':' 'delete' :)
            or $state[$p:lk] = 361891                       (: 'identity' ':' 'delete' :)
            or $state[$p:lk] = 361892                       (: 'if' ':' 'delete' :)
            or $state[$p:lk] = 361893                       (: 'insert' ':' 'delete' :)
            or $state[$p:lk] = 361895                       (: 'label-elements' ':' 'delete' :)
            or $state[$p:lk] = 361896                       (: 'library' ':' 'delete' :)
            or $state[$p:lk] = 361897                       (: 'load' ':' 'delete' :)
            or $state[$p:lk] = 361898                       (: 'make-absolute-uris' ':' 'delete' :)
            or $state[$p:lk] = 361899                       (: 'namespace' ':' 'delete' :)
            or $state[$p:lk] = 361900                       (: 'namespace-rename' ':' 'delete' :)
            or $state[$p:lk] = 361901                       (: 'pack' ':' 'delete' :)
            or $state[$p:lk] = 361902                       (: 'parameters' ':' 'delete' :)
            or $state[$p:lk] = 361904                       (: 'pipeline' ':' 'delete' :)
            or $state[$p:lk] = 361906                       (: 'rename' ':' 'delete' :)
            or $state[$p:lk] = 361907                       (: 'replace' ':' 'delete' :)
            or $state[$p:lk] = 361910                       (: 'set-attributes' ':' 'delete' :)
            or $state[$p:lk] = 361911                       (: 'sink' ':' 'delete' :)
            or $state[$p:lk] = 361912                       (: 'split-sequence' ':' 'delete' :)
            or $state[$p:lk] = 361913                       (: 'step' ':' 'delete' :)
            or $state[$p:lk] = 361914                       (: 'store' ':' 'delete' :)
            or $state[$p:lk] = 361915                       (: 'string-replace' ':' 'delete' :)
            or $state[$p:lk] = 361916                       (: 'try' ':' 'delete' :)
            or $state[$p:lk] = 361917                       (: 'unescape-markup' ':' 'delete' :)
            or $state[$p:lk] = 361918                       (: 'unwrap' ':' 'delete' :)
            or $state[$p:lk] = 361919                       (: 'uuid' ':' 'delete' :)
            or $state[$p:lk] = 361920                       (: 'validate-with-relax-ng' ':' 'delete' :)
            or $state[$p:lk] = 361921                       (: 'validate-with-schematron' ':' 'delete' :)
            or $state[$p:lk] = 361922                       (: 'validate-with-xml-schema' ':' 'delete' :)
            or $state[$p:lk] = 361923                       (: 'variable' ':' 'delete' :)
            or $state[$p:lk] = 361924                       (: 'viewport' ':' 'delete' :)
            or $state[$p:lk] = 361926                       (: 'wrap' ':' 'delete' :)
            or $state[$p:lk] = 361927                       (: 'wrap-sequence' ':' 'delete' :)
            or $state[$p:lk] = 361928                       (: 'www-form-urldecode' ':' 'delete' :)
            or $state[$p:lk] = 361929                       (: 'www-form-urlencode' ':' 'delete' :)
            or $state[$p:lk] = 361930                       (: 'xinclude' ':' 'delete' :)
            or $state[$p:lk] = 361931                       (: 'xquery' ':' 'delete' :)
            or $state[$p:lk] = 361932                       (: 'xsl-formatter' ':' 'delete' :)
            or $state[$p:lk] = 361933                       (: 'xslt' ':' 'delete' :)
            or $state[$p:lk] = 378245                       (: NCName^Token ':' 'directory-list' :)
            or $state[$p:lk] = 378256                       (: 'add-attribute' ':' 'directory-list' :)
            or $state[$p:lk] = 378257                       (: 'add-xml-base' ':' 'directory-list' :)
            or $state[$p:lk] = 378259                       (: 'compare' ':' 'directory-list' :)
            or $state[$p:lk] = 378260                       (: 'count' ':' 'directory-list' :)
            or $state[$p:lk] = 378261                       (: 'default' ':' 'directory-list' :)
            or $state[$p:lk] = 378262                       (: 'delete' ':' 'directory-list' :)
            or $state[$p:lk] = 378263                       (: 'directory-list' ':' 'directory-list' :)
            or $state[$p:lk] = 378265                       (: 'else' ':' 'directory-list' :)
            or $state[$p:lk] = 378267                       (: 'error' ':' 'directory-list' :)
            or $state[$p:lk] = 378268                       (: 'escape-markup' ':' 'directory-list' :)
            or $state[$p:lk] = 378269                       (: 'exec' ':' 'directory-list' :)
            or $state[$p:lk] = 378270                       (: 'filter' ':' 'directory-list' :)
            or $state[$p:lk] = 378271                       (: 'for-each' ':' 'directory-list' :)
            or $state[$p:lk] = 378273                       (: 'hash' ':' 'directory-list' :)
            or $state[$p:lk] = 378274                       (: 'http-request' ':' 'directory-list' :)
            or $state[$p:lk] = 378275                       (: 'identity' ':' 'directory-list' :)
            or $state[$p:lk] = 378276                       (: 'if' ':' 'directory-list' :)
            or $state[$p:lk] = 378277                       (: 'insert' ':' 'directory-list' :)
            or $state[$p:lk] = 378279                       (: 'label-elements' ':' 'directory-list' :)
            or $state[$p:lk] = 378280                       (: 'library' ':' 'directory-list' :)
            or $state[$p:lk] = 378281                       (: 'load' ':' 'directory-list' :)
            or $state[$p:lk] = 378282                       (: 'make-absolute-uris' ':' 'directory-list' :)
            or $state[$p:lk] = 378283                       (: 'namespace' ':' 'directory-list' :)
            or $state[$p:lk] = 378284                       (: 'namespace-rename' ':' 'directory-list' :)
            or $state[$p:lk] = 378285                       (: 'pack' ':' 'directory-list' :)
            or $state[$p:lk] = 378286                       (: 'parameters' ':' 'directory-list' :)
            or $state[$p:lk] = 378288                       (: 'pipeline' ':' 'directory-list' :)
            or $state[$p:lk] = 378290                       (: 'rename' ':' 'directory-list' :)
            or $state[$p:lk] = 378291                       (: 'replace' ':' 'directory-list' :)
            or $state[$p:lk] = 378294                       (: 'set-attributes' ':' 'directory-list' :)
            or $state[$p:lk] = 378295                       (: 'sink' ':' 'directory-list' :)
            or $state[$p:lk] = 378296                       (: 'split-sequence' ':' 'directory-list' :)
            or $state[$p:lk] = 378297                       (: 'step' ':' 'directory-list' :)
            or $state[$p:lk] = 378298                       (: 'store' ':' 'directory-list' :)
            or $state[$p:lk] = 378299                       (: 'string-replace' ':' 'directory-list' :)
            or $state[$p:lk] = 378300                       (: 'try' ':' 'directory-list' :)
            or $state[$p:lk] = 378301                       (: 'unescape-markup' ':' 'directory-list' :)
            or $state[$p:lk] = 378302                       (: 'unwrap' ':' 'directory-list' :)
            or $state[$p:lk] = 378303                       (: 'uuid' ':' 'directory-list' :)
            or $state[$p:lk] = 378304                       (: 'validate-with-relax-ng' ':' 'directory-list' :)
            or $state[$p:lk] = 378305                       (: 'validate-with-schematron' ':' 'directory-list' :)
            or $state[$p:lk] = 378306                       (: 'validate-with-xml-schema' ':' 'directory-list' :)
            or $state[$p:lk] = 378307                       (: 'variable' ':' 'directory-list' :)
            or $state[$p:lk] = 378308                       (: 'viewport' ':' 'directory-list' :)
            or $state[$p:lk] = 378310                       (: 'wrap' ':' 'directory-list' :)
            or $state[$p:lk] = 378311                       (: 'wrap-sequence' ':' 'directory-list' :)
            or $state[$p:lk] = 378312                       (: 'www-form-urldecode' ':' 'directory-list' :)
            or $state[$p:lk] = 378313                       (: 'www-form-urlencode' ':' 'directory-list' :)
            or $state[$p:lk] = 378314                       (: 'xinclude' ':' 'directory-list' :)
            or $state[$p:lk] = 378315                       (: 'xquery' ':' 'directory-list' :)
            or $state[$p:lk] = 378316                       (: 'xsl-formatter' ':' 'directory-list' :)
            or $state[$p:lk] = 378317                       (: 'xslt' ':' 'directory-list' :)
            or $state[$p:lk] = 411013                       (: NCName^Token ':' 'else' :)
            or $state[$p:lk] = 411024                       (: 'add-attribute' ':' 'else' :)
            or $state[$p:lk] = 411025                       (: 'add-xml-base' ':' 'else' :)
            or $state[$p:lk] = 411027                       (: 'compare' ':' 'else' :)
            or $state[$p:lk] = 411028                       (: 'count' ':' 'else' :)
            or $state[$p:lk] = 411029                       (: 'default' ':' 'else' :)
            or $state[$p:lk] = 411030                       (: 'delete' ':' 'else' :)
            or $state[$p:lk] = 411031                       (: 'directory-list' ':' 'else' :)
            or $state[$p:lk] = 411033                       (: 'else' ':' 'else' :)
            or $state[$p:lk] = 411035                       (: 'error' ':' 'else' :)
            or $state[$p:lk] = 411036                       (: 'escape-markup' ':' 'else' :)
            or $state[$p:lk] = 411037                       (: 'exec' ':' 'else' :)
            or $state[$p:lk] = 411038                       (: 'filter' ':' 'else' :)
            or $state[$p:lk] = 411039                       (: 'for-each' ':' 'else' :)
            or $state[$p:lk] = 411041                       (: 'hash' ':' 'else' :)
            or $state[$p:lk] = 411042                       (: 'http-request' ':' 'else' :)
            or $state[$p:lk] = 411043                       (: 'identity' ':' 'else' :)
            or $state[$p:lk] = 411044                       (: 'if' ':' 'else' :)
            or $state[$p:lk] = 411045                       (: 'insert' ':' 'else' :)
            or $state[$p:lk] = 411047                       (: 'label-elements' ':' 'else' :)
            or $state[$p:lk] = 411048                       (: 'library' ':' 'else' :)
            or $state[$p:lk] = 411049                       (: 'load' ':' 'else' :)
            or $state[$p:lk] = 411050                       (: 'make-absolute-uris' ':' 'else' :)
            or $state[$p:lk] = 411051                       (: 'namespace' ':' 'else' :)
            or $state[$p:lk] = 411052                       (: 'namespace-rename' ':' 'else' :)
            or $state[$p:lk] = 411053                       (: 'pack' ':' 'else' :)
            or $state[$p:lk] = 411054                       (: 'parameters' ':' 'else' :)
            or $state[$p:lk] = 411056                       (: 'pipeline' ':' 'else' :)
            or $state[$p:lk] = 411058                       (: 'rename' ':' 'else' :)
            or $state[$p:lk] = 411059                       (: 'replace' ':' 'else' :)
            or $state[$p:lk] = 411062                       (: 'set-attributes' ':' 'else' :)
            or $state[$p:lk] = 411063                       (: 'sink' ':' 'else' :)
            or $state[$p:lk] = 411064                       (: 'split-sequence' ':' 'else' :)
            or $state[$p:lk] = 411065                       (: 'step' ':' 'else' :)
            or $state[$p:lk] = 411066                       (: 'store' ':' 'else' :)
            or $state[$p:lk] = 411067                       (: 'string-replace' ':' 'else' :)
            or $state[$p:lk] = 411068                       (: 'try' ':' 'else' :)
            or $state[$p:lk] = 411069                       (: 'unescape-markup' ':' 'else' :)
            or $state[$p:lk] = 411070                       (: 'unwrap' ':' 'else' :)
            or $state[$p:lk] = 411071                       (: 'uuid' ':' 'else' :)
            or $state[$p:lk] = 411072                       (: 'validate-with-relax-ng' ':' 'else' :)
            or $state[$p:lk] = 411073                       (: 'validate-with-schematron' ':' 'else' :)
            or $state[$p:lk] = 411074                       (: 'validate-with-xml-schema' ':' 'else' :)
            or $state[$p:lk] = 411075                       (: 'variable' ':' 'else' :)
            or $state[$p:lk] = 411076                       (: 'viewport' ':' 'else' :)
            or $state[$p:lk] = 411078                       (: 'wrap' ':' 'else' :)
            or $state[$p:lk] = 411079                       (: 'wrap-sequence' ':' 'else' :)
            or $state[$p:lk] = 411080                       (: 'www-form-urldecode' ':' 'else' :)
            or $state[$p:lk] = 411081                       (: 'www-form-urlencode' ':' 'else' :)
            or $state[$p:lk] = 411082                       (: 'xinclude' ':' 'else' :)
            or $state[$p:lk] = 411083                       (: 'xquery' ':' 'else' :)
            or $state[$p:lk] = 411084                       (: 'xsl-formatter' ':' 'else' :)
            or $state[$p:lk] = 411085                       (: 'xslt' ':' 'else' :)
            or $state[$p:lk] = 443781                       (: NCName^Token ':' 'error' :)
            or $state[$p:lk] = 443792                       (: 'add-attribute' ':' 'error' :)
            or $state[$p:lk] = 443793                       (: 'add-xml-base' ':' 'error' :)
            or $state[$p:lk] = 443795                       (: 'compare' ':' 'error' :)
            or $state[$p:lk] = 443796                       (: 'count' ':' 'error' :)
            or $state[$p:lk] = 443797                       (: 'default' ':' 'error' :)
            or $state[$p:lk] = 443798                       (: 'delete' ':' 'error' :)
            or $state[$p:lk] = 443799                       (: 'directory-list' ':' 'error' :)
            or $state[$p:lk] = 443801                       (: 'else' ':' 'error' :)
            or $state[$p:lk] = 443803                       (: 'error' ':' 'error' :)
            or $state[$p:lk] = 443804                       (: 'escape-markup' ':' 'error' :)
            or $state[$p:lk] = 443805                       (: 'exec' ':' 'error' :)
            or $state[$p:lk] = 443806                       (: 'filter' ':' 'error' :)
            or $state[$p:lk] = 443807                       (: 'for-each' ':' 'error' :)
            or $state[$p:lk] = 443809                       (: 'hash' ':' 'error' :)
            or $state[$p:lk] = 443810                       (: 'http-request' ':' 'error' :)
            or $state[$p:lk] = 443811                       (: 'identity' ':' 'error' :)
            or $state[$p:lk] = 443812                       (: 'if' ':' 'error' :)
            or $state[$p:lk] = 443813                       (: 'insert' ':' 'error' :)
            or $state[$p:lk] = 443815                       (: 'label-elements' ':' 'error' :)
            or $state[$p:lk] = 443816                       (: 'library' ':' 'error' :)
            or $state[$p:lk] = 443817                       (: 'load' ':' 'error' :)
            or $state[$p:lk] = 443818                       (: 'make-absolute-uris' ':' 'error' :)
            or $state[$p:lk] = 443819                       (: 'namespace' ':' 'error' :)
            or $state[$p:lk] = 443820                       (: 'namespace-rename' ':' 'error' :)
            or $state[$p:lk] = 443821                       (: 'pack' ':' 'error' :)
            or $state[$p:lk] = 443822                       (: 'parameters' ':' 'error' :)
            or $state[$p:lk] = 443824                       (: 'pipeline' ':' 'error' :)
            or $state[$p:lk] = 443826                       (: 'rename' ':' 'error' :)
            or $state[$p:lk] = 443827                       (: 'replace' ':' 'error' :)
            or $state[$p:lk] = 443830                       (: 'set-attributes' ':' 'error' :)
            or $state[$p:lk] = 443831                       (: 'sink' ':' 'error' :)
            or $state[$p:lk] = 443832                       (: 'split-sequence' ':' 'error' :)
            or $state[$p:lk] = 443833                       (: 'step' ':' 'error' :)
            or $state[$p:lk] = 443834                       (: 'store' ':' 'error' :)
            or $state[$p:lk] = 443835                       (: 'string-replace' ':' 'error' :)
            or $state[$p:lk] = 443836                       (: 'try' ':' 'error' :)
            or $state[$p:lk] = 443837                       (: 'unescape-markup' ':' 'error' :)
            or $state[$p:lk] = 443838                       (: 'unwrap' ':' 'error' :)
            or $state[$p:lk] = 443839                       (: 'uuid' ':' 'error' :)
            or $state[$p:lk] = 443840                       (: 'validate-with-relax-ng' ':' 'error' :)
            or $state[$p:lk] = 443841                       (: 'validate-with-schematron' ':' 'error' :)
            or $state[$p:lk] = 443842                       (: 'validate-with-xml-schema' ':' 'error' :)
            or $state[$p:lk] = 443843                       (: 'variable' ':' 'error' :)
            or $state[$p:lk] = 443844                       (: 'viewport' ':' 'error' :)
            or $state[$p:lk] = 443846                       (: 'wrap' ':' 'error' :)
            or $state[$p:lk] = 443847                       (: 'wrap-sequence' ':' 'error' :)
            or $state[$p:lk] = 443848                       (: 'www-form-urldecode' ':' 'error' :)
            or $state[$p:lk] = 443849                       (: 'www-form-urlencode' ':' 'error' :)
            or $state[$p:lk] = 443850                       (: 'xinclude' ':' 'error' :)
            or $state[$p:lk] = 443851                       (: 'xquery' ':' 'error' :)
            or $state[$p:lk] = 443852                       (: 'xsl-formatter' ':' 'error' :)
            or $state[$p:lk] = 443853                       (: 'xslt' ':' 'error' :)
            or $state[$p:lk] = 460165                       (: NCName^Token ':' 'escape-markup' :)
            or $state[$p:lk] = 460176                       (: 'add-attribute' ':' 'escape-markup' :)
            or $state[$p:lk] = 460177                       (: 'add-xml-base' ':' 'escape-markup' :)
            or $state[$p:lk] = 460179                       (: 'compare' ':' 'escape-markup' :)
            or $state[$p:lk] = 460180                       (: 'count' ':' 'escape-markup' :)
            or $state[$p:lk] = 460181                       (: 'default' ':' 'escape-markup' :)
            or $state[$p:lk] = 460182                       (: 'delete' ':' 'escape-markup' :)
            or $state[$p:lk] = 460183                       (: 'directory-list' ':' 'escape-markup' :)
            or $state[$p:lk] = 460185                       (: 'else' ':' 'escape-markup' :)
            or $state[$p:lk] = 460187                       (: 'error' ':' 'escape-markup' :)
            or $state[$p:lk] = 460188                       (: 'escape-markup' ':' 'escape-markup' :)
            or $state[$p:lk] = 460189                       (: 'exec' ':' 'escape-markup' :)
            or $state[$p:lk] = 460190                       (: 'filter' ':' 'escape-markup' :)
            or $state[$p:lk] = 460191                       (: 'for-each' ':' 'escape-markup' :)
            or $state[$p:lk] = 460193                       (: 'hash' ':' 'escape-markup' :)
            or $state[$p:lk] = 460194                       (: 'http-request' ':' 'escape-markup' :)
            or $state[$p:lk] = 460195                       (: 'identity' ':' 'escape-markup' :)
            or $state[$p:lk] = 460196                       (: 'if' ':' 'escape-markup' :)
            or $state[$p:lk] = 460197                       (: 'insert' ':' 'escape-markup' :)
            or $state[$p:lk] = 460199                       (: 'label-elements' ':' 'escape-markup' :)
            or $state[$p:lk] = 460200                       (: 'library' ':' 'escape-markup' :)
            or $state[$p:lk] = 460201                       (: 'load' ':' 'escape-markup' :)
            or $state[$p:lk] = 460202                       (: 'make-absolute-uris' ':' 'escape-markup' :)
            or $state[$p:lk] = 460203                       (: 'namespace' ':' 'escape-markup' :)
            or $state[$p:lk] = 460204                       (: 'namespace-rename' ':' 'escape-markup' :)
            or $state[$p:lk] = 460205                       (: 'pack' ':' 'escape-markup' :)
            or $state[$p:lk] = 460206                       (: 'parameters' ':' 'escape-markup' :)
            or $state[$p:lk] = 460208                       (: 'pipeline' ':' 'escape-markup' :)
            or $state[$p:lk] = 460210                       (: 'rename' ':' 'escape-markup' :)
            or $state[$p:lk] = 460211                       (: 'replace' ':' 'escape-markup' :)
            or $state[$p:lk] = 460214                       (: 'set-attributes' ':' 'escape-markup' :)
            or $state[$p:lk] = 460215                       (: 'sink' ':' 'escape-markup' :)
            or $state[$p:lk] = 460216                       (: 'split-sequence' ':' 'escape-markup' :)
            or $state[$p:lk] = 460217                       (: 'step' ':' 'escape-markup' :)
            or $state[$p:lk] = 460218                       (: 'store' ':' 'escape-markup' :)
            or $state[$p:lk] = 460219                       (: 'string-replace' ':' 'escape-markup' :)
            or $state[$p:lk] = 460220                       (: 'try' ':' 'escape-markup' :)
            or $state[$p:lk] = 460221                       (: 'unescape-markup' ':' 'escape-markup' :)
            or $state[$p:lk] = 460222                       (: 'unwrap' ':' 'escape-markup' :)
            or $state[$p:lk] = 460223                       (: 'uuid' ':' 'escape-markup' :)
            or $state[$p:lk] = 460224                       (: 'validate-with-relax-ng' ':' 'escape-markup' :)
            or $state[$p:lk] = 460225                       (: 'validate-with-schematron' ':' 'escape-markup' :)
            or $state[$p:lk] = 460226                       (: 'validate-with-xml-schema' ':' 'escape-markup' :)
            or $state[$p:lk] = 460227                       (: 'variable' ':' 'escape-markup' :)
            or $state[$p:lk] = 460228                       (: 'viewport' ':' 'escape-markup' :)
            or $state[$p:lk] = 460230                       (: 'wrap' ':' 'escape-markup' :)
            or $state[$p:lk] = 460231                       (: 'wrap-sequence' ':' 'escape-markup' :)
            or $state[$p:lk] = 460232                       (: 'www-form-urldecode' ':' 'escape-markup' :)
            or $state[$p:lk] = 460233                       (: 'www-form-urlencode' ':' 'escape-markup' :)
            or $state[$p:lk] = 460234                       (: 'xinclude' ':' 'escape-markup' :)
            or $state[$p:lk] = 460235                       (: 'xquery' ':' 'escape-markup' :)
            or $state[$p:lk] = 460236                       (: 'xsl-formatter' ':' 'escape-markup' :)
            or $state[$p:lk] = 460237                       (: 'xslt' ':' 'escape-markup' :)
            or $state[$p:lk] = 476549                       (: NCName^Token ':' 'exec' :)
            or $state[$p:lk] = 476560                       (: 'add-attribute' ':' 'exec' :)
            or $state[$p:lk] = 476561                       (: 'add-xml-base' ':' 'exec' :)
            or $state[$p:lk] = 476563                       (: 'compare' ':' 'exec' :)
            or $state[$p:lk] = 476564                       (: 'count' ':' 'exec' :)
            or $state[$p:lk] = 476565                       (: 'default' ':' 'exec' :)
            or $state[$p:lk] = 476566                       (: 'delete' ':' 'exec' :)
            or $state[$p:lk] = 476567                       (: 'directory-list' ':' 'exec' :)
            or $state[$p:lk] = 476569                       (: 'else' ':' 'exec' :)
            or $state[$p:lk] = 476571                       (: 'error' ':' 'exec' :)
            or $state[$p:lk] = 476572                       (: 'escape-markup' ':' 'exec' :)
            or $state[$p:lk] = 476573                       (: 'exec' ':' 'exec' :)
            or $state[$p:lk] = 476574                       (: 'filter' ':' 'exec' :)
            or $state[$p:lk] = 476575                       (: 'for-each' ':' 'exec' :)
            or $state[$p:lk] = 476577                       (: 'hash' ':' 'exec' :)
            or $state[$p:lk] = 476578                       (: 'http-request' ':' 'exec' :)
            or $state[$p:lk] = 476579                       (: 'identity' ':' 'exec' :)
            or $state[$p:lk] = 476580                       (: 'if' ':' 'exec' :)
            or $state[$p:lk] = 476581                       (: 'insert' ':' 'exec' :)
            or $state[$p:lk] = 476583                       (: 'label-elements' ':' 'exec' :)
            or $state[$p:lk] = 476584                       (: 'library' ':' 'exec' :)
            or $state[$p:lk] = 476585                       (: 'load' ':' 'exec' :)
            or $state[$p:lk] = 476586                       (: 'make-absolute-uris' ':' 'exec' :)
            or $state[$p:lk] = 476587                       (: 'namespace' ':' 'exec' :)
            or $state[$p:lk] = 476588                       (: 'namespace-rename' ':' 'exec' :)
            or $state[$p:lk] = 476589                       (: 'pack' ':' 'exec' :)
            or $state[$p:lk] = 476590                       (: 'parameters' ':' 'exec' :)
            or $state[$p:lk] = 476592                       (: 'pipeline' ':' 'exec' :)
            or $state[$p:lk] = 476594                       (: 'rename' ':' 'exec' :)
            or $state[$p:lk] = 476595                       (: 'replace' ':' 'exec' :)
            or $state[$p:lk] = 476598                       (: 'set-attributes' ':' 'exec' :)
            or $state[$p:lk] = 476599                       (: 'sink' ':' 'exec' :)
            or $state[$p:lk] = 476600                       (: 'split-sequence' ':' 'exec' :)
            or $state[$p:lk] = 476601                       (: 'step' ':' 'exec' :)
            or $state[$p:lk] = 476602                       (: 'store' ':' 'exec' :)
            or $state[$p:lk] = 476603                       (: 'string-replace' ':' 'exec' :)
            or $state[$p:lk] = 476604                       (: 'try' ':' 'exec' :)
            or $state[$p:lk] = 476605                       (: 'unescape-markup' ':' 'exec' :)
            or $state[$p:lk] = 476606                       (: 'unwrap' ':' 'exec' :)
            or $state[$p:lk] = 476607                       (: 'uuid' ':' 'exec' :)
            or $state[$p:lk] = 476608                       (: 'validate-with-relax-ng' ':' 'exec' :)
            or $state[$p:lk] = 476609                       (: 'validate-with-schematron' ':' 'exec' :)
            or $state[$p:lk] = 476610                       (: 'validate-with-xml-schema' ':' 'exec' :)
            or $state[$p:lk] = 476611                       (: 'variable' ':' 'exec' :)
            or $state[$p:lk] = 476612                       (: 'viewport' ':' 'exec' :)
            or $state[$p:lk] = 476614                       (: 'wrap' ':' 'exec' :)
            or $state[$p:lk] = 476615                       (: 'wrap-sequence' ':' 'exec' :)
            or $state[$p:lk] = 476616                       (: 'www-form-urldecode' ':' 'exec' :)
            or $state[$p:lk] = 476617                       (: 'www-form-urlencode' ':' 'exec' :)
            or $state[$p:lk] = 476618                       (: 'xinclude' ':' 'exec' :)
            or $state[$p:lk] = 476619                       (: 'xquery' ':' 'exec' :)
            or $state[$p:lk] = 476620                       (: 'xsl-formatter' ':' 'exec' :)
            or $state[$p:lk] = 476621                       (: 'xslt' ':' 'exec' :)
            or $state[$p:lk] = 492933                       (: NCName^Token ':' 'filter' :)
            or $state[$p:lk] = 492944                       (: 'add-attribute' ':' 'filter' :)
            or $state[$p:lk] = 492945                       (: 'add-xml-base' ':' 'filter' :)
            or $state[$p:lk] = 492947                       (: 'compare' ':' 'filter' :)
            or $state[$p:lk] = 492948                       (: 'count' ':' 'filter' :)
            or $state[$p:lk] = 492949                       (: 'default' ':' 'filter' :)
            or $state[$p:lk] = 492950                       (: 'delete' ':' 'filter' :)
            or $state[$p:lk] = 492951                       (: 'directory-list' ':' 'filter' :)
            or $state[$p:lk] = 492953                       (: 'else' ':' 'filter' :)
            or $state[$p:lk] = 492955                       (: 'error' ':' 'filter' :)
            or $state[$p:lk] = 492956                       (: 'escape-markup' ':' 'filter' :)
            or $state[$p:lk] = 492957                       (: 'exec' ':' 'filter' :)
            or $state[$p:lk] = 492958                       (: 'filter' ':' 'filter' :)
            or $state[$p:lk] = 492959                       (: 'for-each' ':' 'filter' :)
            or $state[$p:lk] = 492961                       (: 'hash' ':' 'filter' :)
            or $state[$p:lk] = 492962                       (: 'http-request' ':' 'filter' :)
            or $state[$p:lk] = 492963                       (: 'identity' ':' 'filter' :)
            or $state[$p:lk] = 492964                       (: 'if' ':' 'filter' :)
            or $state[$p:lk] = 492965                       (: 'insert' ':' 'filter' :)
            or $state[$p:lk] = 492967                       (: 'label-elements' ':' 'filter' :)
            or $state[$p:lk] = 492968                       (: 'library' ':' 'filter' :)
            or $state[$p:lk] = 492969                       (: 'load' ':' 'filter' :)
            or $state[$p:lk] = 492970                       (: 'make-absolute-uris' ':' 'filter' :)
            or $state[$p:lk] = 492971                       (: 'namespace' ':' 'filter' :)
            or $state[$p:lk] = 492972                       (: 'namespace-rename' ':' 'filter' :)
            or $state[$p:lk] = 492973                       (: 'pack' ':' 'filter' :)
            or $state[$p:lk] = 492974                       (: 'parameters' ':' 'filter' :)
            or $state[$p:lk] = 492976                       (: 'pipeline' ':' 'filter' :)
            or $state[$p:lk] = 492978                       (: 'rename' ':' 'filter' :)
            or $state[$p:lk] = 492979                       (: 'replace' ':' 'filter' :)
            or $state[$p:lk] = 492982                       (: 'set-attributes' ':' 'filter' :)
            or $state[$p:lk] = 492983                       (: 'sink' ':' 'filter' :)
            or $state[$p:lk] = 492984                       (: 'split-sequence' ':' 'filter' :)
            or $state[$p:lk] = 492985                       (: 'step' ':' 'filter' :)
            or $state[$p:lk] = 492986                       (: 'store' ':' 'filter' :)
            or $state[$p:lk] = 492987                       (: 'string-replace' ':' 'filter' :)
            or $state[$p:lk] = 492988                       (: 'try' ':' 'filter' :)
            or $state[$p:lk] = 492989                       (: 'unescape-markup' ':' 'filter' :)
            or $state[$p:lk] = 492990                       (: 'unwrap' ':' 'filter' :)
            or $state[$p:lk] = 492991                       (: 'uuid' ':' 'filter' :)
            or $state[$p:lk] = 492992                       (: 'validate-with-relax-ng' ':' 'filter' :)
            or $state[$p:lk] = 492993                       (: 'validate-with-schematron' ':' 'filter' :)
            or $state[$p:lk] = 492994                       (: 'validate-with-xml-schema' ':' 'filter' :)
            or $state[$p:lk] = 492995                       (: 'variable' ':' 'filter' :)
            or $state[$p:lk] = 492996                       (: 'viewport' ':' 'filter' :)
            or $state[$p:lk] = 492998                       (: 'wrap' ':' 'filter' :)
            or $state[$p:lk] = 492999                       (: 'wrap-sequence' ':' 'filter' :)
            or $state[$p:lk] = 493000                       (: 'www-form-urldecode' ':' 'filter' :)
            or $state[$p:lk] = 493001                       (: 'www-form-urlencode' ':' 'filter' :)
            or $state[$p:lk] = 493002                       (: 'xinclude' ':' 'filter' :)
            or $state[$p:lk] = 493003                       (: 'xquery' ':' 'filter' :)
            or $state[$p:lk] = 493004                       (: 'xsl-formatter' ':' 'filter' :)
            or $state[$p:lk] = 493005                       (: 'xslt' ':' 'filter' :)
            or $state[$p:lk] = 509317                       (: NCName^Token ':' 'for-each' :)
            or $state[$p:lk] = 509328                       (: 'add-attribute' ':' 'for-each' :)
            or $state[$p:lk] = 509329                       (: 'add-xml-base' ':' 'for-each' :)
            or $state[$p:lk] = 509331                       (: 'compare' ':' 'for-each' :)
            or $state[$p:lk] = 509332                       (: 'count' ':' 'for-each' :)
            or $state[$p:lk] = 509333                       (: 'default' ':' 'for-each' :)
            or $state[$p:lk] = 509334                       (: 'delete' ':' 'for-each' :)
            or $state[$p:lk] = 509335                       (: 'directory-list' ':' 'for-each' :)
            or $state[$p:lk] = 509337                       (: 'else' ':' 'for-each' :)
            or $state[$p:lk] = 509339                       (: 'error' ':' 'for-each' :)
            or $state[$p:lk] = 509340                       (: 'escape-markup' ':' 'for-each' :)
            or $state[$p:lk] = 509341                       (: 'exec' ':' 'for-each' :)
            or $state[$p:lk] = 509342                       (: 'filter' ':' 'for-each' :)
            or $state[$p:lk] = 509343                       (: 'for-each' ':' 'for-each' :)
            or $state[$p:lk] = 509345                       (: 'hash' ':' 'for-each' :)
            or $state[$p:lk] = 509346                       (: 'http-request' ':' 'for-each' :)
            or $state[$p:lk] = 509347                       (: 'identity' ':' 'for-each' :)
            or $state[$p:lk] = 509348                       (: 'if' ':' 'for-each' :)
            or $state[$p:lk] = 509349                       (: 'insert' ':' 'for-each' :)
            or $state[$p:lk] = 509351                       (: 'label-elements' ':' 'for-each' :)
            or $state[$p:lk] = 509352                       (: 'library' ':' 'for-each' :)
            or $state[$p:lk] = 509353                       (: 'load' ':' 'for-each' :)
            or $state[$p:lk] = 509354                       (: 'make-absolute-uris' ':' 'for-each' :)
            or $state[$p:lk] = 509355                       (: 'namespace' ':' 'for-each' :)
            or $state[$p:lk] = 509356                       (: 'namespace-rename' ':' 'for-each' :)
            or $state[$p:lk] = 509357                       (: 'pack' ':' 'for-each' :)
            or $state[$p:lk] = 509358                       (: 'parameters' ':' 'for-each' :)
            or $state[$p:lk] = 509360                       (: 'pipeline' ':' 'for-each' :)
            or $state[$p:lk] = 509362                       (: 'rename' ':' 'for-each' :)
            or $state[$p:lk] = 509363                       (: 'replace' ':' 'for-each' :)
            or $state[$p:lk] = 509366                       (: 'set-attributes' ':' 'for-each' :)
            or $state[$p:lk] = 509367                       (: 'sink' ':' 'for-each' :)
            or $state[$p:lk] = 509368                       (: 'split-sequence' ':' 'for-each' :)
            or $state[$p:lk] = 509369                       (: 'step' ':' 'for-each' :)
            or $state[$p:lk] = 509370                       (: 'store' ':' 'for-each' :)
            or $state[$p:lk] = 509371                       (: 'string-replace' ':' 'for-each' :)
            or $state[$p:lk] = 509372                       (: 'try' ':' 'for-each' :)
            or $state[$p:lk] = 509373                       (: 'unescape-markup' ':' 'for-each' :)
            or $state[$p:lk] = 509374                       (: 'unwrap' ':' 'for-each' :)
            or $state[$p:lk] = 509375                       (: 'uuid' ':' 'for-each' :)
            or $state[$p:lk] = 509376                       (: 'validate-with-relax-ng' ':' 'for-each' :)
            or $state[$p:lk] = 509377                       (: 'validate-with-schematron' ':' 'for-each' :)
            or $state[$p:lk] = 509378                       (: 'validate-with-xml-schema' ':' 'for-each' :)
            or $state[$p:lk] = 509379                       (: 'variable' ':' 'for-each' :)
            or $state[$p:lk] = 509380                       (: 'viewport' ':' 'for-each' :)
            or $state[$p:lk] = 509382                       (: 'wrap' ':' 'for-each' :)
            or $state[$p:lk] = 509383                       (: 'wrap-sequence' ':' 'for-each' :)
            or $state[$p:lk] = 509384                       (: 'www-form-urldecode' ':' 'for-each' :)
            or $state[$p:lk] = 509385                       (: 'www-form-urlencode' ':' 'for-each' :)
            or $state[$p:lk] = 509386                       (: 'xinclude' ':' 'for-each' :)
            or $state[$p:lk] = 509387                       (: 'xquery' ':' 'for-each' :)
            or $state[$p:lk] = 509388                       (: 'xsl-formatter' ':' 'for-each' :)
            or $state[$p:lk] = 509389                       (: 'xslt' ':' 'for-each' :)
            or $state[$p:lk] = 542085                       (: NCName^Token ':' 'hash' :)
            or $state[$p:lk] = 542096                       (: 'add-attribute' ':' 'hash' :)
            or $state[$p:lk] = 542097                       (: 'add-xml-base' ':' 'hash' :)
            or $state[$p:lk] = 542099                       (: 'compare' ':' 'hash' :)
            or $state[$p:lk] = 542100                       (: 'count' ':' 'hash' :)
            or $state[$p:lk] = 542101                       (: 'default' ':' 'hash' :)
            or $state[$p:lk] = 542102                       (: 'delete' ':' 'hash' :)
            or $state[$p:lk] = 542103                       (: 'directory-list' ':' 'hash' :)
            or $state[$p:lk] = 542105                       (: 'else' ':' 'hash' :)
            or $state[$p:lk] = 542107                       (: 'error' ':' 'hash' :)
            or $state[$p:lk] = 542108                       (: 'escape-markup' ':' 'hash' :)
            or $state[$p:lk] = 542109                       (: 'exec' ':' 'hash' :)
            or $state[$p:lk] = 542110                       (: 'filter' ':' 'hash' :)
            or $state[$p:lk] = 542111                       (: 'for-each' ':' 'hash' :)
            or $state[$p:lk] = 542113                       (: 'hash' ':' 'hash' :)
            or $state[$p:lk] = 542114                       (: 'http-request' ':' 'hash' :)
            or $state[$p:lk] = 542115                       (: 'identity' ':' 'hash' :)
            or $state[$p:lk] = 542116                       (: 'if' ':' 'hash' :)
            or $state[$p:lk] = 542117                       (: 'insert' ':' 'hash' :)
            or $state[$p:lk] = 542119                       (: 'label-elements' ':' 'hash' :)
            or $state[$p:lk] = 542120                       (: 'library' ':' 'hash' :)
            or $state[$p:lk] = 542121                       (: 'load' ':' 'hash' :)
            or $state[$p:lk] = 542122                       (: 'make-absolute-uris' ':' 'hash' :)
            or $state[$p:lk] = 542123                       (: 'namespace' ':' 'hash' :)
            or $state[$p:lk] = 542124                       (: 'namespace-rename' ':' 'hash' :)
            or $state[$p:lk] = 542125                       (: 'pack' ':' 'hash' :)
            or $state[$p:lk] = 542126                       (: 'parameters' ':' 'hash' :)
            or $state[$p:lk] = 542128                       (: 'pipeline' ':' 'hash' :)
            or $state[$p:lk] = 542130                       (: 'rename' ':' 'hash' :)
            or $state[$p:lk] = 542131                       (: 'replace' ':' 'hash' :)
            or $state[$p:lk] = 542134                       (: 'set-attributes' ':' 'hash' :)
            or $state[$p:lk] = 542135                       (: 'sink' ':' 'hash' :)
            or $state[$p:lk] = 542136                       (: 'split-sequence' ':' 'hash' :)
            or $state[$p:lk] = 542137                       (: 'step' ':' 'hash' :)
            or $state[$p:lk] = 542138                       (: 'store' ':' 'hash' :)
            or $state[$p:lk] = 542139                       (: 'string-replace' ':' 'hash' :)
            or $state[$p:lk] = 542140                       (: 'try' ':' 'hash' :)
            or $state[$p:lk] = 542141                       (: 'unescape-markup' ':' 'hash' :)
            or $state[$p:lk] = 542142                       (: 'unwrap' ':' 'hash' :)
            or $state[$p:lk] = 542143                       (: 'uuid' ':' 'hash' :)
            or $state[$p:lk] = 542144                       (: 'validate-with-relax-ng' ':' 'hash' :)
            or $state[$p:lk] = 542145                       (: 'validate-with-schematron' ':' 'hash' :)
            or $state[$p:lk] = 542146                       (: 'validate-with-xml-schema' ':' 'hash' :)
            or $state[$p:lk] = 542147                       (: 'variable' ':' 'hash' :)
            or $state[$p:lk] = 542148                       (: 'viewport' ':' 'hash' :)
            or $state[$p:lk] = 542150                       (: 'wrap' ':' 'hash' :)
            or $state[$p:lk] = 542151                       (: 'wrap-sequence' ':' 'hash' :)
            or $state[$p:lk] = 542152                       (: 'www-form-urldecode' ':' 'hash' :)
            or $state[$p:lk] = 542153                       (: 'www-form-urlencode' ':' 'hash' :)
            or $state[$p:lk] = 542154                       (: 'xinclude' ':' 'hash' :)
            or $state[$p:lk] = 542155                       (: 'xquery' ':' 'hash' :)
            or $state[$p:lk] = 542156                       (: 'xsl-formatter' ':' 'hash' :)
            or $state[$p:lk] = 542157                       (: 'xslt' ':' 'hash' :)
            or $state[$p:lk] = 558469                       (: NCName^Token ':' 'http-request' :)
            or $state[$p:lk] = 558480                       (: 'add-attribute' ':' 'http-request' :)
            or $state[$p:lk] = 558481                       (: 'add-xml-base' ':' 'http-request' :)
            or $state[$p:lk] = 558483                       (: 'compare' ':' 'http-request' :)
            or $state[$p:lk] = 558484                       (: 'count' ':' 'http-request' :)
            or $state[$p:lk] = 558485                       (: 'default' ':' 'http-request' :)
            or $state[$p:lk] = 558486                       (: 'delete' ':' 'http-request' :)
            or $state[$p:lk] = 558487                       (: 'directory-list' ':' 'http-request' :)
            or $state[$p:lk] = 558489                       (: 'else' ':' 'http-request' :)
            or $state[$p:lk] = 558491                       (: 'error' ':' 'http-request' :)
            or $state[$p:lk] = 558492                       (: 'escape-markup' ':' 'http-request' :)
            or $state[$p:lk] = 558493                       (: 'exec' ':' 'http-request' :)
            or $state[$p:lk] = 558494                       (: 'filter' ':' 'http-request' :)
            or $state[$p:lk] = 558495                       (: 'for-each' ':' 'http-request' :)
            or $state[$p:lk] = 558497                       (: 'hash' ':' 'http-request' :)
            or $state[$p:lk] = 558498                       (: 'http-request' ':' 'http-request' :)
            or $state[$p:lk] = 558499                       (: 'identity' ':' 'http-request' :)
            or $state[$p:lk] = 558500                       (: 'if' ':' 'http-request' :)
            or $state[$p:lk] = 558501                       (: 'insert' ':' 'http-request' :)
            or $state[$p:lk] = 558503                       (: 'label-elements' ':' 'http-request' :)
            or $state[$p:lk] = 558504                       (: 'library' ':' 'http-request' :)
            or $state[$p:lk] = 558505                       (: 'load' ':' 'http-request' :)
            or $state[$p:lk] = 558506                       (: 'make-absolute-uris' ':' 'http-request' :)
            or $state[$p:lk] = 558507                       (: 'namespace' ':' 'http-request' :)
            or $state[$p:lk] = 558508                       (: 'namespace-rename' ':' 'http-request' :)
            or $state[$p:lk] = 558509                       (: 'pack' ':' 'http-request' :)
            or $state[$p:lk] = 558510                       (: 'parameters' ':' 'http-request' :)
            or $state[$p:lk] = 558512                       (: 'pipeline' ':' 'http-request' :)
            or $state[$p:lk] = 558514                       (: 'rename' ':' 'http-request' :)
            or $state[$p:lk] = 558515                       (: 'replace' ':' 'http-request' :)
            or $state[$p:lk] = 558518                       (: 'set-attributes' ':' 'http-request' :)
            or $state[$p:lk] = 558519                       (: 'sink' ':' 'http-request' :)
            or $state[$p:lk] = 558520                       (: 'split-sequence' ':' 'http-request' :)
            or $state[$p:lk] = 558521                       (: 'step' ':' 'http-request' :)
            or $state[$p:lk] = 558522                       (: 'store' ':' 'http-request' :)
            or $state[$p:lk] = 558523                       (: 'string-replace' ':' 'http-request' :)
            or $state[$p:lk] = 558524                       (: 'try' ':' 'http-request' :)
            or $state[$p:lk] = 558525                       (: 'unescape-markup' ':' 'http-request' :)
            or $state[$p:lk] = 558526                       (: 'unwrap' ':' 'http-request' :)
            or $state[$p:lk] = 558527                       (: 'uuid' ':' 'http-request' :)
            or $state[$p:lk] = 558528                       (: 'validate-with-relax-ng' ':' 'http-request' :)
            or $state[$p:lk] = 558529                       (: 'validate-with-schematron' ':' 'http-request' :)
            or $state[$p:lk] = 558530                       (: 'validate-with-xml-schema' ':' 'http-request' :)
            or $state[$p:lk] = 558531                       (: 'variable' ':' 'http-request' :)
            or $state[$p:lk] = 558532                       (: 'viewport' ':' 'http-request' :)
            or $state[$p:lk] = 558534                       (: 'wrap' ':' 'http-request' :)
            or $state[$p:lk] = 558535                       (: 'wrap-sequence' ':' 'http-request' :)
            or $state[$p:lk] = 558536                       (: 'www-form-urldecode' ':' 'http-request' :)
            or $state[$p:lk] = 558537                       (: 'www-form-urlencode' ':' 'http-request' :)
            or $state[$p:lk] = 558538                       (: 'xinclude' ':' 'http-request' :)
            or $state[$p:lk] = 558539                       (: 'xquery' ':' 'http-request' :)
            or $state[$p:lk] = 558540                       (: 'xsl-formatter' ':' 'http-request' :)
            or $state[$p:lk] = 558541                       (: 'xslt' ':' 'http-request' :)
            or $state[$p:lk] = 574853                       (: NCName^Token ':' 'identity' :)
            or $state[$p:lk] = 574864                       (: 'add-attribute' ':' 'identity' :)
            or $state[$p:lk] = 574865                       (: 'add-xml-base' ':' 'identity' :)
            or $state[$p:lk] = 574867                       (: 'compare' ':' 'identity' :)
            or $state[$p:lk] = 574868                       (: 'count' ':' 'identity' :)
            or $state[$p:lk] = 574869                       (: 'default' ':' 'identity' :)
            or $state[$p:lk] = 574870                       (: 'delete' ':' 'identity' :)
            or $state[$p:lk] = 574871                       (: 'directory-list' ':' 'identity' :)
            or $state[$p:lk] = 574873                       (: 'else' ':' 'identity' :)
            or $state[$p:lk] = 574875                       (: 'error' ':' 'identity' :)
            or $state[$p:lk] = 574876                       (: 'escape-markup' ':' 'identity' :)
            or $state[$p:lk] = 574877                       (: 'exec' ':' 'identity' :)
            or $state[$p:lk] = 574878                       (: 'filter' ':' 'identity' :)
            or $state[$p:lk] = 574879                       (: 'for-each' ':' 'identity' :)
            or $state[$p:lk] = 574881                       (: 'hash' ':' 'identity' :)
            or $state[$p:lk] = 574882                       (: 'http-request' ':' 'identity' :)
            or $state[$p:lk] = 574883                       (: 'identity' ':' 'identity' :)
            or $state[$p:lk] = 574884                       (: 'if' ':' 'identity' :)
            or $state[$p:lk] = 574885                       (: 'insert' ':' 'identity' :)
            or $state[$p:lk] = 574887                       (: 'label-elements' ':' 'identity' :)
            or $state[$p:lk] = 574888                       (: 'library' ':' 'identity' :)
            or $state[$p:lk] = 574889                       (: 'load' ':' 'identity' :)
            or $state[$p:lk] = 574890                       (: 'make-absolute-uris' ':' 'identity' :)
            or $state[$p:lk] = 574891                       (: 'namespace' ':' 'identity' :)
            or $state[$p:lk] = 574892                       (: 'namespace-rename' ':' 'identity' :)
            or $state[$p:lk] = 574893                       (: 'pack' ':' 'identity' :)
            or $state[$p:lk] = 574894                       (: 'parameters' ':' 'identity' :)
            or $state[$p:lk] = 574896                       (: 'pipeline' ':' 'identity' :)
            or $state[$p:lk] = 574898                       (: 'rename' ':' 'identity' :)
            or $state[$p:lk] = 574899                       (: 'replace' ':' 'identity' :)
            or $state[$p:lk] = 574902                       (: 'set-attributes' ':' 'identity' :)
            or $state[$p:lk] = 574903                       (: 'sink' ':' 'identity' :)
            or $state[$p:lk] = 574904                       (: 'split-sequence' ':' 'identity' :)
            or $state[$p:lk] = 574905                       (: 'step' ':' 'identity' :)
            or $state[$p:lk] = 574906                       (: 'store' ':' 'identity' :)
            or $state[$p:lk] = 574907                       (: 'string-replace' ':' 'identity' :)
            or $state[$p:lk] = 574908                       (: 'try' ':' 'identity' :)
            or $state[$p:lk] = 574909                       (: 'unescape-markup' ':' 'identity' :)
            or $state[$p:lk] = 574910                       (: 'unwrap' ':' 'identity' :)
            or $state[$p:lk] = 574911                       (: 'uuid' ':' 'identity' :)
            or $state[$p:lk] = 574912                       (: 'validate-with-relax-ng' ':' 'identity' :)
            or $state[$p:lk] = 574913                       (: 'validate-with-schematron' ':' 'identity' :)
            or $state[$p:lk] = 574914                       (: 'validate-with-xml-schema' ':' 'identity' :)
            or $state[$p:lk] = 574915                       (: 'variable' ':' 'identity' :)
            or $state[$p:lk] = 574916                       (: 'viewport' ':' 'identity' :)
            or $state[$p:lk] = 574918                       (: 'wrap' ':' 'identity' :)
            or $state[$p:lk] = 574919                       (: 'wrap-sequence' ':' 'identity' :)
            or $state[$p:lk] = 574920                       (: 'www-form-urldecode' ':' 'identity' :)
            or $state[$p:lk] = 574921                       (: 'www-form-urlencode' ':' 'identity' :)
            or $state[$p:lk] = 574922                       (: 'xinclude' ':' 'identity' :)
            or $state[$p:lk] = 574923                       (: 'xquery' ':' 'identity' :)
            or $state[$p:lk] = 574924                       (: 'xsl-formatter' ':' 'identity' :)
            or $state[$p:lk] = 574925                       (: 'xslt' ':' 'identity' :)
            or $state[$p:lk] = 591237                       (: NCName^Token ':' 'if' :)
            or $state[$p:lk] = 591248                       (: 'add-attribute' ':' 'if' :)
            or $state[$p:lk] = 591249                       (: 'add-xml-base' ':' 'if' :)
            or $state[$p:lk] = 591251                       (: 'compare' ':' 'if' :)
            or $state[$p:lk] = 591252                       (: 'count' ':' 'if' :)
            or $state[$p:lk] = 591253                       (: 'default' ':' 'if' :)
            or $state[$p:lk] = 591254                       (: 'delete' ':' 'if' :)
            or $state[$p:lk] = 591255                       (: 'directory-list' ':' 'if' :)
            or $state[$p:lk] = 591257                       (: 'else' ':' 'if' :)
            or $state[$p:lk] = 591259                       (: 'error' ':' 'if' :)
            or $state[$p:lk] = 591260                       (: 'escape-markup' ':' 'if' :)
            or $state[$p:lk] = 591261                       (: 'exec' ':' 'if' :)
            or $state[$p:lk] = 591262                       (: 'filter' ':' 'if' :)
            or $state[$p:lk] = 591263                       (: 'for-each' ':' 'if' :)
            or $state[$p:lk] = 591265                       (: 'hash' ':' 'if' :)
            or $state[$p:lk] = 591266                       (: 'http-request' ':' 'if' :)
            or $state[$p:lk] = 591267                       (: 'identity' ':' 'if' :)
            or $state[$p:lk] = 591268                       (: 'if' ':' 'if' :)
            or $state[$p:lk] = 591269                       (: 'insert' ':' 'if' :)
            or $state[$p:lk] = 591271                       (: 'label-elements' ':' 'if' :)
            or $state[$p:lk] = 591272                       (: 'library' ':' 'if' :)
            or $state[$p:lk] = 591273                       (: 'load' ':' 'if' :)
            or $state[$p:lk] = 591274                       (: 'make-absolute-uris' ':' 'if' :)
            or $state[$p:lk] = 591275                       (: 'namespace' ':' 'if' :)
            or $state[$p:lk] = 591276                       (: 'namespace-rename' ':' 'if' :)
            or $state[$p:lk] = 591277                       (: 'pack' ':' 'if' :)
            or $state[$p:lk] = 591278                       (: 'parameters' ':' 'if' :)
            or $state[$p:lk] = 591280                       (: 'pipeline' ':' 'if' :)
            or $state[$p:lk] = 591282                       (: 'rename' ':' 'if' :)
            or $state[$p:lk] = 591283                       (: 'replace' ':' 'if' :)
            or $state[$p:lk] = 591286                       (: 'set-attributes' ':' 'if' :)
            or $state[$p:lk] = 591287                       (: 'sink' ':' 'if' :)
            or $state[$p:lk] = 591288                       (: 'split-sequence' ':' 'if' :)
            or $state[$p:lk] = 591289                       (: 'step' ':' 'if' :)
            or $state[$p:lk] = 591290                       (: 'store' ':' 'if' :)
            or $state[$p:lk] = 591291                       (: 'string-replace' ':' 'if' :)
            or $state[$p:lk] = 591292                       (: 'try' ':' 'if' :)
            or $state[$p:lk] = 591293                       (: 'unescape-markup' ':' 'if' :)
            or $state[$p:lk] = 591294                       (: 'unwrap' ':' 'if' :)
            or $state[$p:lk] = 591295                       (: 'uuid' ':' 'if' :)
            or $state[$p:lk] = 591296                       (: 'validate-with-relax-ng' ':' 'if' :)
            or $state[$p:lk] = 591297                       (: 'validate-with-schematron' ':' 'if' :)
            or $state[$p:lk] = 591298                       (: 'validate-with-xml-schema' ':' 'if' :)
            or $state[$p:lk] = 591299                       (: 'variable' ':' 'if' :)
            or $state[$p:lk] = 591300                       (: 'viewport' ':' 'if' :)
            or $state[$p:lk] = 591302                       (: 'wrap' ':' 'if' :)
            or $state[$p:lk] = 591303                       (: 'wrap-sequence' ':' 'if' :)
            or $state[$p:lk] = 591304                       (: 'www-form-urldecode' ':' 'if' :)
            or $state[$p:lk] = 591305                       (: 'www-form-urlencode' ':' 'if' :)
            or $state[$p:lk] = 591306                       (: 'xinclude' ':' 'if' :)
            or $state[$p:lk] = 591307                       (: 'xquery' ':' 'if' :)
            or $state[$p:lk] = 591308                       (: 'xsl-formatter' ':' 'if' :)
            or $state[$p:lk] = 591309                       (: 'xslt' ':' 'if' :)
            or $state[$p:lk] = 607621                       (: NCName^Token ':' 'insert' :)
            or $state[$p:lk] = 607632                       (: 'add-attribute' ':' 'insert' :)
            or $state[$p:lk] = 607633                       (: 'add-xml-base' ':' 'insert' :)
            or $state[$p:lk] = 607635                       (: 'compare' ':' 'insert' :)
            or $state[$p:lk] = 607636                       (: 'count' ':' 'insert' :)
            or $state[$p:lk] = 607637                       (: 'default' ':' 'insert' :)
            or $state[$p:lk] = 607638                       (: 'delete' ':' 'insert' :)
            or $state[$p:lk] = 607639                       (: 'directory-list' ':' 'insert' :)
            or $state[$p:lk] = 607641                       (: 'else' ':' 'insert' :)
            or $state[$p:lk] = 607643                       (: 'error' ':' 'insert' :)
            or $state[$p:lk] = 607644                       (: 'escape-markup' ':' 'insert' :)
            or $state[$p:lk] = 607645                       (: 'exec' ':' 'insert' :)
            or $state[$p:lk] = 607646                       (: 'filter' ':' 'insert' :)
            or $state[$p:lk] = 607647                       (: 'for-each' ':' 'insert' :)
            or $state[$p:lk] = 607649                       (: 'hash' ':' 'insert' :)
            or $state[$p:lk] = 607650                       (: 'http-request' ':' 'insert' :)
            or $state[$p:lk] = 607651                       (: 'identity' ':' 'insert' :)
            or $state[$p:lk] = 607652                       (: 'if' ':' 'insert' :)
            or $state[$p:lk] = 607653                       (: 'insert' ':' 'insert' :)
            or $state[$p:lk] = 607655                       (: 'label-elements' ':' 'insert' :)
            or $state[$p:lk] = 607656                       (: 'library' ':' 'insert' :)
            or $state[$p:lk] = 607657                       (: 'load' ':' 'insert' :)
            or $state[$p:lk] = 607658                       (: 'make-absolute-uris' ':' 'insert' :)
            or $state[$p:lk] = 607659                       (: 'namespace' ':' 'insert' :)
            or $state[$p:lk] = 607660                       (: 'namespace-rename' ':' 'insert' :)
            or $state[$p:lk] = 607661                       (: 'pack' ':' 'insert' :)
            or $state[$p:lk] = 607662                       (: 'parameters' ':' 'insert' :)
            or $state[$p:lk] = 607664                       (: 'pipeline' ':' 'insert' :)
            or $state[$p:lk] = 607666                       (: 'rename' ':' 'insert' :)
            or $state[$p:lk] = 607667                       (: 'replace' ':' 'insert' :)
            or $state[$p:lk] = 607670                       (: 'set-attributes' ':' 'insert' :)
            or $state[$p:lk] = 607671                       (: 'sink' ':' 'insert' :)
            or $state[$p:lk] = 607672                       (: 'split-sequence' ':' 'insert' :)
            or $state[$p:lk] = 607673                       (: 'step' ':' 'insert' :)
            or $state[$p:lk] = 607674                       (: 'store' ':' 'insert' :)
            or $state[$p:lk] = 607675                       (: 'string-replace' ':' 'insert' :)
            or $state[$p:lk] = 607676                       (: 'try' ':' 'insert' :)
            or $state[$p:lk] = 607677                       (: 'unescape-markup' ':' 'insert' :)
            or $state[$p:lk] = 607678                       (: 'unwrap' ':' 'insert' :)
            or $state[$p:lk] = 607679                       (: 'uuid' ':' 'insert' :)
            or $state[$p:lk] = 607680                       (: 'validate-with-relax-ng' ':' 'insert' :)
            or $state[$p:lk] = 607681                       (: 'validate-with-schematron' ':' 'insert' :)
            or $state[$p:lk] = 607682                       (: 'validate-with-xml-schema' ':' 'insert' :)
            or $state[$p:lk] = 607683                       (: 'variable' ':' 'insert' :)
            or $state[$p:lk] = 607684                       (: 'viewport' ':' 'insert' :)
            or $state[$p:lk] = 607686                       (: 'wrap' ':' 'insert' :)
            or $state[$p:lk] = 607687                       (: 'wrap-sequence' ':' 'insert' :)
            or $state[$p:lk] = 607688                       (: 'www-form-urldecode' ':' 'insert' :)
            or $state[$p:lk] = 607689                       (: 'www-form-urlencode' ':' 'insert' :)
            or $state[$p:lk] = 607690                       (: 'xinclude' ':' 'insert' :)
            or $state[$p:lk] = 607691                       (: 'xquery' ':' 'insert' :)
            or $state[$p:lk] = 607692                       (: 'xsl-formatter' ':' 'insert' :)
            or $state[$p:lk] = 607693                       (: 'xslt' ':' 'insert' :)
            or $state[$p:lk] = 640389                       (: NCName^Token ':' 'label-elements' :)
            or $state[$p:lk] = 640400                       (: 'add-attribute' ':' 'label-elements' :)
            or $state[$p:lk] = 640401                       (: 'add-xml-base' ':' 'label-elements' :)
            or $state[$p:lk] = 640403                       (: 'compare' ':' 'label-elements' :)
            or $state[$p:lk] = 640404                       (: 'count' ':' 'label-elements' :)
            or $state[$p:lk] = 640405                       (: 'default' ':' 'label-elements' :)
            or $state[$p:lk] = 640406                       (: 'delete' ':' 'label-elements' :)
            or $state[$p:lk] = 640407                       (: 'directory-list' ':' 'label-elements' :)
            or $state[$p:lk] = 640409                       (: 'else' ':' 'label-elements' :)
            or $state[$p:lk] = 640411                       (: 'error' ':' 'label-elements' :)
            or $state[$p:lk] = 640412                       (: 'escape-markup' ':' 'label-elements' :)
            or $state[$p:lk] = 640413                       (: 'exec' ':' 'label-elements' :)
            or $state[$p:lk] = 640414                       (: 'filter' ':' 'label-elements' :)
            or $state[$p:lk] = 640415                       (: 'for-each' ':' 'label-elements' :)
            or $state[$p:lk] = 640417                       (: 'hash' ':' 'label-elements' :)
            or $state[$p:lk] = 640418                       (: 'http-request' ':' 'label-elements' :)
            or $state[$p:lk] = 640419                       (: 'identity' ':' 'label-elements' :)
            or $state[$p:lk] = 640420                       (: 'if' ':' 'label-elements' :)
            or $state[$p:lk] = 640421                       (: 'insert' ':' 'label-elements' :)
            or $state[$p:lk] = 640423                       (: 'label-elements' ':' 'label-elements' :)
            or $state[$p:lk] = 640424                       (: 'library' ':' 'label-elements' :)
            or $state[$p:lk] = 640425                       (: 'load' ':' 'label-elements' :)
            or $state[$p:lk] = 640426                       (: 'make-absolute-uris' ':' 'label-elements' :)
            or $state[$p:lk] = 640427                       (: 'namespace' ':' 'label-elements' :)
            or $state[$p:lk] = 640428                       (: 'namespace-rename' ':' 'label-elements' :)
            or $state[$p:lk] = 640429                       (: 'pack' ':' 'label-elements' :)
            or $state[$p:lk] = 640430                       (: 'parameters' ':' 'label-elements' :)
            or $state[$p:lk] = 640432                       (: 'pipeline' ':' 'label-elements' :)
            or $state[$p:lk] = 640434                       (: 'rename' ':' 'label-elements' :)
            or $state[$p:lk] = 640435                       (: 'replace' ':' 'label-elements' :)
            or $state[$p:lk] = 640438                       (: 'set-attributes' ':' 'label-elements' :)
            or $state[$p:lk] = 640439                       (: 'sink' ':' 'label-elements' :)
            or $state[$p:lk] = 640440                       (: 'split-sequence' ':' 'label-elements' :)
            or $state[$p:lk] = 640441                       (: 'step' ':' 'label-elements' :)
            or $state[$p:lk] = 640442                       (: 'store' ':' 'label-elements' :)
            or $state[$p:lk] = 640443                       (: 'string-replace' ':' 'label-elements' :)
            or $state[$p:lk] = 640444                       (: 'try' ':' 'label-elements' :)
            or $state[$p:lk] = 640445                       (: 'unescape-markup' ':' 'label-elements' :)
            or $state[$p:lk] = 640446                       (: 'unwrap' ':' 'label-elements' :)
            or $state[$p:lk] = 640447                       (: 'uuid' ':' 'label-elements' :)
            or $state[$p:lk] = 640448                       (: 'validate-with-relax-ng' ':' 'label-elements' :)
            or $state[$p:lk] = 640449                       (: 'validate-with-schematron' ':' 'label-elements' :)
            or $state[$p:lk] = 640450                       (: 'validate-with-xml-schema' ':' 'label-elements' :)
            or $state[$p:lk] = 640451                       (: 'variable' ':' 'label-elements' :)
            or $state[$p:lk] = 640452                       (: 'viewport' ':' 'label-elements' :)
            or $state[$p:lk] = 640454                       (: 'wrap' ':' 'label-elements' :)
            or $state[$p:lk] = 640455                       (: 'wrap-sequence' ':' 'label-elements' :)
            or $state[$p:lk] = 640456                       (: 'www-form-urldecode' ':' 'label-elements' :)
            or $state[$p:lk] = 640457                       (: 'www-form-urlencode' ':' 'label-elements' :)
            or $state[$p:lk] = 640458                       (: 'xinclude' ':' 'label-elements' :)
            or $state[$p:lk] = 640459                       (: 'xquery' ':' 'label-elements' :)
            or $state[$p:lk] = 640460                       (: 'xsl-formatter' ':' 'label-elements' :)
            or $state[$p:lk] = 640461                       (: 'xslt' ':' 'label-elements' :)
            or $state[$p:lk] = 656773                       (: NCName^Token ':' 'library' :)
            or $state[$p:lk] = 656784                       (: 'add-attribute' ':' 'library' :)
            or $state[$p:lk] = 656785                       (: 'add-xml-base' ':' 'library' :)
            or $state[$p:lk] = 656787                       (: 'compare' ':' 'library' :)
            or $state[$p:lk] = 656788                       (: 'count' ':' 'library' :)
            or $state[$p:lk] = 656789                       (: 'default' ':' 'library' :)
            or $state[$p:lk] = 656790                       (: 'delete' ':' 'library' :)
            or $state[$p:lk] = 656791                       (: 'directory-list' ':' 'library' :)
            or $state[$p:lk] = 656793                       (: 'else' ':' 'library' :)
            or $state[$p:lk] = 656795                       (: 'error' ':' 'library' :)
            or $state[$p:lk] = 656796                       (: 'escape-markup' ':' 'library' :)
            or $state[$p:lk] = 656797                       (: 'exec' ':' 'library' :)
            or $state[$p:lk] = 656798                       (: 'filter' ':' 'library' :)
            or $state[$p:lk] = 656799                       (: 'for-each' ':' 'library' :)
            or $state[$p:lk] = 656801                       (: 'hash' ':' 'library' :)
            or $state[$p:lk] = 656802                       (: 'http-request' ':' 'library' :)
            or $state[$p:lk] = 656803                       (: 'identity' ':' 'library' :)
            or $state[$p:lk] = 656804                       (: 'if' ':' 'library' :)
            or $state[$p:lk] = 656805                       (: 'insert' ':' 'library' :)
            or $state[$p:lk] = 656807                       (: 'label-elements' ':' 'library' :)
            or $state[$p:lk] = 656808                       (: 'library' ':' 'library' :)
            or $state[$p:lk] = 656809                       (: 'load' ':' 'library' :)
            or $state[$p:lk] = 656810                       (: 'make-absolute-uris' ':' 'library' :)
            or $state[$p:lk] = 656811                       (: 'namespace' ':' 'library' :)
            or $state[$p:lk] = 656812                       (: 'namespace-rename' ':' 'library' :)
            or $state[$p:lk] = 656813                       (: 'pack' ':' 'library' :)
            or $state[$p:lk] = 656814                       (: 'parameters' ':' 'library' :)
            or $state[$p:lk] = 656816                       (: 'pipeline' ':' 'library' :)
            or $state[$p:lk] = 656818                       (: 'rename' ':' 'library' :)
            or $state[$p:lk] = 656819                       (: 'replace' ':' 'library' :)
            or $state[$p:lk] = 656822                       (: 'set-attributes' ':' 'library' :)
            or $state[$p:lk] = 656823                       (: 'sink' ':' 'library' :)
            or $state[$p:lk] = 656824                       (: 'split-sequence' ':' 'library' :)
            or $state[$p:lk] = 656825                       (: 'step' ':' 'library' :)
            or $state[$p:lk] = 656826                       (: 'store' ':' 'library' :)
            or $state[$p:lk] = 656827                       (: 'string-replace' ':' 'library' :)
            or $state[$p:lk] = 656828                       (: 'try' ':' 'library' :)
            or $state[$p:lk] = 656829                       (: 'unescape-markup' ':' 'library' :)
            or $state[$p:lk] = 656830                       (: 'unwrap' ':' 'library' :)
            or $state[$p:lk] = 656831                       (: 'uuid' ':' 'library' :)
            or $state[$p:lk] = 656832                       (: 'validate-with-relax-ng' ':' 'library' :)
            or $state[$p:lk] = 656833                       (: 'validate-with-schematron' ':' 'library' :)
            or $state[$p:lk] = 656834                       (: 'validate-with-xml-schema' ':' 'library' :)
            or $state[$p:lk] = 656835                       (: 'variable' ':' 'library' :)
            or $state[$p:lk] = 656836                       (: 'viewport' ':' 'library' :)
            or $state[$p:lk] = 656838                       (: 'wrap' ':' 'library' :)
            or $state[$p:lk] = 656839                       (: 'wrap-sequence' ':' 'library' :)
            or $state[$p:lk] = 656840                       (: 'www-form-urldecode' ':' 'library' :)
            or $state[$p:lk] = 656841                       (: 'www-form-urlencode' ':' 'library' :)
            or $state[$p:lk] = 656842                       (: 'xinclude' ':' 'library' :)
            or $state[$p:lk] = 656843                       (: 'xquery' ':' 'library' :)
            or $state[$p:lk] = 656844                       (: 'xsl-formatter' ':' 'library' :)
            or $state[$p:lk] = 656845                       (: 'xslt' ':' 'library' :)
            or $state[$p:lk] = 673157                       (: NCName^Token ':' 'load' :)
            or $state[$p:lk] = 673168                       (: 'add-attribute' ':' 'load' :)
            or $state[$p:lk] = 673169                       (: 'add-xml-base' ':' 'load' :)
            or $state[$p:lk] = 673171                       (: 'compare' ':' 'load' :)
            or $state[$p:lk] = 673172                       (: 'count' ':' 'load' :)
            or $state[$p:lk] = 673173                       (: 'default' ':' 'load' :)
            or $state[$p:lk] = 673174                       (: 'delete' ':' 'load' :)
            or $state[$p:lk] = 673175                       (: 'directory-list' ':' 'load' :)
            or $state[$p:lk] = 673177                       (: 'else' ':' 'load' :)
            or $state[$p:lk] = 673179                       (: 'error' ':' 'load' :)
            or $state[$p:lk] = 673180                       (: 'escape-markup' ':' 'load' :)
            or $state[$p:lk] = 673181                       (: 'exec' ':' 'load' :)
            or $state[$p:lk] = 673182                       (: 'filter' ':' 'load' :)
            or $state[$p:lk] = 673183                       (: 'for-each' ':' 'load' :)
            or $state[$p:lk] = 673185                       (: 'hash' ':' 'load' :)
            or $state[$p:lk] = 673186                       (: 'http-request' ':' 'load' :)
            or $state[$p:lk] = 673187                       (: 'identity' ':' 'load' :)
            or $state[$p:lk] = 673188                       (: 'if' ':' 'load' :)
            or $state[$p:lk] = 673189                       (: 'insert' ':' 'load' :)
            or $state[$p:lk] = 673191                       (: 'label-elements' ':' 'load' :)
            or $state[$p:lk] = 673192                       (: 'library' ':' 'load' :)
            or $state[$p:lk] = 673193                       (: 'load' ':' 'load' :)
            or $state[$p:lk] = 673194                       (: 'make-absolute-uris' ':' 'load' :)
            or $state[$p:lk] = 673195                       (: 'namespace' ':' 'load' :)
            or $state[$p:lk] = 673196                       (: 'namespace-rename' ':' 'load' :)
            or $state[$p:lk] = 673197                       (: 'pack' ':' 'load' :)
            or $state[$p:lk] = 673198                       (: 'parameters' ':' 'load' :)
            or $state[$p:lk] = 673200                       (: 'pipeline' ':' 'load' :)
            or $state[$p:lk] = 673202                       (: 'rename' ':' 'load' :)
            or $state[$p:lk] = 673203                       (: 'replace' ':' 'load' :)
            or $state[$p:lk] = 673206                       (: 'set-attributes' ':' 'load' :)
            or $state[$p:lk] = 673207                       (: 'sink' ':' 'load' :)
            or $state[$p:lk] = 673208                       (: 'split-sequence' ':' 'load' :)
            or $state[$p:lk] = 673209                       (: 'step' ':' 'load' :)
            or $state[$p:lk] = 673210                       (: 'store' ':' 'load' :)
            or $state[$p:lk] = 673211                       (: 'string-replace' ':' 'load' :)
            or $state[$p:lk] = 673212                       (: 'try' ':' 'load' :)
            or $state[$p:lk] = 673213                       (: 'unescape-markup' ':' 'load' :)
            or $state[$p:lk] = 673214                       (: 'unwrap' ':' 'load' :)
            or $state[$p:lk] = 673215                       (: 'uuid' ':' 'load' :)
            or $state[$p:lk] = 673216                       (: 'validate-with-relax-ng' ':' 'load' :)
            or $state[$p:lk] = 673217                       (: 'validate-with-schematron' ':' 'load' :)
            or $state[$p:lk] = 673218                       (: 'validate-with-xml-schema' ':' 'load' :)
            or $state[$p:lk] = 673219                       (: 'variable' ':' 'load' :)
            or $state[$p:lk] = 673220                       (: 'viewport' ':' 'load' :)
            or $state[$p:lk] = 673222                       (: 'wrap' ':' 'load' :)
            or $state[$p:lk] = 673223                       (: 'wrap-sequence' ':' 'load' :)
            or $state[$p:lk] = 673224                       (: 'www-form-urldecode' ':' 'load' :)
            or $state[$p:lk] = 673225                       (: 'www-form-urlencode' ':' 'load' :)
            or $state[$p:lk] = 673226                       (: 'xinclude' ':' 'load' :)
            or $state[$p:lk] = 673227                       (: 'xquery' ':' 'load' :)
            or $state[$p:lk] = 673228                       (: 'xsl-formatter' ':' 'load' :)
            or $state[$p:lk] = 673229                       (: 'xslt' ':' 'load' :)
            or $state[$p:lk] = 689541                       (: NCName^Token ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689552                       (: 'add-attribute' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689553                       (: 'add-xml-base' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689555                       (: 'compare' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689556                       (: 'count' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689557                       (: 'default' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689558                       (: 'delete' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689559                       (: 'directory-list' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689561                       (: 'else' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689563                       (: 'error' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689564                       (: 'escape-markup' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689565                       (: 'exec' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689566                       (: 'filter' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689567                       (: 'for-each' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689569                       (: 'hash' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689570                       (: 'http-request' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689571                       (: 'identity' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689572                       (: 'if' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689573                       (: 'insert' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689575                       (: 'label-elements' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689576                       (: 'library' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689577                       (: 'load' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689578                       (: 'make-absolute-uris' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689579                       (: 'namespace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689580                       (: 'namespace-rename' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689581                       (: 'pack' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689582                       (: 'parameters' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689584                       (: 'pipeline' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689586                       (: 'rename' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689587                       (: 'replace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689590                       (: 'set-attributes' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689591                       (: 'sink' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689592                       (: 'split-sequence' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689593                       (: 'step' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689594                       (: 'store' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689595                       (: 'string-replace' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689596                       (: 'try' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689597                       (: 'unescape-markup' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689598                       (: 'unwrap' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689599                       (: 'uuid' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689600                       (: 'validate-with-relax-ng' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689601                       (: 'validate-with-schematron' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689602                       (: 'validate-with-xml-schema' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689603                       (: 'variable' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689604                       (: 'viewport' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689606                       (: 'wrap' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689607                       (: 'wrap-sequence' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689608                       (: 'www-form-urldecode' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689609                       (: 'www-form-urlencode' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689610                       (: 'xinclude' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689611                       (: 'xquery' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689612                       (: 'xsl-formatter' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 689613                       (: 'xslt' ':' 'make-absolute-uris' :)
            or $state[$p:lk] = 705925                       (: NCName^Token ':' 'namespace' :)
            or $state[$p:lk] = 705936                       (: 'add-attribute' ':' 'namespace' :)
            or $state[$p:lk] = 705937                       (: 'add-xml-base' ':' 'namespace' :)
            or $state[$p:lk] = 705939                       (: 'compare' ':' 'namespace' :)
            or $state[$p:lk] = 705940                       (: 'count' ':' 'namespace' :)
            or $state[$p:lk] = 705941                       (: 'default' ':' 'namespace' :)
            or $state[$p:lk] = 705942                       (: 'delete' ':' 'namespace' :)
            or $state[$p:lk] = 705943                       (: 'directory-list' ':' 'namespace' :)
            or $state[$p:lk] = 705945                       (: 'else' ':' 'namespace' :)
            or $state[$p:lk] = 705947                       (: 'error' ':' 'namespace' :)
            or $state[$p:lk] = 705948                       (: 'escape-markup' ':' 'namespace' :)
            or $state[$p:lk] = 705949                       (: 'exec' ':' 'namespace' :)
            or $state[$p:lk] = 705950                       (: 'filter' ':' 'namespace' :)
            or $state[$p:lk] = 705951                       (: 'for-each' ':' 'namespace' :)
            or $state[$p:lk] = 705953                       (: 'hash' ':' 'namespace' :)
            or $state[$p:lk] = 705954                       (: 'http-request' ':' 'namespace' :)
            or $state[$p:lk] = 705955                       (: 'identity' ':' 'namespace' :)
            or $state[$p:lk] = 705956                       (: 'if' ':' 'namespace' :)
            or $state[$p:lk] = 705957                       (: 'insert' ':' 'namespace' :)
            or $state[$p:lk] = 705959                       (: 'label-elements' ':' 'namespace' :)
            or $state[$p:lk] = 705960                       (: 'library' ':' 'namespace' :)
            or $state[$p:lk] = 705961                       (: 'load' ':' 'namespace' :)
            or $state[$p:lk] = 705962                       (: 'make-absolute-uris' ':' 'namespace' :)
            or $state[$p:lk] = 705963                       (: 'namespace' ':' 'namespace' :)
            or $state[$p:lk] = 705964                       (: 'namespace-rename' ':' 'namespace' :)
            or $state[$p:lk] = 705965                       (: 'pack' ':' 'namespace' :)
            or $state[$p:lk] = 705966                       (: 'parameters' ':' 'namespace' :)
            or $state[$p:lk] = 705968                       (: 'pipeline' ':' 'namespace' :)
            or $state[$p:lk] = 705970                       (: 'rename' ':' 'namespace' :)
            or $state[$p:lk] = 705971                       (: 'replace' ':' 'namespace' :)
            or $state[$p:lk] = 705974                       (: 'set-attributes' ':' 'namespace' :)
            or $state[$p:lk] = 705975                       (: 'sink' ':' 'namespace' :)
            or $state[$p:lk] = 705976                       (: 'split-sequence' ':' 'namespace' :)
            or $state[$p:lk] = 705977                       (: 'step' ':' 'namespace' :)
            or $state[$p:lk] = 705978                       (: 'store' ':' 'namespace' :)
            or $state[$p:lk] = 705979                       (: 'string-replace' ':' 'namespace' :)
            or $state[$p:lk] = 705980                       (: 'try' ':' 'namespace' :)
            or $state[$p:lk] = 705981                       (: 'unescape-markup' ':' 'namespace' :)
            or $state[$p:lk] = 705982                       (: 'unwrap' ':' 'namespace' :)
            or $state[$p:lk] = 705983                       (: 'uuid' ':' 'namespace' :)
            or $state[$p:lk] = 705984                       (: 'validate-with-relax-ng' ':' 'namespace' :)
            or $state[$p:lk] = 705985                       (: 'validate-with-schematron' ':' 'namespace' :)
            or $state[$p:lk] = 705986                       (: 'validate-with-xml-schema' ':' 'namespace' :)
            or $state[$p:lk] = 705987                       (: 'variable' ':' 'namespace' :)
            or $state[$p:lk] = 705988                       (: 'viewport' ':' 'namespace' :)
            or $state[$p:lk] = 705990                       (: 'wrap' ':' 'namespace' :)
            or $state[$p:lk] = 705991                       (: 'wrap-sequence' ':' 'namespace' :)
            or $state[$p:lk] = 705992                       (: 'www-form-urldecode' ':' 'namespace' :)
            or $state[$p:lk] = 705993                       (: 'www-form-urlencode' ':' 'namespace' :)
            or $state[$p:lk] = 705994                       (: 'xinclude' ':' 'namespace' :)
            or $state[$p:lk] = 705995                       (: 'xquery' ':' 'namespace' :)
            or $state[$p:lk] = 705996                       (: 'xsl-formatter' ':' 'namespace' :)
            or $state[$p:lk] = 705997                       (: 'xslt' ':' 'namespace' :)
            or $state[$p:lk] = 722309                       (: NCName^Token ':' 'namespace-rename' :)
            or $state[$p:lk] = 722320                       (: 'add-attribute' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722321                       (: 'add-xml-base' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722323                       (: 'compare' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722324                       (: 'count' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722325                       (: 'default' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722326                       (: 'delete' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722327                       (: 'directory-list' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722329                       (: 'else' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722331                       (: 'error' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722332                       (: 'escape-markup' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722333                       (: 'exec' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722334                       (: 'filter' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722335                       (: 'for-each' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722337                       (: 'hash' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722338                       (: 'http-request' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722339                       (: 'identity' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722340                       (: 'if' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722341                       (: 'insert' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722343                       (: 'label-elements' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722344                       (: 'library' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722345                       (: 'load' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722346                       (: 'make-absolute-uris' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722347                       (: 'namespace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722348                       (: 'namespace-rename' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722349                       (: 'pack' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722350                       (: 'parameters' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722352                       (: 'pipeline' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722354                       (: 'rename' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722355                       (: 'replace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722358                       (: 'set-attributes' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722359                       (: 'sink' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722360                       (: 'split-sequence' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722361                       (: 'step' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722362                       (: 'store' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722363                       (: 'string-replace' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722364                       (: 'try' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722365                       (: 'unescape-markup' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722366                       (: 'unwrap' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722367                       (: 'uuid' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722368                       (: 'validate-with-relax-ng' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722369                       (: 'validate-with-schematron' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722370                       (: 'validate-with-xml-schema' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722371                       (: 'variable' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722372                       (: 'viewport' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722374                       (: 'wrap' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722375                       (: 'wrap-sequence' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722376                       (: 'www-form-urldecode' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722377                       (: 'www-form-urlencode' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722378                       (: 'xinclude' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722379                       (: 'xquery' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722380                       (: 'xsl-formatter' ':' 'namespace-rename' :)
            or $state[$p:lk] = 722381                       (: 'xslt' ':' 'namespace-rename' :)
            or $state[$p:lk] = 738693                       (: NCName^Token ':' 'pack' :)
            or $state[$p:lk] = 738704                       (: 'add-attribute' ':' 'pack' :)
            or $state[$p:lk] = 738705                       (: 'add-xml-base' ':' 'pack' :)
            or $state[$p:lk] = 738707                       (: 'compare' ':' 'pack' :)
            or $state[$p:lk] = 738708                       (: 'count' ':' 'pack' :)
            or $state[$p:lk] = 738709                       (: 'default' ':' 'pack' :)
            or $state[$p:lk] = 738710                       (: 'delete' ':' 'pack' :)
            or $state[$p:lk] = 738711                       (: 'directory-list' ':' 'pack' :)
            or $state[$p:lk] = 738713                       (: 'else' ':' 'pack' :)
            or $state[$p:lk] = 738715                       (: 'error' ':' 'pack' :)
            or $state[$p:lk] = 738716                       (: 'escape-markup' ':' 'pack' :)
            or $state[$p:lk] = 738717                       (: 'exec' ':' 'pack' :)
            or $state[$p:lk] = 738718                       (: 'filter' ':' 'pack' :)
            or $state[$p:lk] = 738719                       (: 'for-each' ':' 'pack' :)
            or $state[$p:lk] = 738721                       (: 'hash' ':' 'pack' :)
            or $state[$p:lk] = 738722                       (: 'http-request' ':' 'pack' :)
            or $state[$p:lk] = 738723                       (: 'identity' ':' 'pack' :)
            or $state[$p:lk] = 738724                       (: 'if' ':' 'pack' :)
            or $state[$p:lk] = 738725                       (: 'insert' ':' 'pack' :)
            or $state[$p:lk] = 738727                       (: 'label-elements' ':' 'pack' :)
            or $state[$p:lk] = 738728                       (: 'library' ':' 'pack' :)
            or $state[$p:lk] = 738729                       (: 'load' ':' 'pack' :)
            or $state[$p:lk] = 738730                       (: 'make-absolute-uris' ':' 'pack' :)
            or $state[$p:lk] = 738731                       (: 'namespace' ':' 'pack' :)
            or $state[$p:lk] = 738732                       (: 'namespace-rename' ':' 'pack' :)
            or $state[$p:lk] = 738733                       (: 'pack' ':' 'pack' :)
            or $state[$p:lk] = 738734                       (: 'parameters' ':' 'pack' :)
            or $state[$p:lk] = 738736                       (: 'pipeline' ':' 'pack' :)
            or $state[$p:lk] = 738738                       (: 'rename' ':' 'pack' :)
            or $state[$p:lk] = 738739                       (: 'replace' ':' 'pack' :)
            or $state[$p:lk] = 738742                       (: 'set-attributes' ':' 'pack' :)
            or $state[$p:lk] = 738743                       (: 'sink' ':' 'pack' :)
            or $state[$p:lk] = 738744                       (: 'split-sequence' ':' 'pack' :)
            or $state[$p:lk] = 738745                       (: 'step' ':' 'pack' :)
            or $state[$p:lk] = 738746                       (: 'store' ':' 'pack' :)
            or $state[$p:lk] = 738747                       (: 'string-replace' ':' 'pack' :)
            or $state[$p:lk] = 738748                       (: 'try' ':' 'pack' :)
            or $state[$p:lk] = 738749                       (: 'unescape-markup' ':' 'pack' :)
            or $state[$p:lk] = 738750                       (: 'unwrap' ':' 'pack' :)
            or $state[$p:lk] = 738751                       (: 'uuid' ':' 'pack' :)
            or $state[$p:lk] = 738752                       (: 'validate-with-relax-ng' ':' 'pack' :)
            or $state[$p:lk] = 738753                       (: 'validate-with-schematron' ':' 'pack' :)
            or $state[$p:lk] = 738754                       (: 'validate-with-xml-schema' ':' 'pack' :)
            or $state[$p:lk] = 738755                       (: 'variable' ':' 'pack' :)
            or $state[$p:lk] = 738756                       (: 'viewport' ':' 'pack' :)
            or $state[$p:lk] = 738758                       (: 'wrap' ':' 'pack' :)
            or $state[$p:lk] = 738759                       (: 'wrap-sequence' ':' 'pack' :)
            or $state[$p:lk] = 738760                       (: 'www-form-urldecode' ':' 'pack' :)
            or $state[$p:lk] = 738761                       (: 'www-form-urlencode' ':' 'pack' :)
            or $state[$p:lk] = 738762                       (: 'xinclude' ':' 'pack' :)
            or $state[$p:lk] = 738763                       (: 'xquery' ':' 'pack' :)
            or $state[$p:lk] = 738764                       (: 'xsl-formatter' ':' 'pack' :)
            or $state[$p:lk] = 738765                       (: 'xslt' ':' 'pack' :)
            or $state[$p:lk] = 755077                       (: NCName^Token ':' 'parameters' :)
            or $state[$p:lk] = 755088                       (: 'add-attribute' ':' 'parameters' :)
            or $state[$p:lk] = 755089                       (: 'add-xml-base' ':' 'parameters' :)
            or $state[$p:lk] = 755091                       (: 'compare' ':' 'parameters' :)
            or $state[$p:lk] = 755092                       (: 'count' ':' 'parameters' :)
            or $state[$p:lk] = 755093                       (: 'default' ':' 'parameters' :)
            or $state[$p:lk] = 755094                       (: 'delete' ':' 'parameters' :)
            or $state[$p:lk] = 755095                       (: 'directory-list' ':' 'parameters' :)
            or $state[$p:lk] = 755097                       (: 'else' ':' 'parameters' :)
            or $state[$p:lk] = 755099                       (: 'error' ':' 'parameters' :)
            or $state[$p:lk] = 755100                       (: 'escape-markup' ':' 'parameters' :)
            or $state[$p:lk] = 755101                       (: 'exec' ':' 'parameters' :)
            or $state[$p:lk] = 755102                       (: 'filter' ':' 'parameters' :)
            or $state[$p:lk] = 755103                       (: 'for-each' ':' 'parameters' :)
            or $state[$p:lk] = 755105                       (: 'hash' ':' 'parameters' :)
            or $state[$p:lk] = 755106                       (: 'http-request' ':' 'parameters' :)
            or $state[$p:lk] = 755107                       (: 'identity' ':' 'parameters' :)
            or $state[$p:lk] = 755108                       (: 'if' ':' 'parameters' :)
            or $state[$p:lk] = 755109                       (: 'insert' ':' 'parameters' :)
            or $state[$p:lk] = 755111                       (: 'label-elements' ':' 'parameters' :)
            or $state[$p:lk] = 755112                       (: 'library' ':' 'parameters' :)
            or $state[$p:lk] = 755113                       (: 'load' ':' 'parameters' :)
            or $state[$p:lk] = 755114                       (: 'make-absolute-uris' ':' 'parameters' :)
            or $state[$p:lk] = 755115                       (: 'namespace' ':' 'parameters' :)
            or $state[$p:lk] = 755116                       (: 'namespace-rename' ':' 'parameters' :)
            or $state[$p:lk] = 755117                       (: 'pack' ':' 'parameters' :)
            or $state[$p:lk] = 755118                       (: 'parameters' ':' 'parameters' :)
            or $state[$p:lk] = 755120                       (: 'pipeline' ':' 'parameters' :)
            or $state[$p:lk] = 755122                       (: 'rename' ':' 'parameters' :)
            or $state[$p:lk] = 755123                       (: 'replace' ':' 'parameters' :)
            or $state[$p:lk] = 755126                       (: 'set-attributes' ':' 'parameters' :)
            or $state[$p:lk] = 755127                       (: 'sink' ':' 'parameters' :)
            or $state[$p:lk] = 755128                       (: 'split-sequence' ':' 'parameters' :)
            or $state[$p:lk] = 755129                       (: 'step' ':' 'parameters' :)
            or $state[$p:lk] = 755130                       (: 'store' ':' 'parameters' :)
            or $state[$p:lk] = 755131                       (: 'string-replace' ':' 'parameters' :)
            or $state[$p:lk] = 755132                       (: 'try' ':' 'parameters' :)
            or $state[$p:lk] = 755133                       (: 'unescape-markup' ':' 'parameters' :)
            or $state[$p:lk] = 755134                       (: 'unwrap' ':' 'parameters' :)
            or $state[$p:lk] = 755135                       (: 'uuid' ':' 'parameters' :)
            or $state[$p:lk] = 755136                       (: 'validate-with-relax-ng' ':' 'parameters' :)
            or $state[$p:lk] = 755137                       (: 'validate-with-schematron' ':' 'parameters' :)
            or $state[$p:lk] = 755138                       (: 'validate-with-xml-schema' ':' 'parameters' :)
            or $state[$p:lk] = 755139                       (: 'variable' ':' 'parameters' :)
            or $state[$p:lk] = 755140                       (: 'viewport' ':' 'parameters' :)
            or $state[$p:lk] = 755142                       (: 'wrap' ':' 'parameters' :)
            or $state[$p:lk] = 755143                       (: 'wrap-sequence' ':' 'parameters' :)
            or $state[$p:lk] = 755144                       (: 'www-form-urldecode' ':' 'parameters' :)
            or $state[$p:lk] = 755145                       (: 'www-form-urlencode' ':' 'parameters' :)
            or $state[$p:lk] = 755146                       (: 'xinclude' ':' 'parameters' :)
            or $state[$p:lk] = 755147                       (: 'xquery' ':' 'parameters' :)
            or $state[$p:lk] = 755148                       (: 'xsl-formatter' ':' 'parameters' :)
            or $state[$p:lk] = 755149                       (: 'xslt' ':' 'parameters' :)
            or $state[$p:lk] = 787845                       (: NCName^Token ':' 'pipeline' :)
            or $state[$p:lk] = 787856                       (: 'add-attribute' ':' 'pipeline' :)
            or $state[$p:lk] = 787857                       (: 'add-xml-base' ':' 'pipeline' :)
            or $state[$p:lk] = 787859                       (: 'compare' ':' 'pipeline' :)
            or $state[$p:lk] = 787860                       (: 'count' ':' 'pipeline' :)
            or $state[$p:lk] = 787861                       (: 'default' ':' 'pipeline' :)
            or $state[$p:lk] = 787862                       (: 'delete' ':' 'pipeline' :)
            or $state[$p:lk] = 787863                       (: 'directory-list' ':' 'pipeline' :)
            or $state[$p:lk] = 787865                       (: 'else' ':' 'pipeline' :)
            or $state[$p:lk] = 787867                       (: 'error' ':' 'pipeline' :)
            or $state[$p:lk] = 787868                       (: 'escape-markup' ':' 'pipeline' :)
            or $state[$p:lk] = 787869                       (: 'exec' ':' 'pipeline' :)
            or $state[$p:lk] = 787870                       (: 'filter' ':' 'pipeline' :)
            or $state[$p:lk] = 787871                       (: 'for-each' ':' 'pipeline' :)
            or $state[$p:lk] = 787873                       (: 'hash' ':' 'pipeline' :)
            or $state[$p:lk] = 787874                       (: 'http-request' ':' 'pipeline' :)
            or $state[$p:lk] = 787875                       (: 'identity' ':' 'pipeline' :)
            or $state[$p:lk] = 787876                       (: 'if' ':' 'pipeline' :)
            or $state[$p:lk] = 787877                       (: 'insert' ':' 'pipeline' :)
            or $state[$p:lk] = 787879                       (: 'label-elements' ':' 'pipeline' :)
            or $state[$p:lk] = 787880                       (: 'library' ':' 'pipeline' :)
            or $state[$p:lk] = 787881                       (: 'load' ':' 'pipeline' :)
            or $state[$p:lk] = 787882                       (: 'make-absolute-uris' ':' 'pipeline' :)
            or $state[$p:lk] = 787883                       (: 'namespace' ':' 'pipeline' :)
            or $state[$p:lk] = 787884                       (: 'namespace-rename' ':' 'pipeline' :)
            or $state[$p:lk] = 787885                       (: 'pack' ':' 'pipeline' :)
            or $state[$p:lk] = 787886                       (: 'parameters' ':' 'pipeline' :)
            or $state[$p:lk] = 787888                       (: 'pipeline' ':' 'pipeline' :)
            or $state[$p:lk] = 787890                       (: 'rename' ':' 'pipeline' :)
            or $state[$p:lk] = 787891                       (: 'replace' ':' 'pipeline' :)
            or $state[$p:lk] = 787894                       (: 'set-attributes' ':' 'pipeline' :)
            or $state[$p:lk] = 787895                       (: 'sink' ':' 'pipeline' :)
            or $state[$p:lk] = 787896                       (: 'split-sequence' ':' 'pipeline' :)
            or $state[$p:lk] = 787897                       (: 'step' ':' 'pipeline' :)
            or $state[$p:lk] = 787898                       (: 'store' ':' 'pipeline' :)
            or $state[$p:lk] = 787899                       (: 'string-replace' ':' 'pipeline' :)
            or $state[$p:lk] = 787900                       (: 'try' ':' 'pipeline' :)
            or $state[$p:lk] = 787901                       (: 'unescape-markup' ':' 'pipeline' :)
            or $state[$p:lk] = 787902                       (: 'unwrap' ':' 'pipeline' :)
            or $state[$p:lk] = 787903                       (: 'uuid' ':' 'pipeline' :)
            or $state[$p:lk] = 787904                       (: 'validate-with-relax-ng' ':' 'pipeline' :)
            or $state[$p:lk] = 787905                       (: 'validate-with-schematron' ':' 'pipeline' :)
            or $state[$p:lk] = 787906                       (: 'validate-with-xml-schema' ':' 'pipeline' :)
            or $state[$p:lk] = 787907                       (: 'variable' ':' 'pipeline' :)
            or $state[$p:lk] = 787908                       (: 'viewport' ':' 'pipeline' :)
            or $state[$p:lk] = 787910                       (: 'wrap' ':' 'pipeline' :)
            or $state[$p:lk] = 787911                       (: 'wrap-sequence' ':' 'pipeline' :)
            or $state[$p:lk] = 787912                       (: 'www-form-urldecode' ':' 'pipeline' :)
            or $state[$p:lk] = 787913                       (: 'www-form-urlencode' ':' 'pipeline' :)
            or $state[$p:lk] = 787914                       (: 'xinclude' ':' 'pipeline' :)
            or $state[$p:lk] = 787915                       (: 'xquery' ':' 'pipeline' :)
            or $state[$p:lk] = 787916                       (: 'xsl-formatter' ':' 'pipeline' :)
            or $state[$p:lk] = 787917                       (: 'xslt' ':' 'pipeline' :)
            or $state[$p:lk] = 820613                       (: NCName^Token ':' 'rename' :)
            or $state[$p:lk] = 820624                       (: 'add-attribute' ':' 'rename' :)
            or $state[$p:lk] = 820625                       (: 'add-xml-base' ':' 'rename' :)
            or $state[$p:lk] = 820627                       (: 'compare' ':' 'rename' :)
            or $state[$p:lk] = 820628                       (: 'count' ':' 'rename' :)
            or $state[$p:lk] = 820629                       (: 'default' ':' 'rename' :)
            or $state[$p:lk] = 820630                       (: 'delete' ':' 'rename' :)
            or $state[$p:lk] = 820631                       (: 'directory-list' ':' 'rename' :)
            or $state[$p:lk] = 820633                       (: 'else' ':' 'rename' :)
            or $state[$p:lk] = 820635                       (: 'error' ':' 'rename' :)
            or $state[$p:lk] = 820636                       (: 'escape-markup' ':' 'rename' :)
            or $state[$p:lk] = 820637                       (: 'exec' ':' 'rename' :)
            or $state[$p:lk] = 820638                       (: 'filter' ':' 'rename' :)
            or $state[$p:lk] = 820639                       (: 'for-each' ':' 'rename' :)
            or $state[$p:lk] = 820641                       (: 'hash' ':' 'rename' :)
            or $state[$p:lk] = 820642                       (: 'http-request' ':' 'rename' :)
            or $state[$p:lk] = 820643                       (: 'identity' ':' 'rename' :)
            or $state[$p:lk] = 820644                       (: 'if' ':' 'rename' :)
            or $state[$p:lk] = 820645                       (: 'insert' ':' 'rename' :)
            or $state[$p:lk] = 820647                       (: 'label-elements' ':' 'rename' :)
            or $state[$p:lk] = 820648                       (: 'library' ':' 'rename' :)
            or $state[$p:lk] = 820649                       (: 'load' ':' 'rename' :)
            or $state[$p:lk] = 820650                       (: 'make-absolute-uris' ':' 'rename' :)
            or $state[$p:lk] = 820651                       (: 'namespace' ':' 'rename' :)
            or $state[$p:lk] = 820652                       (: 'namespace-rename' ':' 'rename' :)
            or $state[$p:lk] = 820653                       (: 'pack' ':' 'rename' :)
            or $state[$p:lk] = 820654                       (: 'parameters' ':' 'rename' :)
            or $state[$p:lk] = 820656                       (: 'pipeline' ':' 'rename' :)
            or $state[$p:lk] = 820658                       (: 'rename' ':' 'rename' :)
            or $state[$p:lk] = 820659                       (: 'replace' ':' 'rename' :)
            or $state[$p:lk] = 820662                       (: 'set-attributes' ':' 'rename' :)
            or $state[$p:lk] = 820663                       (: 'sink' ':' 'rename' :)
            or $state[$p:lk] = 820664                       (: 'split-sequence' ':' 'rename' :)
            or $state[$p:lk] = 820665                       (: 'step' ':' 'rename' :)
            or $state[$p:lk] = 820666                       (: 'store' ':' 'rename' :)
            or $state[$p:lk] = 820667                       (: 'string-replace' ':' 'rename' :)
            or $state[$p:lk] = 820668                       (: 'try' ':' 'rename' :)
            or $state[$p:lk] = 820669                       (: 'unescape-markup' ':' 'rename' :)
            or $state[$p:lk] = 820670                       (: 'unwrap' ':' 'rename' :)
            or $state[$p:lk] = 820671                       (: 'uuid' ':' 'rename' :)
            or $state[$p:lk] = 820672                       (: 'validate-with-relax-ng' ':' 'rename' :)
            or $state[$p:lk] = 820673                       (: 'validate-with-schematron' ':' 'rename' :)
            or $state[$p:lk] = 820674                       (: 'validate-with-xml-schema' ':' 'rename' :)
            or $state[$p:lk] = 820675                       (: 'variable' ':' 'rename' :)
            or $state[$p:lk] = 820676                       (: 'viewport' ':' 'rename' :)
            or $state[$p:lk] = 820678                       (: 'wrap' ':' 'rename' :)
            or $state[$p:lk] = 820679                       (: 'wrap-sequence' ':' 'rename' :)
            or $state[$p:lk] = 820680                       (: 'www-form-urldecode' ':' 'rename' :)
            or $state[$p:lk] = 820681                       (: 'www-form-urlencode' ':' 'rename' :)
            or $state[$p:lk] = 820682                       (: 'xinclude' ':' 'rename' :)
            or $state[$p:lk] = 820683                       (: 'xquery' ':' 'rename' :)
            or $state[$p:lk] = 820684                       (: 'xsl-formatter' ':' 'rename' :)
            or $state[$p:lk] = 820685                       (: 'xslt' ':' 'rename' :)
            or $state[$p:lk] = 836997                       (: NCName^Token ':' 'replace' :)
            or $state[$p:lk] = 837008                       (: 'add-attribute' ':' 'replace' :)
            or $state[$p:lk] = 837009                       (: 'add-xml-base' ':' 'replace' :)
            or $state[$p:lk] = 837011                       (: 'compare' ':' 'replace' :)
            or $state[$p:lk] = 837012                       (: 'count' ':' 'replace' :)
            or $state[$p:lk] = 837013                       (: 'default' ':' 'replace' :)
            or $state[$p:lk] = 837014                       (: 'delete' ':' 'replace' :)
            or $state[$p:lk] = 837015                       (: 'directory-list' ':' 'replace' :)
            or $state[$p:lk] = 837017                       (: 'else' ':' 'replace' :)
            or $state[$p:lk] = 837019                       (: 'error' ':' 'replace' :)
            or $state[$p:lk] = 837020                       (: 'escape-markup' ':' 'replace' :)
            or $state[$p:lk] = 837021                       (: 'exec' ':' 'replace' :)
            or $state[$p:lk] = 837022                       (: 'filter' ':' 'replace' :)
            or $state[$p:lk] = 837023                       (: 'for-each' ':' 'replace' :)
            or $state[$p:lk] = 837025                       (: 'hash' ':' 'replace' :)
            or $state[$p:lk] = 837026                       (: 'http-request' ':' 'replace' :)
            or $state[$p:lk] = 837027                       (: 'identity' ':' 'replace' :)
            or $state[$p:lk] = 837028                       (: 'if' ':' 'replace' :)
            or $state[$p:lk] = 837029                       (: 'insert' ':' 'replace' :)
            or $state[$p:lk] = 837031                       (: 'label-elements' ':' 'replace' :)
            or $state[$p:lk] = 837032                       (: 'library' ':' 'replace' :)
            or $state[$p:lk] = 837033                       (: 'load' ':' 'replace' :)
            or $state[$p:lk] = 837034                       (: 'make-absolute-uris' ':' 'replace' :)
            or $state[$p:lk] = 837035                       (: 'namespace' ':' 'replace' :)
            or $state[$p:lk] = 837036                       (: 'namespace-rename' ':' 'replace' :)
            or $state[$p:lk] = 837037                       (: 'pack' ':' 'replace' :)
            or $state[$p:lk] = 837038                       (: 'parameters' ':' 'replace' :)
            or $state[$p:lk] = 837040                       (: 'pipeline' ':' 'replace' :)
            or $state[$p:lk] = 837042                       (: 'rename' ':' 'replace' :)
            or $state[$p:lk] = 837043                       (: 'replace' ':' 'replace' :)
            or $state[$p:lk] = 837046                       (: 'set-attributes' ':' 'replace' :)
            or $state[$p:lk] = 837047                       (: 'sink' ':' 'replace' :)
            or $state[$p:lk] = 837048                       (: 'split-sequence' ':' 'replace' :)
            or $state[$p:lk] = 837049                       (: 'step' ':' 'replace' :)
            or $state[$p:lk] = 837050                       (: 'store' ':' 'replace' :)
            or $state[$p:lk] = 837051                       (: 'string-replace' ':' 'replace' :)
            or $state[$p:lk] = 837052                       (: 'try' ':' 'replace' :)
            or $state[$p:lk] = 837053                       (: 'unescape-markup' ':' 'replace' :)
            or $state[$p:lk] = 837054                       (: 'unwrap' ':' 'replace' :)
            or $state[$p:lk] = 837055                       (: 'uuid' ':' 'replace' :)
            or $state[$p:lk] = 837056                       (: 'validate-with-relax-ng' ':' 'replace' :)
            or $state[$p:lk] = 837057                       (: 'validate-with-schematron' ':' 'replace' :)
            or $state[$p:lk] = 837058                       (: 'validate-with-xml-schema' ':' 'replace' :)
            or $state[$p:lk] = 837059                       (: 'variable' ':' 'replace' :)
            or $state[$p:lk] = 837060                       (: 'viewport' ':' 'replace' :)
            or $state[$p:lk] = 837062                       (: 'wrap' ':' 'replace' :)
            or $state[$p:lk] = 837063                       (: 'wrap-sequence' ':' 'replace' :)
            or $state[$p:lk] = 837064                       (: 'www-form-urldecode' ':' 'replace' :)
            or $state[$p:lk] = 837065                       (: 'www-form-urlencode' ':' 'replace' :)
            or $state[$p:lk] = 837066                       (: 'xinclude' ':' 'replace' :)
            or $state[$p:lk] = 837067                       (: 'xquery' ':' 'replace' :)
            or $state[$p:lk] = 837068                       (: 'xsl-formatter' ':' 'replace' :)
            or $state[$p:lk] = 837069                       (: 'xslt' ':' 'replace' :)
            or $state[$p:lk] = 886149                       (: NCName^Token ':' 'set-attributes' :)
            or $state[$p:lk] = 886160                       (: 'add-attribute' ':' 'set-attributes' :)
            or $state[$p:lk] = 886161                       (: 'add-xml-base' ':' 'set-attributes' :)
            or $state[$p:lk] = 886163                       (: 'compare' ':' 'set-attributes' :)
            or $state[$p:lk] = 886164                       (: 'count' ':' 'set-attributes' :)
            or $state[$p:lk] = 886165                       (: 'default' ':' 'set-attributes' :)
            or $state[$p:lk] = 886166                       (: 'delete' ':' 'set-attributes' :)
            or $state[$p:lk] = 886167                       (: 'directory-list' ':' 'set-attributes' :)
            or $state[$p:lk] = 886169                       (: 'else' ':' 'set-attributes' :)
            or $state[$p:lk] = 886171                       (: 'error' ':' 'set-attributes' :)
            or $state[$p:lk] = 886172                       (: 'escape-markup' ':' 'set-attributes' :)
            or $state[$p:lk] = 886173                       (: 'exec' ':' 'set-attributes' :)
            or $state[$p:lk] = 886174                       (: 'filter' ':' 'set-attributes' :)
            or $state[$p:lk] = 886175                       (: 'for-each' ':' 'set-attributes' :)
            or $state[$p:lk] = 886177                       (: 'hash' ':' 'set-attributes' :)
            or $state[$p:lk] = 886178                       (: 'http-request' ':' 'set-attributes' :)
            or $state[$p:lk] = 886179                       (: 'identity' ':' 'set-attributes' :)
            or $state[$p:lk] = 886180                       (: 'if' ':' 'set-attributes' :)
            or $state[$p:lk] = 886181                       (: 'insert' ':' 'set-attributes' :)
            or $state[$p:lk] = 886183                       (: 'label-elements' ':' 'set-attributes' :)
            or $state[$p:lk] = 886184                       (: 'library' ':' 'set-attributes' :)
            or $state[$p:lk] = 886185                       (: 'load' ':' 'set-attributes' :)
            or $state[$p:lk] = 886186                       (: 'make-absolute-uris' ':' 'set-attributes' :)
            or $state[$p:lk] = 886187                       (: 'namespace' ':' 'set-attributes' :)
            or $state[$p:lk] = 886188                       (: 'namespace-rename' ':' 'set-attributes' :)
            or $state[$p:lk] = 886189                       (: 'pack' ':' 'set-attributes' :)
            or $state[$p:lk] = 886190                       (: 'parameters' ':' 'set-attributes' :)
            or $state[$p:lk] = 886192                       (: 'pipeline' ':' 'set-attributes' :)
            or $state[$p:lk] = 886194                       (: 'rename' ':' 'set-attributes' :)
            or $state[$p:lk] = 886195                       (: 'replace' ':' 'set-attributes' :)
            or $state[$p:lk] = 886198                       (: 'set-attributes' ':' 'set-attributes' :)
            or $state[$p:lk] = 886199                       (: 'sink' ':' 'set-attributes' :)
            or $state[$p:lk] = 886200                       (: 'split-sequence' ':' 'set-attributes' :)
            or $state[$p:lk] = 886201                       (: 'step' ':' 'set-attributes' :)
            or $state[$p:lk] = 886202                       (: 'store' ':' 'set-attributes' :)
            or $state[$p:lk] = 886203                       (: 'string-replace' ':' 'set-attributes' :)
            or $state[$p:lk] = 886204                       (: 'try' ':' 'set-attributes' :)
            or $state[$p:lk] = 886205                       (: 'unescape-markup' ':' 'set-attributes' :)
            or $state[$p:lk] = 886206                       (: 'unwrap' ':' 'set-attributes' :)
            or $state[$p:lk] = 886207                       (: 'uuid' ':' 'set-attributes' :)
            or $state[$p:lk] = 886208                       (: 'validate-with-relax-ng' ':' 'set-attributes' :)
            or $state[$p:lk] = 886209                       (: 'validate-with-schematron' ':' 'set-attributes' :)
            or $state[$p:lk] = 886210                       (: 'validate-with-xml-schema' ':' 'set-attributes' :)
            or $state[$p:lk] = 886211                       (: 'variable' ':' 'set-attributes' :)
            or $state[$p:lk] = 886212                       (: 'viewport' ':' 'set-attributes' :)
            or $state[$p:lk] = 886214                       (: 'wrap' ':' 'set-attributes' :)
            or $state[$p:lk] = 886215                       (: 'wrap-sequence' ':' 'set-attributes' :)
            or $state[$p:lk] = 886216                       (: 'www-form-urldecode' ':' 'set-attributes' :)
            or $state[$p:lk] = 886217                       (: 'www-form-urlencode' ':' 'set-attributes' :)
            or $state[$p:lk] = 886218                       (: 'xinclude' ':' 'set-attributes' :)
            or $state[$p:lk] = 886219                       (: 'xquery' ':' 'set-attributes' :)
            or $state[$p:lk] = 886220                       (: 'xsl-formatter' ':' 'set-attributes' :)
            or $state[$p:lk] = 886221                       (: 'xslt' ':' 'set-attributes' :)
            or $state[$p:lk] = 902533                       (: NCName^Token ':' 'sink' :)
            or $state[$p:lk] = 902544                       (: 'add-attribute' ':' 'sink' :)
            or $state[$p:lk] = 902545                       (: 'add-xml-base' ':' 'sink' :)
            or $state[$p:lk] = 902547                       (: 'compare' ':' 'sink' :)
            or $state[$p:lk] = 902548                       (: 'count' ':' 'sink' :)
            or $state[$p:lk] = 902549                       (: 'default' ':' 'sink' :)
            or $state[$p:lk] = 902550                       (: 'delete' ':' 'sink' :)
            or $state[$p:lk] = 902551                       (: 'directory-list' ':' 'sink' :)
            or $state[$p:lk] = 902553                       (: 'else' ':' 'sink' :)
            or $state[$p:lk] = 902555                       (: 'error' ':' 'sink' :)
            or $state[$p:lk] = 902556                       (: 'escape-markup' ':' 'sink' :)
            or $state[$p:lk] = 902557                       (: 'exec' ':' 'sink' :)
            or $state[$p:lk] = 902558                       (: 'filter' ':' 'sink' :)
            or $state[$p:lk] = 902559                       (: 'for-each' ':' 'sink' :)
            or $state[$p:lk] = 902561                       (: 'hash' ':' 'sink' :)
            or $state[$p:lk] = 902562                       (: 'http-request' ':' 'sink' :)
            or $state[$p:lk] = 902563                       (: 'identity' ':' 'sink' :)
            or $state[$p:lk] = 902564                       (: 'if' ':' 'sink' :)
            or $state[$p:lk] = 902565                       (: 'insert' ':' 'sink' :)
            or $state[$p:lk] = 902567                       (: 'label-elements' ':' 'sink' :)
            or $state[$p:lk] = 902568                       (: 'library' ':' 'sink' :)
            or $state[$p:lk] = 902569                       (: 'load' ':' 'sink' :)
            or $state[$p:lk] = 902570                       (: 'make-absolute-uris' ':' 'sink' :)
            or $state[$p:lk] = 902571                       (: 'namespace' ':' 'sink' :)
            or $state[$p:lk] = 902572                       (: 'namespace-rename' ':' 'sink' :)
            or $state[$p:lk] = 902573                       (: 'pack' ':' 'sink' :)
            or $state[$p:lk] = 902574                       (: 'parameters' ':' 'sink' :)
            or $state[$p:lk] = 902576                       (: 'pipeline' ':' 'sink' :)
            or $state[$p:lk] = 902578                       (: 'rename' ':' 'sink' :)
            or $state[$p:lk] = 902579                       (: 'replace' ':' 'sink' :)
            or $state[$p:lk] = 902582                       (: 'set-attributes' ':' 'sink' :)
            or $state[$p:lk] = 902583                       (: 'sink' ':' 'sink' :)
            or $state[$p:lk] = 902584                       (: 'split-sequence' ':' 'sink' :)
            or $state[$p:lk] = 902585                       (: 'step' ':' 'sink' :)
            or $state[$p:lk] = 902586                       (: 'store' ':' 'sink' :)
            or $state[$p:lk] = 902587                       (: 'string-replace' ':' 'sink' :)
            or $state[$p:lk] = 902588                       (: 'try' ':' 'sink' :)
            or $state[$p:lk] = 902589                       (: 'unescape-markup' ':' 'sink' :)
            or $state[$p:lk] = 902590                       (: 'unwrap' ':' 'sink' :)
            or $state[$p:lk] = 902591                       (: 'uuid' ':' 'sink' :)
            or $state[$p:lk] = 902592                       (: 'validate-with-relax-ng' ':' 'sink' :)
            or $state[$p:lk] = 902593                       (: 'validate-with-schematron' ':' 'sink' :)
            or $state[$p:lk] = 902594                       (: 'validate-with-xml-schema' ':' 'sink' :)
            or $state[$p:lk] = 902595                       (: 'variable' ':' 'sink' :)
            or $state[$p:lk] = 902596                       (: 'viewport' ':' 'sink' :)
            or $state[$p:lk] = 902598                       (: 'wrap' ':' 'sink' :)
            or $state[$p:lk] = 902599                       (: 'wrap-sequence' ':' 'sink' :)
            or $state[$p:lk] = 902600                       (: 'www-form-urldecode' ':' 'sink' :)
            or $state[$p:lk] = 902601                       (: 'www-form-urlencode' ':' 'sink' :)
            or $state[$p:lk] = 902602                       (: 'xinclude' ':' 'sink' :)
            or $state[$p:lk] = 902603                       (: 'xquery' ':' 'sink' :)
            or $state[$p:lk] = 902604                       (: 'xsl-formatter' ':' 'sink' :)
            or $state[$p:lk] = 902605                       (: 'xslt' ':' 'sink' :)
            or $state[$p:lk] = 918917                       (: NCName^Token ':' 'split-sequence' :)
            or $state[$p:lk] = 918928                       (: 'add-attribute' ':' 'split-sequence' :)
            or $state[$p:lk] = 918929                       (: 'add-xml-base' ':' 'split-sequence' :)
            or $state[$p:lk] = 918931                       (: 'compare' ':' 'split-sequence' :)
            or $state[$p:lk] = 918932                       (: 'count' ':' 'split-sequence' :)
            or $state[$p:lk] = 918933                       (: 'default' ':' 'split-sequence' :)
            or $state[$p:lk] = 918934                       (: 'delete' ':' 'split-sequence' :)
            or $state[$p:lk] = 918935                       (: 'directory-list' ':' 'split-sequence' :)
            or $state[$p:lk] = 918937                       (: 'else' ':' 'split-sequence' :)
            or $state[$p:lk] = 918939                       (: 'error' ':' 'split-sequence' :)
            or $state[$p:lk] = 918940                       (: 'escape-markup' ':' 'split-sequence' :)
            or $state[$p:lk] = 918941                       (: 'exec' ':' 'split-sequence' :)
            or $state[$p:lk] = 918942                       (: 'filter' ':' 'split-sequence' :)
            or $state[$p:lk] = 918943                       (: 'for-each' ':' 'split-sequence' :)
            or $state[$p:lk] = 918945                       (: 'hash' ':' 'split-sequence' :)
            or $state[$p:lk] = 918946                       (: 'http-request' ':' 'split-sequence' :)
            or $state[$p:lk] = 918947                       (: 'identity' ':' 'split-sequence' :)
            or $state[$p:lk] = 918948                       (: 'if' ':' 'split-sequence' :)
            or $state[$p:lk] = 918949                       (: 'insert' ':' 'split-sequence' :)
            or $state[$p:lk] = 918951                       (: 'label-elements' ':' 'split-sequence' :)
            or $state[$p:lk] = 918952                       (: 'library' ':' 'split-sequence' :)
            or $state[$p:lk] = 918953                       (: 'load' ':' 'split-sequence' :)
            or $state[$p:lk] = 918954                       (: 'make-absolute-uris' ':' 'split-sequence' :)
            or $state[$p:lk] = 918955                       (: 'namespace' ':' 'split-sequence' :)
            or $state[$p:lk] = 918956                       (: 'namespace-rename' ':' 'split-sequence' :)
            or $state[$p:lk] = 918957                       (: 'pack' ':' 'split-sequence' :)
            or $state[$p:lk] = 918958                       (: 'parameters' ':' 'split-sequence' :)
            or $state[$p:lk] = 918960                       (: 'pipeline' ':' 'split-sequence' :)
            or $state[$p:lk] = 918962                       (: 'rename' ':' 'split-sequence' :)
            or $state[$p:lk] = 918963                       (: 'replace' ':' 'split-sequence' :)
            or $state[$p:lk] = 918966                       (: 'set-attributes' ':' 'split-sequence' :)
            or $state[$p:lk] = 918967                       (: 'sink' ':' 'split-sequence' :)
            or $state[$p:lk] = 918968                       (: 'split-sequence' ':' 'split-sequence' :)
            or $state[$p:lk] = 918969                       (: 'step' ':' 'split-sequence' :)
            or $state[$p:lk] = 918970                       (: 'store' ':' 'split-sequence' :)
            or $state[$p:lk] = 918971                       (: 'string-replace' ':' 'split-sequence' :)
            or $state[$p:lk] = 918972                       (: 'try' ':' 'split-sequence' :)
            or $state[$p:lk] = 918973                       (: 'unescape-markup' ':' 'split-sequence' :)
            or $state[$p:lk] = 918974                       (: 'unwrap' ':' 'split-sequence' :)
            or $state[$p:lk] = 918975                       (: 'uuid' ':' 'split-sequence' :)
            or $state[$p:lk] = 918976                       (: 'validate-with-relax-ng' ':' 'split-sequence' :)
            or $state[$p:lk] = 918977                       (: 'validate-with-schematron' ':' 'split-sequence' :)
            or $state[$p:lk] = 918978                       (: 'validate-with-xml-schema' ':' 'split-sequence' :)
            or $state[$p:lk] = 918979                       (: 'variable' ':' 'split-sequence' :)
            or $state[$p:lk] = 918980                       (: 'viewport' ':' 'split-sequence' :)
            or $state[$p:lk] = 918982                       (: 'wrap' ':' 'split-sequence' :)
            or $state[$p:lk] = 918983                       (: 'wrap-sequence' ':' 'split-sequence' :)
            or $state[$p:lk] = 918984                       (: 'www-form-urldecode' ':' 'split-sequence' :)
            or $state[$p:lk] = 918985                       (: 'www-form-urlencode' ':' 'split-sequence' :)
            or $state[$p:lk] = 918986                       (: 'xinclude' ':' 'split-sequence' :)
            or $state[$p:lk] = 918987                       (: 'xquery' ':' 'split-sequence' :)
            or $state[$p:lk] = 918988                       (: 'xsl-formatter' ':' 'split-sequence' :)
            or $state[$p:lk] = 918989                       (: 'xslt' ':' 'split-sequence' :)
            or $state[$p:lk] = 935301                       (: NCName^Token ':' 'step' :)
            or $state[$p:lk] = 935312                       (: 'add-attribute' ':' 'step' :)
            or $state[$p:lk] = 935313                       (: 'add-xml-base' ':' 'step' :)
            or $state[$p:lk] = 935315                       (: 'compare' ':' 'step' :)
            or $state[$p:lk] = 935316                       (: 'count' ':' 'step' :)
            or $state[$p:lk] = 935317                       (: 'default' ':' 'step' :)
            or $state[$p:lk] = 935318                       (: 'delete' ':' 'step' :)
            or $state[$p:lk] = 935319                       (: 'directory-list' ':' 'step' :)
            or $state[$p:lk] = 935321                       (: 'else' ':' 'step' :)
            or $state[$p:lk] = 935323                       (: 'error' ':' 'step' :)
            or $state[$p:lk] = 935324                       (: 'escape-markup' ':' 'step' :)
            or $state[$p:lk] = 935325                       (: 'exec' ':' 'step' :)
            or $state[$p:lk] = 935326                       (: 'filter' ':' 'step' :)
            or $state[$p:lk] = 935327                       (: 'for-each' ':' 'step' :)
            or $state[$p:lk] = 935329                       (: 'hash' ':' 'step' :)
            or $state[$p:lk] = 935330                       (: 'http-request' ':' 'step' :)
            or $state[$p:lk] = 935331                       (: 'identity' ':' 'step' :)
            or $state[$p:lk] = 935332                       (: 'if' ':' 'step' :)
            or $state[$p:lk] = 935333                       (: 'insert' ':' 'step' :)
            or $state[$p:lk] = 935335                       (: 'label-elements' ':' 'step' :)
            or $state[$p:lk] = 935336                       (: 'library' ':' 'step' :)
            or $state[$p:lk] = 935337                       (: 'load' ':' 'step' :)
            or $state[$p:lk] = 935338                       (: 'make-absolute-uris' ':' 'step' :)
            or $state[$p:lk] = 935339                       (: 'namespace' ':' 'step' :)
            or $state[$p:lk] = 935340                       (: 'namespace-rename' ':' 'step' :)
            or $state[$p:lk] = 935341                       (: 'pack' ':' 'step' :)
            or $state[$p:lk] = 935342                       (: 'parameters' ':' 'step' :)
            or $state[$p:lk] = 935344                       (: 'pipeline' ':' 'step' :)
            or $state[$p:lk] = 935346                       (: 'rename' ':' 'step' :)
            or $state[$p:lk] = 935347                       (: 'replace' ':' 'step' :)
            or $state[$p:lk] = 935350                       (: 'set-attributes' ':' 'step' :)
            or $state[$p:lk] = 935351                       (: 'sink' ':' 'step' :)
            or $state[$p:lk] = 935352                       (: 'split-sequence' ':' 'step' :)
            or $state[$p:lk] = 935353                       (: 'step' ':' 'step' :)
            or $state[$p:lk] = 935354                       (: 'store' ':' 'step' :)
            or $state[$p:lk] = 935355                       (: 'string-replace' ':' 'step' :)
            or $state[$p:lk] = 935356                       (: 'try' ':' 'step' :)
            or $state[$p:lk] = 935357                       (: 'unescape-markup' ':' 'step' :)
            or $state[$p:lk] = 935358                       (: 'unwrap' ':' 'step' :)
            or $state[$p:lk] = 935359                       (: 'uuid' ':' 'step' :)
            or $state[$p:lk] = 935360                       (: 'validate-with-relax-ng' ':' 'step' :)
            or $state[$p:lk] = 935361                       (: 'validate-with-schematron' ':' 'step' :)
            or $state[$p:lk] = 935362                       (: 'validate-with-xml-schema' ':' 'step' :)
            or $state[$p:lk] = 935363                       (: 'variable' ':' 'step' :)
            or $state[$p:lk] = 935364                       (: 'viewport' ':' 'step' :)
            or $state[$p:lk] = 935366                       (: 'wrap' ':' 'step' :)
            or $state[$p:lk] = 935367                       (: 'wrap-sequence' ':' 'step' :)
            or $state[$p:lk] = 935368                       (: 'www-form-urldecode' ':' 'step' :)
            or $state[$p:lk] = 935369                       (: 'www-form-urlencode' ':' 'step' :)
            or $state[$p:lk] = 935370                       (: 'xinclude' ':' 'step' :)
            or $state[$p:lk] = 935371                       (: 'xquery' ':' 'step' :)
            or $state[$p:lk] = 935372                       (: 'xsl-formatter' ':' 'step' :)
            or $state[$p:lk] = 935373                       (: 'xslt' ':' 'step' :)
            or $state[$p:lk] = 951685                       (: NCName^Token ':' 'store' :)
            or $state[$p:lk] = 951696                       (: 'add-attribute' ':' 'store' :)
            or $state[$p:lk] = 951697                       (: 'add-xml-base' ':' 'store' :)
            or $state[$p:lk] = 951699                       (: 'compare' ':' 'store' :)
            or $state[$p:lk] = 951700                       (: 'count' ':' 'store' :)
            or $state[$p:lk] = 951701                       (: 'default' ':' 'store' :)
            or $state[$p:lk] = 951702                       (: 'delete' ':' 'store' :)
            or $state[$p:lk] = 951703                       (: 'directory-list' ':' 'store' :)
            or $state[$p:lk] = 951705                       (: 'else' ':' 'store' :)
            or $state[$p:lk] = 951707                       (: 'error' ':' 'store' :)
            or $state[$p:lk] = 951708                       (: 'escape-markup' ':' 'store' :)
            or $state[$p:lk] = 951709                       (: 'exec' ':' 'store' :)
            or $state[$p:lk] = 951710                       (: 'filter' ':' 'store' :)
            or $state[$p:lk] = 951711                       (: 'for-each' ':' 'store' :)
            or $state[$p:lk] = 951713                       (: 'hash' ':' 'store' :)
            or $state[$p:lk] = 951714                       (: 'http-request' ':' 'store' :)
            or $state[$p:lk] = 951715                       (: 'identity' ':' 'store' :)
            or $state[$p:lk] = 951716                       (: 'if' ':' 'store' :)
            or $state[$p:lk] = 951717                       (: 'insert' ':' 'store' :)
            or $state[$p:lk] = 951719                       (: 'label-elements' ':' 'store' :)
            or $state[$p:lk] = 951720                       (: 'library' ':' 'store' :)
            or $state[$p:lk] = 951721                       (: 'load' ':' 'store' :)
            or $state[$p:lk] = 951722                       (: 'make-absolute-uris' ':' 'store' :)
            or $state[$p:lk] = 951723                       (: 'namespace' ':' 'store' :)
            or $state[$p:lk] = 951724                       (: 'namespace-rename' ':' 'store' :)
            or $state[$p:lk] = 951725                       (: 'pack' ':' 'store' :)
            or $state[$p:lk] = 951726                       (: 'parameters' ':' 'store' :)
            or $state[$p:lk] = 951728                       (: 'pipeline' ':' 'store' :)
            or $state[$p:lk] = 951730                       (: 'rename' ':' 'store' :)
            or $state[$p:lk] = 951731                       (: 'replace' ':' 'store' :)
            or $state[$p:lk] = 951734                       (: 'set-attributes' ':' 'store' :)
            or $state[$p:lk] = 951735                       (: 'sink' ':' 'store' :)
            or $state[$p:lk] = 951736                       (: 'split-sequence' ':' 'store' :)
            or $state[$p:lk] = 951737                       (: 'step' ':' 'store' :)
            or $state[$p:lk] = 951738                       (: 'store' ':' 'store' :)
            or $state[$p:lk] = 951739                       (: 'string-replace' ':' 'store' :)
            or $state[$p:lk] = 951740                       (: 'try' ':' 'store' :)
            or $state[$p:lk] = 951741                       (: 'unescape-markup' ':' 'store' :)
            or $state[$p:lk] = 951742                       (: 'unwrap' ':' 'store' :)
            or $state[$p:lk] = 951743                       (: 'uuid' ':' 'store' :)
            or $state[$p:lk] = 951744                       (: 'validate-with-relax-ng' ':' 'store' :)
            or $state[$p:lk] = 951745                       (: 'validate-with-schematron' ':' 'store' :)
            or $state[$p:lk] = 951746                       (: 'validate-with-xml-schema' ':' 'store' :)
            or $state[$p:lk] = 951747                       (: 'variable' ':' 'store' :)
            or $state[$p:lk] = 951748                       (: 'viewport' ':' 'store' :)
            or $state[$p:lk] = 951750                       (: 'wrap' ':' 'store' :)
            or $state[$p:lk] = 951751                       (: 'wrap-sequence' ':' 'store' :)
            or $state[$p:lk] = 951752                       (: 'www-form-urldecode' ':' 'store' :)
            or $state[$p:lk] = 951753                       (: 'www-form-urlencode' ':' 'store' :)
            or $state[$p:lk] = 951754                       (: 'xinclude' ':' 'store' :)
            or $state[$p:lk] = 951755                       (: 'xquery' ':' 'store' :)
            or $state[$p:lk] = 951756                       (: 'xsl-formatter' ':' 'store' :)
            or $state[$p:lk] = 951757                       (: 'xslt' ':' 'store' :)
            or $state[$p:lk] = 968069                       (: NCName^Token ':' 'string-replace' :)
            or $state[$p:lk] = 968080                       (: 'add-attribute' ':' 'string-replace' :)
            or $state[$p:lk] = 968081                       (: 'add-xml-base' ':' 'string-replace' :)
            or $state[$p:lk] = 968083                       (: 'compare' ':' 'string-replace' :)
            or $state[$p:lk] = 968084                       (: 'count' ':' 'string-replace' :)
            or $state[$p:lk] = 968085                       (: 'default' ':' 'string-replace' :)
            or $state[$p:lk] = 968086                       (: 'delete' ':' 'string-replace' :)
            or $state[$p:lk] = 968087                       (: 'directory-list' ':' 'string-replace' :)
            or $state[$p:lk] = 968089                       (: 'else' ':' 'string-replace' :)
            or $state[$p:lk] = 968091                       (: 'error' ':' 'string-replace' :)
            or $state[$p:lk] = 968092                       (: 'escape-markup' ':' 'string-replace' :)
            or $state[$p:lk] = 968093                       (: 'exec' ':' 'string-replace' :)
            or $state[$p:lk] = 968094                       (: 'filter' ':' 'string-replace' :)
            or $state[$p:lk] = 968095                       (: 'for-each' ':' 'string-replace' :)
            or $state[$p:lk] = 968097                       (: 'hash' ':' 'string-replace' :)
            or $state[$p:lk] = 968098                       (: 'http-request' ':' 'string-replace' :)
            or $state[$p:lk] = 968099                       (: 'identity' ':' 'string-replace' :)
            or $state[$p:lk] = 968100                       (: 'if' ':' 'string-replace' :)
            or $state[$p:lk] = 968101                       (: 'insert' ':' 'string-replace' :)
            or $state[$p:lk] = 968103                       (: 'label-elements' ':' 'string-replace' :)
            or $state[$p:lk] = 968104                       (: 'library' ':' 'string-replace' :)
            or $state[$p:lk] = 968105                       (: 'load' ':' 'string-replace' :)
            or $state[$p:lk] = 968106                       (: 'make-absolute-uris' ':' 'string-replace' :)
            or $state[$p:lk] = 968107                       (: 'namespace' ':' 'string-replace' :)
            or $state[$p:lk] = 968108                       (: 'namespace-rename' ':' 'string-replace' :)
            or $state[$p:lk] = 968109                       (: 'pack' ':' 'string-replace' :)
            or $state[$p:lk] = 968110                       (: 'parameters' ':' 'string-replace' :)
            or $state[$p:lk] = 968112                       (: 'pipeline' ':' 'string-replace' :)
            or $state[$p:lk] = 968114                       (: 'rename' ':' 'string-replace' :)
            or $state[$p:lk] = 968115                       (: 'replace' ':' 'string-replace' :)
            or $state[$p:lk] = 968118                       (: 'set-attributes' ':' 'string-replace' :)
            or $state[$p:lk] = 968119                       (: 'sink' ':' 'string-replace' :)
            or $state[$p:lk] = 968120                       (: 'split-sequence' ':' 'string-replace' :)
            or $state[$p:lk] = 968121                       (: 'step' ':' 'string-replace' :)
            or $state[$p:lk] = 968122                       (: 'store' ':' 'string-replace' :)
            or $state[$p:lk] = 968123                       (: 'string-replace' ':' 'string-replace' :)
            or $state[$p:lk] = 968124                       (: 'try' ':' 'string-replace' :)
            or $state[$p:lk] = 968125                       (: 'unescape-markup' ':' 'string-replace' :)
            or $state[$p:lk] = 968126                       (: 'unwrap' ':' 'string-replace' :)
            or $state[$p:lk] = 968127                       (: 'uuid' ':' 'string-replace' :)
            or $state[$p:lk] = 968128                       (: 'validate-with-relax-ng' ':' 'string-replace' :)
            or $state[$p:lk] = 968129                       (: 'validate-with-schematron' ':' 'string-replace' :)
            or $state[$p:lk] = 968130                       (: 'validate-with-xml-schema' ':' 'string-replace' :)
            or $state[$p:lk] = 968131                       (: 'variable' ':' 'string-replace' :)
            or $state[$p:lk] = 968132                       (: 'viewport' ':' 'string-replace' :)
            or $state[$p:lk] = 968134                       (: 'wrap' ':' 'string-replace' :)
            or $state[$p:lk] = 968135                       (: 'wrap-sequence' ':' 'string-replace' :)
            or $state[$p:lk] = 968136                       (: 'www-form-urldecode' ':' 'string-replace' :)
            or $state[$p:lk] = 968137                       (: 'www-form-urlencode' ':' 'string-replace' :)
            or $state[$p:lk] = 968138                       (: 'xinclude' ':' 'string-replace' :)
            or $state[$p:lk] = 968139                       (: 'xquery' ':' 'string-replace' :)
            or $state[$p:lk] = 968140                       (: 'xsl-formatter' ':' 'string-replace' :)
            or $state[$p:lk] = 968141                       (: 'xslt' ':' 'string-replace' :)
            or $state[$p:lk] = 984453                       (: NCName^Token ':' 'try' :)
            or $state[$p:lk] = 984464                       (: 'add-attribute' ':' 'try' :)
            or $state[$p:lk] = 984465                       (: 'add-xml-base' ':' 'try' :)
            or $state[$p:lk] = 984467                       (: 'compare' ':' 'try' :)
            or $state[$p:lk] = 984468                       (: 'count' ':' 'try' :)
            or $state[$p:lk] = 984469                       (: 'default' ':' 'try' :)
            or $state[$p:lk] = 984470                       (: 'delete' ':' 'try' :)
            or $state[$p:lk] = 984471                       (: 'directory-list' ':' 'try' :)
            or $state[$p:lk] = 984473                       (: 'else' ':' 'try' :)
            or $state[$p:lk] = 984475                       (: 'error' ':' 'try' :)
            or $state[$p:lk] = 984476                       (: 'escape-markup' ':' 'try' :)
            or $state[$p:lk] = 984477                       (: 'exec' ':' 'try' :)
            or $state[$p:lk] = 984478                       (: 'filter' ':' 'try' :)
            or $state[$p:lk] = 984479                       (: 'for-each' ':' 'try' :)
            or $state[$p:lk] = 984481                       (: 'hash' ':' 'try' :)
            or $state[$p:lk] = 984482                       (: 'http-request' ':' 'try' :)
            or $state[$p:lk] = 984483                       (: 'identity' ':' 'try' :)
            or $state[$p:lk] = 984484                       (: 'if' ':' 'try' :)
            or $state[$p:lk] = 984485                       (: 'insert' ':' 'try' :)
            or $state[$p:lk] = 984487                       (: 'label-elements' ':' 'try' :)
            or $state[$p:lk] = 984488                       (: 'library' ':' 'try' :)
            or $state[$p:lk] = 984489                       (: 'load' ':' 'try' :)
            or $state[$p:lk] = 984490                       (: 'make-absolute-uris' ':' 'try' :)
            or $state[$p:lk] = 984491                       (: 'namespace' ':' 'try' :)
            or $state[$p:lk] = 984492                       (: 'namespace-rename' ':' 'try' :)
            or $state[$p:lk] = 984493                       (: 'pack' ':' 'try' :)
            or $state[$p:lk] = 984494                       (: 'parameters' ':' 'try' :)
            or $state[$p:lk] = 984496                       (: 'pipeline' ':' 'try' :)
            or $state[$p:lk] = 984498                       (: 'rename' ':' 'try' :)
            or $state[$p:lk] = 984499                       (: 'replace' ':' 'try' :)
            or $state[$p:lk] = 984502                       (: 'set-attributes' ':' 'try' :)
            or $state[$p:lk] = 984503                       (: 'sink' ':' 'try' :)
            or $state[$p:lk] = 984504                       (: 'split-sequence' ':' 'try' :)
            or $state[$p:lk] = 984505                       (: 'step' ':' 'try' :)
            or $state[$p:lk] = 984506                       (: 'store' ':' 'try' :)
            or $state[$p:lk] = 984507                       (: 'string-replace' ':' 'try' :)
            or $state[$p:lk] = 984508                       (: 'try' ':' 'try' :)
            or $state[$p:lk] = 984509                       (: 'unescape-markup' ':' 'try' :)
            or $state[$p:lk] = 984510                       (: 'unwrap' ':' 'try' :)
            or $state[$p:lk] = 984511                       (: 'uuid' ':' 'try' :)
            or $state[$p:lk] = 984512                       (: 'validate-with-relax-ng' ':' 'try' :)
            or $state[$p:lk] = 984513                       (: 'validate-with-schematron' ':' 'try' :)
            or $state[$p:lk] = 984514                       (: 'validate-with-xml-schema' ':' 'try' :)
            or $state[$p:lk] = 984515                       (: 'variable' ':' 'try' :)
            or $state[$p:lk] = 984516                       (: 'viewport' ':' 'try' :)
            or $state[$p:lk] = 984518                       (: 'wrap' ':' 'try' :)
            or $state[$p:lk] = 984519                       (: 'wrap-sequence' ':' 'try' :)
            or $state[$p:lk] = 984520                       (: 'www-form-urldecode' ':' 'try' :)
            or $state[$p:lk] = 984521                       (: 'www-form-urlencode' ':' 'try' :)
            or $state[$p:lk] = 984522                       (: 'xinclude' ':' 'try' :)
            or $state[$p:lk] = 984523                       (: 'xquery' ':' 'try' :)
            or $state[$p:lk] = 984524                       (: 'xsl-formatter' ':' 'try' :)
            or $state[$p:lk] = 984525                       (: 'xslt' ':' 'try' :)
            or $state[$p:lk] = 1000837                      (: NCName^Token ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000848                      (: 'add-attribute' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000849                      (: 'add-xml-base' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000851                      (: 'compare' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000852                      (: 'count' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000853                      (: 'default' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000854                      (: 'delete' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000855                      (: 'directory-list' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000857                      (: 'else' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000859                      (: 'error' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000860                      (: 'escape-markup' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000861                      (: 'exec' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000862                      (: 'filter' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000863                      (: 'for-each' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000865                      (: 'hash' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000866                      (: 'http-request' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000867                      (: 'identity' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000868                      (: 'if' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000869                      (: 'insert' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000871                      (: 'label-elements' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000872                      (: 'library' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000873                      (: 'load' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000874                      (: 'make-absolute-uris' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000875                      (: 'namespace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000876                      (: 'namespace-rename' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000877                      (: 'pack' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000878                      (: 'parameters' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000880                      (: 'pipeline' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000882                      (: 'rename' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000883                      (: 'replace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000886                      (: 'set-attributes' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000887                      (: 'sink' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000888                      (: 'split-sequence' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000889                      (: 'step' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000890                      (: 'store' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000891                      (: 'string-replace' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000892                      (: 'try' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000893                      (: 'unescape-markup' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000894                      (: 'unwrap' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000895                      (: 'uuid' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000896                      (: 'validate-with-relax-ng' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000897                      (: 'validate-with-schematron' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000898                      (: 'validate-with-xml-schema' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000899                      (: 'variable' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000900                      (: 'viewport' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000902                      (: 'wrap' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000903                      (: 'wrap-sequence' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000904                      (: 'www-form-urldecode' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000905                      (: 'www-form-urlencode' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000906                      (: 'xinclude' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000907                      (: 'xquery' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000908                      (: 'xsl-formatter' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1000909                      (: 'xslt' ':' 'unescape-markup' :)
            or $state[$p:lk] = 1017221                      (: NCName^Token ':' 'unwrap' :)
            or $state[$p:lk] = 1017232                      (: 'add-attribute' ':' 'unwrap' :)
            or $state[$p:lk] = 1017233                      (: 'add-xml-base' ':' 'unwrap' :)
            or $state[$p:lk] = 1017235                      (: 'compare' ':' 'unwrap' :)
            or $state[$p:lk] = 1017236                      (: 'count' ':' 'unwrap' :)
            or $state[$p:lk] = 1017237                      (: 'default' ':' 'unwrap' :)
            or $state[$p:lk] = 1017238                      (: 'delete' ':' 'unwrap' :)
            or $state[$p:lk] = 1017239                      (: 'directory-list' ':' 'unwrap' :)
            or $state[$p:lk] = 1017241                      (: 'else' ':' 'unwrap' :)
            or $state[$p:lk] = 1017243                      (: 'error' ':' 'unwrap' :)
            or $state[$p:lk] = 1017244                      (: 'escape-markup' ':' 'unwrap' :)
            or $state[$p:lk] = 1017245                      (: 'exec' ':' 'unwrap' :)
            or $state[$p:lk] = 1017246                      (: 'filter' ':' 'unwrap' :)
            or $state[$p:lk] = 1017247                      (: 'for-each' ':' 'unwrap' :)
            or $state[$p:lk] = 1017249                      (: 'hash' ':' 'unwrap' :)
            or $state[$p:lk] = 1017250                      (: 'http-request' ':' 'unwrap' :)
            or $state[$p:lk] = 1017251                      (: 'identity' ':' 'unwrap' :)
            or $state[$p:lk] = 1017252                      (: 'if' ':' 'unwrap' :)
            or $state[$p:lk] = 1017253                      (: 'insert' ':' 'unwrap' :)
            or $state[$p:lk] = 1017255                      (: 'label-elements' ':' 'unwrap' :)
            or $state[$p:lk] = 1017256                      (: 'library' ':' 'unwrap' :)
            or $state[$p:lk] = 1017257                      (: 'load' ':' 'unwrap' :)
            or $state[$p:lk] = 1017258                      (: 'make-absolute-uris' ':' 'unwrap' :)
            or $state[$p:lk] = 1017259                      (: 'namespace' ':' 'unwrap' :)
            or $state[$p:lk] = 1017260                      (: 'namespace-rename' ':' 'unwrap' :)
            or $state[$p:lk] = 1017261                      (: 'pack' ':' 'unwrap' :)
            or $state[$p:lk] = 1017262                      (: 'parameters' ':' 'unwrap' :)
            or $state[$p:lk] = 1017264                      (: 'pipeline' ':' 'unwrap' :)
            or $state[$p:lk] = 1017266                      (: 'rename' ':' 'unwrap' :)
            or $state[$p:lk] = 1017267                      (: 'replace' ':' 'unwrap' :)
            or $state[$p:lk] = 1017270                      (: 'set-attributes' ':' 'unwrap' :)
            or $state[$p:lk] = 1017271                      (: 'sink' ':' 'unwrap' :)
            or $state[$p:lk] = 1017272                      (: 'split-sequence' ':' 'unwrap' :)
            or $state[$p:lk] = 1017273                      (: 'step' ':' 'unwrap' :)
            or $state[$p:lk] = 1017274                      (: 'store' ':' 'unwrap' :)
            or $state[$p:lk] = 1017275                      (: 'string-replace' ':' 'unwrap' :)
            or $state[$p:lk] = 1017276                      (: 'try' ':' 'unwrap' :)
            or $state[$p:lk] = 1017277                      (: 'unescape-markup' ':' 'unwrap' :)
            or $state[$p:lk] = 1017278                      (: 'unwrap' ':' 'unwrap' :)
            or $state[$p:lk] = 1017279                      (: 'uuid' ':' 'unwrap' :)
            or $state[$p:lk] = 1017280                      (: 'validate-with-relax-ng' ':' 'unwrap' :)
            or $state[$p:lk] = 1017281                      (: 'validate-with-schematron' ':' 'unwrap' :)
            or $state[$p:lk] = 1017282                      (: 'validate-with-xml-schema' ':' 'unwrap' :)
            or $state[$p:lk] = 1017283                      (: 'variable' ':' 'unwrap' :)
            or $state[$p:lk] = 1017284                      (: 'viewport' ':' 'unwrap' :)
            or $state[$p:lk] = 1017286                      (: 'wrap' ':' 'unwrap' :)
            or $state[$p:lk] = 1017287                      (: 'wrap-sequence' ':' 'unwrap' :)
            or $state[$p:lk] = 1017288                      (: 'www-form-urldecode' ':' 'unwrap' :)
            or $state[$p:lk] = 1017289                      (: 'www-form-urlencode' ':' 'unwrap' :)
            or $state[$p:lk] = 1017290                      (: 'xinclude' ':' 'unwrap' :)
            or $state[$p:lk] = 1017291                      (: 'xquery' ':' 'unwrap' :)
            or $state[$p:lk] = 1017292                      (: 'xsl-formatter' ':' 'unwrap' :)
            or $state[$p:lk] = 1017293                      (: 'xslt' ':' 'unwrap' :)
            or $state[$p:lk] = 1033605                      (: NCName^Token ':' 'uuid' :)
            or $state[$p:lk] = 1033616                      (: 'add-attribute' ':' 'uuid' :)
            or $state[$p:lk] = 1033617                      (: 'add-xml-base' ':' 'uuid' :)
            or $state[$p:lk] = 1033619                      (: 'compare' ':' 'uuid' :)
            or $state[$p:lk] = 1033620                      (: 'count' ':' 'uuid' :)
            or $state[$p:lk] = 1033621                      (: 'default' ':' 'uuid' :)
            or $state[$p:lk] = 1033622                      (: 'delete' ':' 'uuid' :)
            or $state[$p:lk] = 1033623                      (: 'directory-list' ':' 'uuid' :)
            or $state[$p:lk] = 1033625                      (: 'else' ':' 'uuid' :)
            or $state[$p:lk] = 1033627                      (: 'error' ':' 'uuid' :)
            or $state[$p:lk] = 1033628                      (: 'escape-markup' ':' 'uuid' :)
            or $state[$p:lk] = 1033629                      (: 'exec' ':' 'uuid' :)
            or $state[$p:lk] = 1033630                      (: 'filter' ':' 'uuid' :)
            or $state[$p:lk] = 1033631                      (: 'for-each' ':' 'uuid' :)
            or $state[$p:lk] = 1033633                      (: 'hash' ':' 'uuid' :)
            or $state[$p:lk] = 1033634                      (: 'http-request' ':' 'uuid' :)
            or $state[$p:lk] = 1033635                      (: 'identity' ':' 'uuid' :)
            or $state[$p:lk] = 1033636                      (: 'if' ':' 'uuid' :)
            or $state[$p:lk] = 1033637                      (: 'insert' ':' 'uuid' :)
            or $state[$p:lk] = 1033639                      (: 'label-elements' ':' 'uuid' :)
            or $state[$p:lk] = 1033640                      (: 'library' ':' 'uuid' :)
            or $state[$p:lk] = 1033641                      (: 'load' ':' 'uuid' :)
            or $state[$p:lk] = 1033642                      (: 'make-absolute-uris' ':' 'uuid' :)
            or $state[$p:lk] = 1033643                      (: 'namespace' ':' 'uuid' :)
            or $state[$p:lk] = 1033644                      (: 'namespace-rename' ':' 'uuid' :)
            or $state[$p:lk] = 1033645                      (: 'pack' ':' 'uuid' :)
            or $state[$p:lk] = 1033646                      (: 'parameters' ':' 'uuid' :)
            or $state[$p:lk] = 1033648                      (: 'pipeline' ':' 'uuid' :)
            or $state[$p:lk] = 1033650                      (: 'rename' ':' 'uuid' :)
            or $state[$p:lk] = 1033651                      (: 'replace' ':' 'uuid' :)
            or $state[$p:lk] = 1033654                      (: 'set-attributes' ':' 'uuid' :)
            or $state[$p:lk] = 1033655                      (: 'sink' ':' 'uuid' :)
            or $state[$p:lk] = 1033656                      (: 'split-sequence' ':' 'uuid' :)
            or $state[$p:lk] = 1033657                      (: 'step' ':' 'uuid' :)
            or $state[$p:lk] = 1033658                      (: 'store' ':' 'uuid' :)
            or $state[$p:lk] = 1033659                      (: 'string-replace' ':' 'uuid' :)
            or $state[$p:lk] = 1033660                      (: 'try' ':' 'uuid' :)
            or $state[$p:lk] = 1033661                      (: 'unescape-markup' ':' 'uuid' :)
            or $state[$p:lk] = 1033662                      (: 'unwrap' ':' 'uuid' :)
            or $state[$p:lk] = 1033663                      (: 'uuid' ':' 'uuid' :)
            or $state[$p:lk] = 1033664                      (: 'validate-with-relax-ng' ':' 'uuid' :)
            or $state[$p:lk] = 1033665                      (: 'validate-with-schematron' ':' 'uuid' :)
            or $state[$p:lk] = 1033666                      (: 'validate-with-xml-schema' ':' 'uuid' :)
            or $state[$p:lk] = 1033667                      (: 'variable' ':' 'uuid' :)
            or $state[$p:lk] = 1033668                      (: 'viewport' ':' 'uuid' :)
            or $state[$p:lk] = 1033670                      (: 'wrap' ':' 'uuid' :)
            or $state[$p:lk] = 1033671                      (: 'wrap-sequence' ':' 'uuid' :)
            or $state[$p:lk] = 1033672                      (: 'www-form-urldecode' ':' 'uuid' :)
            or $state[$p:lk] = 1033673                      (: 'www-form-urlencode' ':' 'uuid' :)
            or $state[$p:lk] = 1033674                      (: 'xinclude' ':' 'uuid' :)
            or $state[$p:lk] = 1033675                      (: 'xquery' ':' 'uuid' :)
            or $state[$p:lk] = 1033676                      (: 'xsl-formatter' ':' 'uuid' :)
            or $state[$p:lk] = 1033677                      (: 'xslt' ':' 'uuid' :)
            or $state[$p:lk] = 1049989                      (: NCName^Token ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050000                      (: 'add-attribute' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050001                      (: 'add-xml-base' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050003                      (: 'compare' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050004                      (: 'count' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050005                      (: 'default' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050006                      (: 'delete' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050007                      (: 'directory-list' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050009                      (: 'else' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050011                      (: 'error' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050012                      (: 'escape-markup' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050013                      (: 'exec' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050014                      (: 'filter' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050015                      (: 'for-each' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050017                      (: 'hash' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050018                      (: 'http-request' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050019                      (: 'identity' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050020                      (: 'if' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050021                      (: 'insert' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050023                      (: 'label-elements' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050024                      (: 'library' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050025                      (: 'load' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050026                      (: 'make-absolute-uris' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050027                      (: 'namespace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050028                      (: 'namespace-rename' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050029                      (: 'pack' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050030                      (: 'parameters' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050032                      (: 'pipeline' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050034                      (: 'rename' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050035                      (: 'replace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050038                      (: 'set-attributes' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050039                      (: 'sink' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050040                      (: 'split-sequence' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050041                      (: 'step' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050042                      (: 'store' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050043                      (: 'string-replace' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050044                      (: 'try' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050045                      (: 'unescape-markup' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050046                      (: 'unwrap' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050047                      (: 'uuid' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050048                      (: 'validate-with-relax-ng' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050049                      (: 'validate-with-schematron' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050050                      (: 'validate-with-xml-schema' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050051                      (: 'variable' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050052                      (: 'viewport' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050054                      (: 'wrap' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050055                      (: 'wrap-sequence' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050056                      (: 'www-form-urldecode' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050057                      (: 'www-form-urlencode' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050058                      (: 'xinclude' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050059                      (: 'xquery' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050060                      (: 'xsl-formatter' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1050061                      (: 'xslt' ':' 'validate-with-relax-ng' :)
            or $state[$p:lk] = 1066373                      (: NCName^Token ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066384                      (: 'add-attribute' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066385                      (: 'add-xml-base' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066387                      (: 'compare' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066388                      (: 'count' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066389                      (: 'default' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066390                      (: 'delete' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066391                      (: 'directory-list' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066393                      (: 'else' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066395                      (: 'error' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066396                      (: 'escape-markup' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066397                      (: 'exec' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066398                      (: 'filter' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066399                      (: 'for-each' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066401                      (: 'hash' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066402                      (: 'http-request' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066403                      (: 'identity' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066404                      (: 'if' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066405                      (: 'insert' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066407                      (: 'label-elements' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066408                      (: 'library' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066409                      (: 'load' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066410                      (: 'make-absolute-uris' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066411                      (: 'namespace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066412                      (: 'namespace-rename' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066413                      (: 'pack' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066414                      (: 'parameters' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066416                      (: 'pipeline' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066418                      (: 'rename' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066419                      (: 'replace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066422                      (: 'set-attributes' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066423                      (: 'sink' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066424                      (: 'split-sequence' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066425                      (: 'step' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066426                      (: 'store' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066427                      (: 'string-replace' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066428                      (: 'try' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066429                      (: 'unescape-markup' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066430                      (: 'unwrap' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066431                      (: 'uuid' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066432                      (: 'validate-with-relax-ng' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066433                      (: 'validate-with-schematron' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066434                      (: 'validate-with-xml-schema' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066435                      (: 'variable' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066436                      (: 'viewport' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066438                      (: 'wrap' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066439                      (: 'wrap-sequence' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066440                      (: 'www-form-urldecode' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066441                      (: 'www-form-urlencode' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066442                      (: 'xinclude' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066443                      (: 'xquery' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066444                      (: 'xsl-formatter' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1066445                      (: 'xslt' ':' 'validate-with-schematron' :)
            or $state[$p:lk] = 1082757                      (: NCName^Token ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082768                      (: 'add-attribute' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082769                      (: 'add-xml-base' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082771                      (: 'compare' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082772                      (: 'count' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082773                      (: 'default' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082774                      (: 'delete' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082775                      (: 'directory-list' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082777                      (: 'else' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082779                      (: 'error' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082780                      (: 'escape-markup' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082781                      (: 'exec' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082782                      (: 'filter' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082783                      (: 'for-each' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082785                      (: 'hash' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082786                      (: 'http-request' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082787                      (: 'identity' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082788                      (: 'if' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082789                      (: 'insert' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082791                      (: 'label-elements' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082792                      (: 'library' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082793                      (: 'load' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082794                      (: 'make-absolute-uris' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082795                      (: 'namespace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082796                      (: 'namespace-rename' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082797                      (: 'pack' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082798                      (: 'parameters' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082800                      (: 'pipeline' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082802                      (: 'rename' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082803                      (: 'replace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082806                      (: 'set-attributes' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082807                      (: 'sink' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082808                      (: 'split-sequence' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082809                      (: 'step' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082810                      (: 'store' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082811                      (: 'string-replace' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082812                      (: 'try' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082813                      (: 'unescape-markup' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082814                      (: 'unwrap' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082815                      (: 'uuid' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082816                      (: 'validate-with-relax-ng' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082817                      (: 'validate-with-schematron' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082818                      (: 'validate-with-xml-schema' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082819                      (: 'variable' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082820                      (: 'viewport' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082822                      (: 'wrap' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082823                      (: 'wrap-sequence' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082824                      (: 'www-form-urldecode' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082825                      (: 'www-form-urlencode' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082826                      (: 'xinclude' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082827                      (: 'xquery' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082828                      (: 'xsl-formatter' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1082829                      (: 'xslt' ':' 'validate-with-xml-schema' :)
            or $state[$p:lk] = 1099141                      (: NCName^Token ':' 'variable' :)
            or $state[$p:lk] = 1099152                      (: 'add-attribute' ':' 'variable' :)
            or $state[$p:lk] = 1099153                      (: 'add-xml-base' ':' 'variable' :)
            or $state[$p:lk] = 1099155                      (: 'compare' ':' 'variable' :)
            or $state[$p:lk] = 1099156                      (: 'count' ':' 'variable' :)
            or $state[$p:lk] = 1099157                      (: 'default' ':' 'variable' :)
            or $state[$p:lk] = 1099158                      (: 'delete' ':' 'variable' :)
            or $state[$p:lk] = 1099159                      (: 'directory-list' ':' 'variable' :)
            or $state[$p:lk] = 1099161                      (: 'else' ':' 'variable' :)
            or $state[$p:lk] = 1099163                      (: 'error' ':' 'variable' :)
            or $state[$p:lk] = 1099164                      (: 'escape-markup' ':' 'variable' :)
            or $state[$p:lk] = 1099165                      (: 'exec' ':' 'variable' :)
            or $state[$p:lk] = 1099166                      (: 'filter' ':' 'variable' :)
            or $state[$p:lk] = 1099167                      (: 'for-each' ':' 'variable' :)
            or $state[$p:lk] = 1099169                      (: 'hash' ':' 'variable' :)
            or $state[$p:lk] = 1099170                      (: 'http-request' ':' 'variable' :)
            or $state[$p:lk] = 1099171                      (: 'identity' ':' 'variable' :)
            or $state[$p:lk] = 1099172                      (: 'if' ':' 'variable' :)
            or $state[$p:lk] = 1099173                      (: 'insert' ':' 'variable' :)
            or $state[$p:lk] = 1099175                      (: 'label-elements' ':' 'variable' :)
            or $state[$p:lk] = 1099176                      (: 'library' ':' 'variable' :)
            or $state[$p:lk] = 1099177                      (: 'load' ':' 'variable' :)
            or $state[$p:lk] = 1099178                      (: 'make-absolute-uris' ':' 'variable' :)
            or $state[$p:lk] = 1099179                      (: 'namespace' ':' 'variable' :)
            or $state[$p:lk] = 1099180                      (: 'namespace-rename' ':' 'variable' :)
            or $state[$p:lk] = 1099181                      (: 'pack' ':' 'variable' :)
            or $state[$p:lk] = 1099182                      (: 'parameters' ':' 'variable' :)
            or $state[$p:lk] = 1099184                      (: 'pipeline' ':' 'variable' :)
            or $state[$p:lk] = 1099186                      (: 'rename' ':' 'variable' :)
            or $state[$p:lk] = 1099187                      (: 'replace' ':' 'variable' :)
            or $state[$p:lk] = 1099190                      (: 'set-attributes' ':' 'variable' :)
            or $state[$p:lk] = 1099191                      (: 'sink' ':' 'variable' :)
            or $state[$p:lk] = 1099192                      (: 'split-sequence' ':' 'variable' :)
            or $state[$p:lk] = 1099193                      (: 'step' ':' 'variable' :)
            or $state[$p:lk] = 1099194                      (: 'store' ':' 'variable' :)
            or $state[$p:lk] = 1099195                      (: 'string-replace' ':' 'variable' :)
            or $state[$p:lk] = 1099196                      (: 'try' ':' 'variable' :)
            or $state[$p:lk] = 1099197                      (: 'unescape-markup' ':' 'variable' :)
            or $state[$p:lk] = 1099198                      (: 'unwrap' ':' 'variable' :)
            or $state[$p:lk] = 1099199                      (: 'uuid' ':' 'variable' :)
            or $state[$p:lk] = 1099200                      (: 'validate-with-relax-ng' ':' 'variable' :)
            or $state[$p:lk] = 1099201                      (: 'validate-with-schematron' ':' 'variable' :)
            or $state[$p:lk] = 1099202                      (: 'validate-with-xml-schema' ':' 'variable' :)
            or $state[$p:lk] = 1099203                      (: 'variable' ':' 'variable' :)
            or $state[$p:lk] = 1099204                      (: 'viewport' ':' 'variable' :)
            or $state[$p:lk] = 1099206                      (: 'wrap' ':' 'variable' :)
            or $state[$p:lk] = 1099207                      (: 'wrap-sequence' ':' 'variable' :)
            or $state[$p:lk] = 1099208                      (: 'www-form-urldecode' ':' 'variable' :)
            or $state[$p:lk] = 1099209                      (: 'www-form-urlencode' ':' 'variable' :)
            or $state[$p:lk] = 1099210                      (: 'xinclude' ':' 'variable' :)
            or $state[$p:lk] = 1099211                      (: 'xquery' ':' 'variable' :)
            or $state[$p:lk] = 1099212                      (: 'xsl-formatter' ':' 'variable' :)
            or $state[$p:lk] = 1099213                      (: 'xslt' ':' 'variable' :)
            or $state[$p:lk] = 1099269                      (: NCName^Token '=' 'variable' :)
            or $state[$p:lk] = 1099280                      (: 'add-attribute' '=' 'variable' :)
            or $state[$p:lk] = 1099281                      (: 'add-xml-base' '=' 'variable' :)
            or $state[$p:lk] = 1099283                      (: 'compare' '=' 'variable' :)
            or $state[$p:lk] = 1099284                      (: 'count' '=' 'variable' :)
            or $state[$p:lk] = 1099285                      (: 'default' '=' 'variable' :)
            or $state[$p:lk] = 1099286                      (: 'delete' '=' 'variable' :)
            or $state[$p:lk] = 1099287                      (: 'directory-list' '=' 'variable' :)
            or $state[$p:lk] = 1099289                      (: 'else' '=' 'variable' :)
            or $state[$p:lk] = 1099291                      (: 'error' '=' 'variable' :)
            or $state[$p:lk] = 1099292                      (: 'escape-markup' '=' 'variable' :)
            or $state[$p:lk] = 1099293                      (: 'exec' '=' 'variable' :)
            or $state[$p:lk] = 1099294                      (: 'filter' '=' 'variable' :)
            or $state[$p:lk] = 1099295                      (: 'for-each' '=' 'variable' :)
            or $state[$p:lk] = 1099297                      (: 'hash' '=' 'variable' :)
            or $state[$p:lk] = 1099298                      (: 'http-request' '=' 'variable' :)
            or $state[$p:lk] = 1099299                      (: 'identity' '=' 'variable' :)
            or $state[$p:lk] = 1099300                      (: 'if' '=' 'variable' :)
            or $state[$p:lk] = 1099301                      (: 'insert' '=' 'variable' :)
            or $state[$p:lk] = 1099303                      (: 'label-elements' '=' 'variable' :)
            or $state[$p:lk] = 1099304                      (: 'library' '=' 'variable' :)
            or $state[$p:lk] = 1099305                      (: 'load' '=' 'variable' :)
            or $state[$p:lk] = 1099306                      (: 'make-absolute-uris' '=' 'variable' :)
            or $state[$p:lk] = 1099307                      (: 'namespace' '=' 'variable' :)
            or $state[$p:lk] = 1099308                      (: 'namespace-rename' '=' 'variable' :)
            or $state[$p:lk] = 1099309                      (: 'pack' '=' 'variable' :)
            or $state[$p:lk] = 1099310                      (: 'parameters' '=' 'variable' :)
            or $state[$p:lk] = 1099312                      (: 'pipeline' '=' 'variable' :)
            or $state[$p:lk] = 1099314                      (: 'rename' '=' 'variable' :)
            or $state[$p:lk] = 1099315                      (: 'replace' '=' 'variable' :)
            or $state[$p:lk] = 1099318                      (: 'set-attributes' '=' 'variable' :)
            or $state[$p:lk] = 1099319                      (: 'sink' '=' 'variable' :)
            or $state[$p:lk] = 1099320                      (: 'split-sequence' '=' 'variable' :)
            or $state[$p:lk] = 1099321                      (: 'step' '=' 'variable' :)
            or $state[$p:lk] = 1099322                      (: 'store' '=' 'variable' :)
            or $state[$p:lk] = 1099323                      (: 'string-replace' '=' 'variable' :)
            or $state[$p:lk] = 1099324                      (: 'try' '=' 'variable' :)
            or $state[$p:lk] = 1099325                      (: 'unescape-markup' '=' 'variable' :)
            or $state[$p:lk] = 1099326                      (: 'unwrap' '=' 'variable' :)
            or $state[$p:lk] = 1099327                      (: 'uuid' '=' 'variable' :)
            or $state[$p:lk] = 1099328                      (: 'validate-with-relax-ng' '=' 'variable' :)
            or $state[$p:lk] = 1099329                      (: 'validate-with-schematron' '=' 'variable' :)
            or $state[$p:lk] = 1099330                      (: 'validate-with-xml-schema' '=' 'variable' :)
            or $state[$p:lk] = 1099331                      (: 'variable' '=' 'variable' :)
            or $state[$p:lk] = 1099332                      (: 'viewport' '=' 'variable' :)
            or $state[$p:lk] = 1099334                      (: 'wrap' '=' 'variable' :)
            or $state[$p:lk] = 1099335                      (: 'wrap-sequence' '=' 'variable' :)
            or $state[$p:lk] = 1099336                      (: 'www-form-urldecode' '=' 'variable' :)
            or $state[$p:lk] = 1099337                      (: 'www-form-urlencode' '=' 'variable' :)
            or $state[$p:lk] = 1099338                      (: 'xinclude' '=' 'variable' :)
            or $state[$p:lk] = 1099339                      (: 'xquery' '=' 'variable' :)
            or $state[$p:lk] = 1099340                      (: 'xsl-formatter' '=' 'variable' :)
            or $state[$p:lk] = 1099341                      (: 'xslt' '=' 'variable' :)
            or $state[$p:lk] = 1115525                      (: NCName^Token ':' 'viewport' :)
            or $state[$p:lk] = 1115536                      (: 'add-attribute' ':' 'viewport' :)
            or $state[$p:lk] = 1115537                      (: 'add-xml-base' ':' 'viewport' :)
            or $state[$p:lk] = 1115539                      (: 'compare' ':' 'viewport' :)
            or $state[$p:lk] = 1115540                      (: 'count' ':' 'viewport' :)
            or $state[$p:lk] = 1115541                      (: 'default' ':' 'viewport' :)
            or $state[$p:lk] = 1115542                      (: 'delete' ':' 'viewport' :)
            or $state[$p:lk] = 1115543                      (: 'directory-list' ':' 'viewport' :)
            or $state[$p:lk] = 1115545                      (: 'else' ':' 'viewport' :)
            or $state[$p:lk] = 1115547                      (: 'error' ':' 'viewport' :)
            or $state[$p:lk] = 1115548                      (: 'escape-markup' ':' 'viewport' :)
            or $state[$p:lk] = 1115549                      (: 'exec' ':' 'viewport' :)
            or $state[$p:lk] = 1115550                      (: 'filter' ':' 'viewport' :)
            or $state[$p:lk] = 1115551                      (: 'for-each' ':' 'viewport' :)
            or $state[$p:lk] = 1115553                      (: 'hash' ':' 'viewport' :)
            or $state[$p:lk] = 1115554                      (: 'http-request' ':' 'viewport' :)
            or $state[$p:lk] = 1115555                      (: 'identity' ':' 'viewport' :)
            or $state[$p:lk] = 1115556                      (: 'if' ':' 'viewport' :)
            or $state[$p:lk] = 1115557                      (: 'insert' ':' 'viewport' :)
            or $state[$p:lk] = 1115559                      (: 'label-elements' ':' 'viewport' :)
            or $state[$p:lk] = 1115560                      (: 'library' ':' 'viewport' :)
            or $state[$p:lk] = 1115561                      (: 'load' ':' 'viewport' :)
            or $state[$p:lk] = 1115562                      (: 'make-absolute-uris' ':' 'viewport' :)
            or $state[$p:lk] = 1115563                      (: 'namespace' ':' 'viewport' :)
            or $state[$p:lk] = 1115564                      (: 'namespace-rename' ':' 'viewport' :)
            or $state[$p:lk] = 1115565                      (: 'pack' ':' 'viewport' :)
            or $state[$p:lk] = 1115566                      (: 'parameters' ':' 'viewport' :)
            or $state[$p:lk] = 1115568                      (: 'pipeline' ':' 'viewport' :)
            or $state[$p:lk] = 1115570                      (: 'rename' ':' 'viewport' :)
            or $state[$p:lk] = 1115571                      (: 'replace' ':' 'viewport' :)
            or $state[$p:lk] = 1115574                      (: 'set-attributes' ':' 'viewport' :)
            or $state[$p:lk] = 1115575                      (: 'sink' ':' 'viewport' :)
            or $state[$p:lk] = 1115576                      (: 'split-sequence' ':' 'viewport' :)
            or $state[$p:lk] = 1115577                      (: 'step' ':' 'viewport' :)
            or $state[$p:lk] = 1115578                      (: 'store' ':' 'viewport' :)
            or $state[$p:lk] = 1115579                      (: 'string-replace' ':' 'viewport' :)
            or $state[$p:lk] = 1115580                      (: 'try' ':' 'viewport' :)
            or $state[$p:lk] = 1115581                      (: 'unescape-markup' ':' 'viewport' :)
            or $state[$p:lk] = 1115582                      (: 'unwrap' ':' 'viewport' :)
            or $state[$p:lk] = 1115583                      (: 'uuid' ':' 'viewport' :)
            or $state[$p:lk] = 1115584                      (: 'validate-with-relax-ng' ':' 'viewport' :)
            or $state[$p:lk] = 1115585                      (: 'validate-with-schematron' ':' 'viewport' :)
            or $state[$p:lk] = 1115586                      (: 'validate-with-xml-schema' ':' 'viewport' :)
            or $state[$p:lk] = 1115587                      (: 'variable' ':' 'viewport' :)
            or $state[$p:lk] = 1115588                      (: 'viewport' ':' 'viewport' :)
            or $state[$p:lk] = 1115590                      (: 'wrap' ':' 'viewport' :)
            or $state[$p:lk] = 1115591                      (: 'wrap-sequence' ':' 'viewport' :)
            or $state[$p:lk] = 1115592                      (: 'www-form-urldecode' ':' 'viewport' :)
            or $state[$p:lk] = 1115593                      (: 'www-form-urlencode' ':' 'viewport' :)
            or $state[$p:lk] = 1115594                      (: 'xinclude' ':' 'viewport' :)
            or $state[$p:lk] = 1115595                      (: 'xquery' ':' 'viewport' :)
            or $state[$p:lk] = 1115596                      (: 'xsl-formatter' ':' 'viewport' :)
            or $state[$p:lk] = 1115597                      (: 'xslt' ':' 'viewport' :)
            or $state[$p:lk] = 1148293                      (: NCName^Token ':' 'wrap' :)
            or $state[$p:lk] = 1148304                      (: 'add-attribute' ':' 'wrap' :)
            or $state[$p:lk] = 1148305                      (: 'add-xml-base' ':' 'wrap' :)
            or $state[$p:lk] = 1148307                      (: 'compare' ':' 'wrap' :)
            or $state[$p:lk] = 1148308                      (: 'count' ':' 'wrap' :)
            or $state[$p:lk] = 1148309                      (: 'default' ':' 'wrap' :)
            or $state[$p:lk] = 1148310                      (: 'delete' ':' 'wrap' :)
            or $state[$p:lk] = 1148311                      (: 'directory-list' ':' 'wrap' :)
            or $state[$p:lk] = 1148313                      (: 'else' ':' 'wrap' :)
            or $state[$p:lk] = 1148315                      (: 'error' ':' 'wrap' :)
            or $state[$p:lk] = 1148316                      (: 'escape-markup' ':' 'wrap' :)
            or $state[$p:lk] = 1148317                      (: 'exec' ':' 'wrap' :)
            or $state[$p:lk] = 1148318                      (: 'filter' ':' 'wrap' :)
            or $state[$p:lk] = 1148319                      (: 'for-each' ':' 'wrap' :)
            or $state[$p:lk] = 1148321                      (: 'hash' ':' 'wrap' :)
            or $state[$p:lk] = 1148322                      (: 'http-request' ':' 'wrap' :)
            or $state[$p:lk] = 1148323                      (: 'identity' ':' 'wrap' :)
            or $state[$p:lk] = 1148324                      (: 'if' ':' 'wrap' :)
            or $state[$p:lk] = 1148325                      (: 'insert' ':' 'wrap' :)
            or $state[$p:lk] = 1148327                      (: 'label-elements' ':' 'wrap' :)
            or $state[$p:lk] = 1148328                      (: 'library' ':' 'wrap' :)
            or $state[$p:lk] = 1148329                      (: 'load' ':' 'wrap' :)
            or $state[$p:lk] = 1148330                      (: 'make-absolute-uris' ':' 'wrap' :)
            or $state[$p:lk] = 1148331                      (: 'namespace' ':' 'wrap' :)
            or $state[$p:lk] = 1148332                      (: 'namespace-rename' ':' 'wrap' :)
            or $state[$p:lk] = 1148333                      (: 'pack' ':' 'wrap' :)
            or $state[$p:lk] = 1148334                      (: 'parameters' ':' 'wrap' :)
            or $state[$p:lk] = 1148336                      (: 'pipeline' ':' 'wrap' :)
            or $state[$p:lk] = 1148338                      (: 'rename' ':' 'wrap' :)
            or $state[$p:lk] = 1148339                      (: 'replace' ':' 'wrap' :)
            or $state[$p:lk] = 1148342                      (: 'set-attributes' ':' 'wrap' :)
            or $state[$p:lk] = 1148343                      (: 'sink' ':' 'wrap' :)
            or $state[$p:lk] = 1148344                      (: 'split-sequence' ':' 'wrap' :)
            or $state[$p:lk] = 1148345                      (: 'step' ':' 'wrap' :)
            or $state[$p:lk] = 1148346                      (: 'store' ':' 'wrap' :)
            or $state[$p:lk] = 1148347                      (: 'string-replace' ':' 'wrap' :)
            or $state[$p:lk] = 1148348                      (: 'try' ':' 'wrap' :)
            or $state[$p:lk] = 1148349                      (: 'unescape-markup' ':' 'wrap' :)
            or $state[$p:lk] = 1148350                      (: 'unwrap' ':' 'wrap' :)
            or $state[$p:lk] = 1148351                      (: 'uuid' ':' 'wrap' :)
            or $state[$p:lk] = 1148352                      (: 'validate-with-relax-ng' ':' 'wrap' :)
            or $state[$p:lk] = 1148353                      (: 'validate-with-schematron' ':' 'wrap' :)
            or $state[$p:lk] = 1148354                      (: 'validate-with-xml-schema' ':' 'wrap' :)
            or $state[$p:lk] = 1148355                      (: 'variable' ':' 'wrap' :)
            or $state[$p:lk] = 1148356                      (: 'viewport' ':' 'wrap' :)
            or $state[$p:lk] = 1148358                      (: 'wrap' ':' 'wrap' :)
            or $state[$p:lk] = 1148359                      (: 'wrap-sequence' ':' 'wrap' :)
            or $state[$p:lk] = 1148360                      (: 'www-form-urldecode' ':' 'wrap' :)
            or $state[$p:lk] = 1148361                      (: 'www-form-urlencode' ':' 'wrap' :)
            or $state[$p:lk] = 1148362                      (: 'xinclude' ':' 'wrap' :)
            or $state[$p:lk] = 1148363                      (: 'xquery' ':' 'wrap' :)
            or $state[$p:lk] = 1148364                      (: 'xsl-formatter' ':' 'wrap' :)
            or $state[$p:lk] = 1148365                      (: 'xslt' ':' 'wrap' :)
            or $state[$p:lk] = 1164677                      (: NCName^Token ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164688                      (: 'add-attribute' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164689                      (: 'add-xml-base' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164691                      (: 'compare' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164692                      (: 'count' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164693                      (: 'default' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164694                      (: 'delete' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164695                      (: 'directory-list' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164697                      (: 'else' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164699                      (: 'error' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164700                      (: 'escape-markup' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164701                      (: 'exec' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164702                      (: 'filter' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164703                      (: 'for-each' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164705                      (: 'hash' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164706                      (: 'http-request' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164707                      (: 'identity' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164708                      (: 'if' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164709                      (: 'insert' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164711                      (: 'label-elements' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164712                      (: 'library' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164713                      (: 'load' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164714                      (: 'make-absolute-uris' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164715                      (: 'namespace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164716                      (: 'namespace-rename' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164717                      (: 'pack' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164718                      (: 'parameters' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164720                      (: 'pipeline' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164722                      (: 'rename' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164723                      (: 'replace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164726                      (: 'set-attributes' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164727                      (: 'sink' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164728                      (: 'split-sequence' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164729                      (: 'step' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164730                      (: 'store' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164731                      (: 'string-replace' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164732                      (: 'try' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164733                      (: 'unescape-markup' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164734                      (: 'unwrap' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164735                      (: 'uuid' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164736                      (: 'validate-with-relax-ng' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164737                      (: 'validate-with-schematron' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164738                      (: 'validate-with-xml-schema' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164739                      (: 'variable' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164740                      (: 'viewport' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164742                      (: 'wrap' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164743                      (: 'wrap-sequence' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164744                      (: 'www-form-urldecode' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164745                      (: 'www-form-urlencode' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164746                      (: 'xinclude' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164747                      (: 'xquery' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164748                      (: 'xsl-formatter' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1164749                      (: 'xslt' ':' 'wrap-sequence' :)
            or $state[$p:lk] = 1181061                      (: NCName^Token ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181072                      (: 'add-attribute' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181073                      (: 'add-xml-base' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181075                      (: 'compare' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181076                      (: 'count' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181077                      (: 'default' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181078                      (: 'delete' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181079                      (: 'directory-list' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181081                      (: 'else' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181083                      (: 'error' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181084                      (: 'escape-markup' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181085                      (: 'exec' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181086                      (: 'filter' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181087                      (: 'for-each' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181089                      (: 'hash' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181090                      (: 'http-request' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181091                      (: 'identity' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181092                      (: 'if' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181093                      (: 'insert' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181095                      (: 'label-elements' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181096                      (: 'library' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181097                      (: 'load' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181098                      (: 'make-absolute-uris' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181099                      (: 'namespace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181100                      (: 'namespace-rename' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181101                      (: 'pack' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181102                      (: 'parameters' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181104                      (: 'pipeline' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181106                      (: 'rename' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181107                      (: 'replace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181110                      (: 'set-attributes' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181111                      (: 'sink' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181112                      (: 'split-sequence' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181113                      (: 'step' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181114                      (: 'store' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181115                      (: 'string-replace' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181116                      (: 'try' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181117                      (: 'unescape-markup' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181118                      (: 'unwrap' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181119                      (: 'uuid' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181120                      (: 'validate-with-relax-ng' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181121                      (: 'validate-with-schematron' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181122                      (: 'validate-with-xml-schema' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181123                      (: 'variable' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181124                      (: 'viewport' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181126                      (: 'wrap' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181127                      (: 'wrap-sequence' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181128                      (: 'www-form-urldecode' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181129                      (: 'www-form-urlencode' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181130                      (: 'xinclude' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181131                      (: 'xquery' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181132                      (: 'xsl-formatter' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1181133                      (: 'xslt' ':' 'www-form-urldecode' :)
            or $state[$p:lk] = 1197445                      (: NCName^Token ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197456                      (: 'add-attribute' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197457                      (: 'add-xml-base' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197459                      (: 'compare' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197460                      (: 'count' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197461                      (: 'default' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197462                      (: 'delete' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197463                      (: 'directory-list' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197465                      (: 'else' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197467                      (: 'error' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197468                      (: 'escape-markup' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197469                      (: 'exec' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197470                      (: 'filter' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197471                      (: 'for-each' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197473                      (: 'hash' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197474                      (: 'http-request' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197475                      (: 'identity' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197476                      (: 'if' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197477                      (: 'insert' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197479                      (: 'label-elements' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197480                      (: 'library' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197481                      (: 'load' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197482                      (: 'make-absolute-uris' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197483                      (: 'namespace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197484                      (: 'namespace-rename' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197485                      (: 'pack' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197486                      (: 'parameters' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197488                      (: 'pipeline' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197490                      (: 'rename' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197491                      (: 'replace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197494                      (: 'set-attributes' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197495                      (: 'sink' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197496                      (: 'split-sequence' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197497                      (: 'step' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197498                      (: 'store' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197499                      (: 'string-replace' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197500                      (: 'try' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197501                      (: 'unescape-markup' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197502                      (: 'unwrap' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197503                      (: 'uuid' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197504                      (: 'validate-with-relax-ng' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197505                      (: 'validate-with-schematron' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197506                      (: 'validate-with-xml-schema' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197507                      (: 'variable' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197508                      (: 'viewport' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197510                      (: 'wrap' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197511                      (: 'wrap-sequence' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197512                      (: 'www-form-urldecode' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197513                      (: 'www-form-urlencode' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197514                      (: 'xinclude' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197515                      (: 'xquery' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197516                      (: 'xsl-formatter' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1197517                      (: 'xslt' ':' 'www-form-urlencode' :)
            or $state[$p:lk] = 1213829                      (: NCName^Token ':' 'xinclude' :)
            or $state[$p:lk] = 1213840                      (: 'add-attribute' ':' 'xinclude' :)
            or $state[$p:lk] = 1213841                      (: 'add-xml-base' ':' 'xinclude' :)
            or $state[$p:lk] = 1213843                      (: 'compare' ':' 'xinclude' :)
            or $state[$p:lk] = 1213844                      (: 'count' ':' 'xinclude' :)
            or $state[$p:lk] = 1213845                      (: 'default' ':' 'xinclude' :)
            or $state[$p:lk] = 1213846                      (: 'delete' ':' 'xinclude' :)
            or $state[$p:lk] = 1213847                      (: 'directory-list' ':' 'xinclude' :)
            or $state[$p:lk] = 1213849                      (: 'else' ':' 'xinclude' :)
            or $state[$p:lk] = 1213851                      (: 'error' ':' 'xinclude' :)
            or $state[$p:lk] = 1213852                      (: 'escape-markup' ':' 'xinclude' :)
            or $state[$p:lk] = 1213853                      (: 'exec' ':' 'xinclude' :)
            or $state[$p:lk] = 1213854                      (: 'filter' ':' 'xinclude' :)
            or $state[$p:lk] = 1213855                      (: 'for-each' ':' 'xinclude' :)
            or $state[$p:lk] = 1213857                      (: 'hash' ':' 'xinclude' :)
            or $state[$p:lk] = 1213858                      (: 'http-request' ':' 'xinclude' :)
            or $state[$p:lk] = 1213859                      (: 'identity' ':' 'xinclude' :)
            or $state[$p:lk] = 1213860                      (: 'if' ':' 'xinclude' :)
            or $state[$p:lk] = 1213861                      (: 'insert' ':' 'xinclude' :)
            or $state[$p:lk] = 1213863                      (: 'label-elements' ':' 'xinclude' :)
            or $state[$p:lk] = 1213864                      (: 'library' ':' 'xinclude' :)
            or $state[$p:lk] = 1213865                      (: 'load' ':' 'xinclude' :)
            or $state[$p:lk] = 1213866                      (: 'make-absolute-uris' ':' 'xinclude' :)
            or $state[$p:lk] = 1213867                      (: 'namespace' ':' 'xinclude' :)
            or $state[$p:lk] = 1213868                      (: 'namespace-rename' ':' 'xinclude' :)
            or $state[$p:lk] = 1213869                      (: 'pack' ':' 'xinclude' :)
            or $state[$p:lk] = 1213870                      (: 'parameters' ':' 'xinclude' :)
            or $state[$p:lk] = 1213872                      (: 'pipeline' ':' 'xinclude' :)
            or $state[$p:lk] = 1213874                      (: 'rename' ':' 'xinclude' :)
            or $state[$p:lk] = 1213875                      (: 'replace' ':' 'xinclude' :)
            or $state[$p:lk] = 1213878                      (: 'set-attributes' ':' 'xinclude' :)
            or $state[$p:lk] = 1213879                      (: 'sink' ':' 'xinclude' :)
            or $state[$p:lk] = 1213880                      (: 'split-sequence' ':' 'xinclude' :)
            or $state[$p:lk] = 1213881                      (: 'step' ':' 'xinclude' :)
            or $state[$p:lk] = 1213882                      (: 'store' ':' 'xinclude' :)
            or $state[$p:lk] = 1213883                      (: 'string-replace' ':' 'xinclude' :)
            or $state[$p:lk] = 1213884                      (: 'try' ':' 'xinclude' :)
            or $state[$p:lk] = 1213885                      (: 'unescape-markup' ':' 'xinclude' :)
            or $state[$p:lk] = 1213886                      (: 'unwrap' ':' 'xinclude' :)
            or $state[$p:lk] = 1213887                      (: 'uuid' ':' 'xinclude' :)
            or $state[$p:lk] = 1213888                      (: 'validate-with-relax-ng' ':' 'xinclude' :)
            or $state[$p:lk] = 1213889                      (: 'validate-with-schematron' ':' 'xinclude' :)
            or $state[$p:lk] = 1213890                      (: 'validate-with-xml-schema' ':' 'xinclude' :)
            or $state[$p:lk] = 1213891                      (: 'variable' ':' 'xinclude' :)
            or $state[$p:lk] = 1213892                      (: 'viewport' ':' 'xinclude' :)
            or $state[$p:lk] = 1213894                      (: 'wrap' ':' 'xinclude' :)
            or $state[$p:lk] = 1213895                      (: 'wrap-sequence' ':' 'xinclude' :)
            or $state[$p:lk] = 1213896                      (: 'www-form-urldecode' ':' 'xinclude' :)
            or $state[$p:lk] = 1213897                      (: 'www-form-urlencode' ':' 'xinclude' :)
            or $state[$p:lk] = 1213898                      (: 'xinclude' ':' 'xinclude' :)
            or $state[$p:lk] = 1213899                      (: 'xquery' ':' 'xinclude' :)
            or $state[$p:lk] = 1213900                      (: 'xsl-formatter' ':' 'xinclude' :)
            or $state[$p:lk] = 1213901                      (: 'xslt' ':' 'xinclude' :)
            or $state[$p:lk] = 1230213                      (: NCName^Token ':' 'xquery' :)
            or $state[$p:lk] = 1230224                      (: 'add-attribute' ':' 'xquery' :)
            or $state[$p:lk] = 1230225                      (: 'add-xml-base' ':' 'xquery' :)
            or $state[$p:lk] = 1230227                      (: 'compare' ':' 'xquery' :)
            or $state[$p:lk] = 1230228                      (: 'count' ':' 'xquery' :)
            or $state[$p:lk] = 1230229                      (: 'default' ':' 'xquery' :)
            or $state[$p:lk] = 1230230                      (: 'delete' ':' 'xquery' :)
            or $state[$p:lk] = 1230231                      (: 'directory-list' ':' 'xquery' :)
            or $state[$p:lk] = 1230233                      (: 'else' ':' 'xquery' :)
            or $state[$p:lk] = 1230235                      (: 'error' ':' 'xquery' :)
            or $state[$p:lk] = 1230236                      (: 'escape-markup' ':' 'xquery' :)
            or $state[$p:lk] = 1230237                      (: 'exec' ':' 'xquery' :)
            or $state[$p:lk] = 1230238                      (: 'filter' ':' 'xquery' :)
            or $state[$p:lk] = 1230239                      (: 'for-each' ':' 'xquery' :)
            or $state[$p:lk] = 1230241                      (: 'hash' ':' 'xquery' :)
            or $state[$p:lk] = 1230242                      (: 'http-request' ':' 'xquery' :)
            or $state[$p:lk] = 1230243                      (: 'identity' ':' 'xquery' :)
            or $state[$p:lk] = 1230244                      (: 'if' ':' 'xquery' :)
            or $state[$p:lk] = 1230245                      (: 'insert' ':' 'xquery' :)
            or $state[$p:lk] = 1230247                      (: 'label-elements' ':' 'xquery' :)
            or $state[$p:lk] = 1230248                      (: 'library' ':' 'xquery' :)
            or $state[$p:lk] = 1230249                      (: 'load' ':' 'xquery' :)
            or $state[$p:lk] = 1230250                      (: 'make-absolute-uris' ':' 'xquery' :)
            or $state[$p:lk] = 1230251                      (: 'namespace' ':' 'xquery' :)
            or $state[$p:lk] = 1230252                      (: 'namespace-rename' ':' 'xquery' :)
            or $state[$p:lk] = 1230253                      (: 'pack' ':' 'xquery' :)
            or $state[$p:lk] = 1230254                      (: 'parameters' ':' 'xquery' :)
            or $state[$p:lk] = 1230256                      (: 'pipeline' ':' 'xquery' :)
            or $state[$p:lk] = 1230258                      (: 'rename' ':' 'xquery' :)
            or $state[$p:lk] = 1230259                      (: 'replace' ':' 'xquery' :)
            or $state[$p:lk] = 1230262                      (: 'set-attributes' ':' 'xquery' :)
            or $state[$p:lk] = 1230263                      (: 'sink' ':' 'xquery' :)
            or $state[$p:lk] = 1230264                      (: 'split-sequence' ':' 'xquery' :)
            or $state[$p:lk] = 1230265                      (: 'step' ':' 'xquery' :)
            or $state[$p:lk] = 1230266                      (: 'store' ':' 'xquery' :)
            or $state[$p:lk] = 1230267                      (: 'string-replace' ':' 'xquery' :)
            or $state[$p:lk] = 1230268                      (: 'try' ':' 'xquery' :)
            or $state[$p:lk] = 1230269                      (: 'unescape-markup' ':' 'xquery' :)
            or $state[$p:lk] = 1230270                      (: 'unwrap' ':' 'xquery' :)
            or $state[$p:lk] = 1230271                      (: 'uuid' ':' 'xquery' :)
            or $state[$p:lk] = 1230272                      (: 'validate-with-relax-ng' ':' 'xquery' :)
            or $state[$p:lk] = 1230273                      (: 'validate-with-schematron' ':' 'xquery' :)
            or $state[$p:lk] = 1230274                      (: 'validate-with-xml-schema' ':' 'xquery' :)
            or $state[$p:lk] = 1230275                      (: 'variable' ':' 'xquery' :)
            or $state[$p:lk] = 1230276                      (: 'viewport' ':' 'xquery' :)
            or $state[$p:lk] = 1230278                      (: 'wrap' ':' 'xquery' :)
            or $state[$p:lk] = 1230279                      (: 'wrap-sequence' ':' 'xquery' :)
            or $state[$p:lk] = 1230280                      (: 'www-form-urldecode' ':' 'xquery' :)
            or $state[$p:lk] = 1230281                      (: 'www-form-urlencode' ':' 'xquery' :)
            or $state[$p:lk] = 1230282                      (: 'xinclude' ':' 'xquery' :)
            or $state[$p:lk] = 1230283                      (: 'xquery' ':' 'xquery' :)
            or $state[$p:lk] = 1230284                      (: 'xsl-formatter' ':' 'xquery' :)
            or $state[$p:lk] = 1230285                      (: 'xslt' ':' 'xquery' :)
            or $state[$p:lk] = 1246597                      (: NCName^Token ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246608                      (: 'add-attribute' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246609                      (: 'add-xml-base' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246611                      (: 'compare' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246612                      (: 'count' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246613                      (: 'default' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246614                      (: 'delete' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246615                      (: 'directory-list' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246617                      (: 'else' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246619                      (: 'error' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246620                      (: 'escape-markup' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246621                      (: 'exec' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246622                      (: 'filter' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246623                      (: 'for-each' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246625                      (: 'hash' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246626                      (: 'http-request' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246627                      (: 'identity' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246628                      (: 'if' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246629                      (: 'insert' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246631                      (: 'label-elements' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246632                      (: 'library' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246633                      (: 'load' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246634                      (: 'make-absolute-uris' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246635                      (: 'namespace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246636                      (: 'namespace-rename' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246637                      (: 'pack' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246638                      (: 'parameters' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246640                      (: 'pipeline' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246642                      (: 'rename' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246643                      (: 'replace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246646                      (: 'set-attributes' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246647                      (: 'sink' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246648                      (: 'split-sequence' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246649                      (: 'step' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246650                      (: 'store' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246651                      (: 'string-replace' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246652                      (: 'try' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246653                      (: 'unescape-markup' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246654                      (: 'unwrap' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246655                      (: 'uuid' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246656                      (: 'validate-with-relax-ng' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246657                      (: 'validate-with-schematron' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246658                      (: 'validate-with-xml-schema' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246659                      (: 'variable' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246660                      (: 'viewport' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246662                      (: 'wrap' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246663                      (: 'wrap-sequence' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246664                      (: 'www-form-urldecode' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246665                      (: 'www-form-urlencode' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246666                      (: 'xinclude' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246667                      (: 'xquery' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246668                      (: 'xsl-formatter' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1246669                      (: 'xslt' ':' 'xsl-formatter' :)
            or $state[$p:lk] = 1262981                      (: NCName^Token ':' 'xslt' :)
            or $state[$p:lk] = 1262992                      (: 'add-attribute' ':' 'xslt' :)
            or $state[$p:lk] = 1262993                      (: 'add-xml-base' ':' 'xslt' :)
            or $state[$p:lk] = 1262995                      (: 'compare' ':' 'xslt' :)
            or $state[$p:lk] = 1262996                      (: 'count' ':' 'xslt' :)
            or $state[$p:lk] = 1262997                      (: 'default' ':' 'xslt' :)
            or $state[$p:lk] = 1262998                      (: 'delete' ':' 'xslt' :)
            or $state[$p:lk] = 1262999                      (: 'directory-list' ':' 'xslt' :)
            or $state[$p:lk] = 1263001                      (: 'else' ':' 'xslt' :)
            or $state[$p:lk] = 1263003                      (: 'error' ':' 'xslt' :)
            or $state[$p:lk] = 1263004                      (: 'escape-markup' ':' 'xslt' :)
            or $state[$p:lk] = 1263005                      (: 'exec' ':' 'xslt' :)
            or $state[$p:lk] = 1263006                      (: 'filter' ':' 'xslt' :)
            or $state[$p:lk] = 1263007                      (: 'for-each' ':' 'xslt' :)
            or $state[$p:lk] = 1263009                      (: 'hash' ':' 'xslt' :)
            or $state[$p:lk] = 1263010                      (: 'http-request' ':' 'xslt' :)
            or $state[$p:lk] = 1263011                      (: 'identity' ':' 'xslt' :)
            or $state[$p:lk] = 1263012                      (: 'if' ':' 'xslt' :)
            or $state[$p:lk] = 1263013                      (: 'insert' ':' 'xslt' :)
            or $state[$p:lk] = 1263015                      (: 'label-elements' ':' 'xslt' :)
            or $state[$p:lk] = 1263016                      (: 'library' ':' 'xslt' :)
            or $state[$p:lk] = 1263017                      (: 'load' ':' 'xslt' :)
            or $state[$p:lk] = 1263018                      (: 'make-absolute-uris' ':' 'xslt' :)
            or $state[$p:lk] = 1263019                      (: 'namespace' ':' 'xslt' :)
            or $state[$p:lk] = 1263020                      (: 'namespace-rename' ':' 'xslt' :)
            or $state[$p:lk] = 1263021                      (: 'pack' ':' 'xslt' :)
            or $state[$p:lk] = 1263022                      (: 'parameters' ':' 'xslt' :)
            or $state[$p:lk] = 1263024                      (: 'pipeline' ':' 'xslt' :)
            or $state[$p:lk] = 1263026                      (: 'rename' ':' 'xslt' :)
            or $state[$p:lk] = 1263027                      (: 'replace' ':' 'xslt' :)
            or $state[$p:lk] = 1263030                      (: 'set-attributes' ':' 'xslt' :)
            or $state[$p:lk] = 1263031                      (: 'sink' ':' 'xslt' :)
            or $state[$p:lk] = 1263032                      (: 'split-sequence' ':' 'xslt' :)
            or $state[$p:lk] = 1263033                      (: 'step' ':' 'xslt' :)
            or $state[$p:lk] = 1263034                      (: 'store' ':' 'xslt' :)
            or $state[$p:lk] = 1263035                      (: 'string-replace' ':' 'xslt' :)
            or $state[$p:lk] = 1263036                      (: 'try' ':' 'xslt' :)
            or $state[$p:lk] = 1263037                      (: 'unescape-markup' ':' 'xslt' :)
            or $state[$p:lk] = 1263038                      (: 'unwrap' ':' 'xslt' :)
            or $state[$p:lk] = 1263039                      (: 'uuid' ':' 'xslt' :)
            or $state[$p:lk] = 1263040                      (: 'validate-with-relax-ng' ':' 'xslt' :)
            or $state[$p:lk] = 1263041                      (: 'validate-with-schematron' ':' 'xslt' :)
            or $state[$p:lk] = 1263042                      (: 'validate-with-xml-schema' ':' 'xslt' :)
            or $state[$p:lk] = 1263043                      (: 'variable' ':' 'xslt' :)
            or $state[$p:lk] = 1263044                      (: 'viewport' ':' 'xslt' :)
            or $state[$p:lk] = 1263046                      (: 'wrap' ':' 'xslt' :)
            or $state[$p:lk] = 1263047                      (: 'wrap-sequence' ':' 'xslt' :)
            or $state[$p:lk] = 1263048                      (: 'www-form-urldecode' ':' 'xslt' :)
            or $state[$p:lk] = 1263049                      (: 'www-form-urlencode' ':' 'xslt' :)
            or $state[$p:lk] = 1263050                      (: 'xinclude' ':' 'xslt' :)
            or $state[$p:lk] = 1263051                      (: 'xquery' ':' 'xslt' :)
            or $state[$p:lk] = 1263052                      (: 'xsl-formatter' ':' 'xslt' :)
            or $state[$p:lk] = 1263053) then                (: 'xslt' ':' 'xslt' :)
        let $state := p:memoized($state, 1)
        return
          if ($state[$p:lk] != 0) then
            $state
          else
            let $backtrack := $state
            let $state := p:strip-result($state)
            let $state := p:try-variable($input, $state)
            return
              if (not($state[$p:error])) then
                p:memoize($backtrack, $state, -1, 1)
              else
                p:memoize($backtrack, $state, -7, 1)
      else
        $state
    let $state :=
      if ($state[$p:lk] = -1) then
        let $state := p:try-variable($input, $state)
        return $state
      else if ($state[$p:lk] = 927                          (: 'for-each' '(' :)
            or $state[$p:lk] = 4127                         (: 'for-each' 'from' :)
            or $state[$p:lk] = 10015) then                  (: 'for-each' '{' :)
        let $state := p:try-forEachStep($input, $state)
        return $state
      else if ($state[$p:lk] = 964                          (: 'viewport' '(' :)
            or $state[$p:lk] = 4164                         (: 'viewport' 'from' :)
            or $state[$p:lk] = 10052) then                  (: 'viewport' '{' :)
        let $state := p:try-viewportStep($input, $state)
        return $state
      else if ($state[$p:lk] = 932) then                    (: 'if' '(' :)
        let $state := p:try-chooseStep($input, $state)
        return $state
      else if ($state[$p:lk] = 10044) then                  (: 'try' '{' :)
        let $state := p:try-tryStep($input, $state)
        return $state
      else if ($state[$p:lk] = 78) then                     (: '{' :)
        let $state := p:try-groupStep($input, $state)
        return $state
      else if ($state[$p:error]) then
        $state
      else
        let $state := p:try-atomicStep($input, $state)
        return $state
    let $state := p:lookahead1W(54, $input, $state)         (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' | '}' :)
    return
      if ($state[$p:l1] = 79) then                          (: '}' :)
        $state
      else
        p:try-subpipeline-1($input, $state)
};

(:~
 : Parse subpipeline.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-subpipeline($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:parse-subpipeline-1($input, $state)
  return p:reduce($state, "subpipeline", $count)
};

(:~
 : Try parsing subpipeline.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-subpipeline($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:try-subpipeline-1($input, $state)
  return p:reduce($state, "subpipeline", $count)
};

(:~
 : Parse option.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-option($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(6, $input, $state)                  (: '$' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-QName($input, $state)
  let $state := p:lookahead1W(35, $input, $state)           (: Whitespace | ')' | ',' | '=' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 12) then                       (: '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      let $state := p:lookahead1W(6, $input, $state)        (: Whitespace | quotedstr :)
      let $state := p:shift(4, $input, $state)              (: quotedstr :)
      return $state
    else
      $state
  return p:reduce($state, "option", $count)
};

(:~
 : Try parsing option.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-option($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(6, $input, $state)                  (: '$' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-QName($input, $state)
  let $state := p:lookahead1W(35, $input, $state)           (: Whitespace | ')' | ',' | '=' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 12) then                       (: '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      let $state := p:lookahead1W(6, $input, $state)        (: Whitespace | quotedstr :)
      let $state := p:shift(4, $input, $state)              (: quotedstr :)
      return $state
    else
      $state
  return p:reduce($state, "option", $count)
};

(:~
 : Parse input.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-input($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 49) then                            (: 'primary' :)
      let $state := p:lookahead2W(51, $input, $state)       (: Whitespace | NCName^Token | ')' | ',' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1073                                (: 'primary' ')' :)
     or $state[$p:lk] = 1201) then                          (: 'primary' ',' :)
      let $state := p:shift(49, $input, $state)             (: 'primary' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(49, $input, $state)             (: 'primary' :)
      let $state := p:lookahead1W(48, $input, $state)       (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      let $state := p:parse-NCName($input, $state)
      let $state := p:lookahead1W(43, $input, $state)       (: Whitespace | ')' | ',' | 'item' | 'sequence' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 38                         (: 'item' :)
              or $state[$p:l1] = 52) then                   (: 'sequence' :)
          let $state :=
            if ($state[$p:l1] = 52) then                    (: 'sequence' :)
              let $state := p:shift(52, $input, $state)     (: 'sequence' :)
              return $state
            else if ($state[$p:error]) then
              $state
            else
              let $state := p:shift(38, $input, $state)     (: 'item' :)
              return $state
          return $state
        else
          $state
      return $state
  return p:reduce($state, "input", $count)
};

(:~
 : Try parsing input.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-input($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 49) then                            (: 'primary' :)
      let $state := p:lookahead2W(51, $input, $state)       (: Whitespace | NCName^Token | ')' | ',' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1073                                (: 'primary' ')' :)
     or $state[$p:lk] = 1201) then                          (: 'primary' ',' :)
      let $state := p:shift(49, $input, $state)             (: 'primary' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(49, $input, $state)             (: 'primary' :)
      let $state := p:lookahead1W(48, $input, $state)       (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
      let $state := p:try-NCName($input, $state)
      let $state := p:lookahead1W(43, $input, $state)       (: Whitespace | ')' | ',' | 'item' | 'sequence' :)
      let $state :=
        if ($state[$p:error]) then
          $state
        else if ($state[$p:l1] = 38                         (: 'item' :)
              or $state[$p:l1] = 52) then                   (: 'sequence' :)
          let $state :=
            if ($state[$p:l1] = 52) then                    (: 'sequence' :)
              let $state := p:shift(52, $input, $state)     (: 'sequence' :)
              return $state
            else if ($state[$p:error]) then
              $state
            else
              let $state := p:shift(38, $input, $state)     (: 'item' :)
              return $state
          return $state
        else
          $state
      return $state
  return p:reduce($state, "input", $count)
};

(:~
 : Parse the 1st loop of production inports (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-inports-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(26, $input, $state)         (: Whitespace | ')' | ',' :)
    return
      if ($state[$p:l1] != 9) then                          (: ',' :)
        $state
      else
        let $state := p:shift(9, $input, $state)            (: ',' :)
        let $state := p:lookahead1W(24, $input, $state)     (: Whitespace | '$' | 'primary' :)
        let $state :=
          if ($state[$p:l1] = 49) then                      (: 'primary' :)
            let $state := p:parse-input($input, $state)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:parse-option($input, $state)
            return $state
        return p:parse-inports-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production inports (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-inports-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(26, $input, $state)         (: Whitespace | ')' | ',' :)
    return
      if ($state[$p:l1] != 9) then                          (: ',' :)
        $state
      else
        let $state := p:shift(9, $input, $state)            (: ',' :)
        let $state := p:lookahead1W(24, $input, $state)     (: Whitespace | '$' | 'primary' :)
        let $state :=
          if ($state[$p:l1] = 49) then                      (: 'primary' :)
            let $state := p:try-input($input, $state)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:try-option($input, $state)
            return $state
        return p:try-inports-1($input, $state)
};

(:~
 : Parse inports.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-inports($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:lookahead1W(41, $input, $state)           (: Whitespace | '$' | ')' | ',' | 'primary' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 6                              (: '$' :)
          or $state[$p:l1] = 49) then                       (: 'primary' :)
      let $state :=
        if ($state[$p:l1] = 49) then                        (: 'primary' :)
          let $state := p:parse-input($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:parse-option($input, $state)
          return $state
      return $state
    else
      $state
  let $state := p:parse-inports-1($input, $state)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "inports", $count)
};

(:~
 : Try parsing inports.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-inports($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:shift(7, $input, $state)                  (: '(' :)
  let $state := p:lookahead1W(41, $input, $state)           (: Whitespace | '$' | ')' | ',' | 'primary' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 6                              (: '$' :)
          or $state[$p:l1] = 49) then                       (: 'primary' :)
      let $state :=
        if ($state[$p:l1] = 49) then                        (: 'primary' :)
          let $state := p:try-input($input, $state)
          return $state
        else if ($state[$p:error]) then
          $state
        else
          let $state := p:try-option($input, $state)
          return $state
      return $state
    else
      $state
  let $state := p:try-inports-1($input, $state)
  let $state := p:shift(8, $input, $state)                  (: ')' :)
  return p:reduce($state, "inports", $count)
};

(:~
 : Parse CName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-CName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:parse-NCName($input, $state)
  let $state := p:lookahead1(2, $input, $state)             (: ':' :)
  let $state := p:shift(11, $input, $state)                 (: ':' :)
  let $state := p:lookahead1(47, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:parse-NCName($input, $state)
  return p:reduce($state, "CName", $count)
};

(:~
 : Try parsing CName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-CName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:try-NCName($input, $state)
  let $state := p:lookahead1(2, $input, $state)             (: ':' :)
  let $state := p:shift(11, $input, $state)                 (: ':' :)
  let $state := p:lookahead1(47, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:try-NCName($input, $state)
  return p:reduce($state, "CName", $count)
};

(:~
 : Parse QName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-QName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(47, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 5                                   (: 'add-attribute' :)
     or $state[$p:l1] = 16                                  (: 'add-xml-base' :)
     or $state[$p:l1] = 17                                  (: 'compare' :)
     or $state[$p:l1] = 19                                  (: 'count' :)
     or $state[$p:l1] = 20                                  (: 'default' :)
     or $state[$p:l1] = 21                                  (: 'delete' :)
     or $state[$p:l1] = 22                                  (: 'directory-list' :)
     or $state[$p:l1] = 23                                  (: 'else' :)
     or $state[$p:l1] = 25                                  (: 'error' :)
     or $state[$p:l1] = 27                                  (: 'escape-markup' :)
     or $state[$p:l1] = 28                                  (: 'exec' :)
     or $state[$p:l1] = 29                                  (: 'filter' :)
     or $state[$p:l1] = 30                                  (: 'for-each' :)
     or $state[$p:l1] = 31                                  (: 'hash' :)
     or $state[$p:l1] = 33                                  (: 'http-request' :)
     or $state[$p:l1] = 34                                  (: 'identity' :)
     or $state[$p:l1] = 35                                  (: 'if' :)
     or $state[$p:l1] = 36                                  (: 'insert' :)
     or $state[$p:l1] = 37                                  (: 'label-elements' :)
     or $state[$p:l1] = 39                                  (: 'library' :)
     or $state[$p:l1] = 40                                  (: 'load' :)
     or $state[$p:l1] = 41                                  (: 'make-absolute-uris' :)
     or $state[$p:l1] = 42                                  (: 'namespace' :)
     or $state[$p:l1] = 43                                  (: 'namespace-rename' :)
     or $state[$p:l1] = 44                                  (: 'pack' :)
     or $state[$p:l1] = 45                                  (: 'parameters' :)
     or $state[$p:l1] = 46                                  (: 'pipeline' :)
     or $state[$p:l1] = 48                                  (: 'rename' :)
     or $state[$p:l1] = 50                                  (: 'replace' :)
     or $state[$p:l1] = 51                                  (: 'set-attributes' :)
     or $state[$p:l1] = 54                                  (: 'sink' :)
     or $state[$p:l1] = 55                                  (: 'split-sequence' :)
     or $state[$p:l1] = 56                                  (: 'step' :)
     or $state[$p:l1] = 57                                  (: 'store' :)
     or $state[$p:l1] = 58                                  (: 'string-replace' :)
     or $state[$p:l1] = 59                                  (: 'try' :)
     or $state[$p:l1] = 60                                  (: 'unescape-markup' :)
     or $state[$p:l1] = 61                                  (: 'unwrap' :)
     or $state[$p:l1] = 62                                  (: 'uuid' :)
     or $state[$p:l1] = 63                                  (: 'validate-with-relax-ng' :)
     or $state[$p:l1] = 64                                  (: 'validate-with-schematron' :)
     or $state[$p:l1] = 65                                  (: 'validate-with-xml-schema' :)
     or $state[$p:l1] = 66                                  (: 'variable' :)
     or $state[$p:l1] = 67                                  (: 'viewport' :)
     or $state[$p:l1] = 68                                  (: 'wrap' :)
     or $state[$p:l1] = 70                                  (: 'wrap-sequence' :)
     or $state[$p:l1] = 71                                  (: 'www-form-urldecode' :)
     or $state[$p:l1] = 72                                  (: 'www-form-urlencode' :)
     or $state[$p:l1] = 73                                  (: 'xinclude' :)
     or $state[$p:l1] = 74                                  (: 'xquery' :)
     or $state[$p:l1] = 75                                  (: 'xsl-formatter' :)
     or $state[$p:l1] = 76                                  (: 'xslt' :)
     or $state[$p:l1] = 77) then                            (: 'xslt' :)
      let $state := p:lookahead2W(42, $input, $state)       (: Whitespace | ')' | ',' | ':' | '=' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1413                                (: NCName^Token ':' :)
     or $state[$p:lk] = 1424                                (: 'add-attribute' ':' :)
     or $state[$p:lk] = 1425                                (: 'add-xml-base' ':' :)
     or $state[$p:lk] = 1427                                (: 'compare' ':' :)
     or $state[$p:lk] = 1428                                (: 'count' ':' :)
     or $state[$p:lk] = 1429                                (: 'default' ':' :)
     or $state[$p:lk] = 1430                                (: 'delete' ':' :)
     or $state[$p:lk] = 1431                                (: 'directory-list' ':' :)
     or $state[$p:lk] = 1433                                (: 'else' ':' :)
     or $state[$p:lk] = 1435                                (: 'error' ':' :)
     or $state[$p:lk] = 1436                                (: 'escape-markup' ':' :)
     or $state[$p:lk] = 1437                                (: 'exec' ':' :)
     or $state[$p:lk] = 1438                                (: 'filter' ':' :)
     or $state[$p:lk] = 1439                                (: 'for-each' ':' :)
     or $state[$p:lk] = 1441                                (: 'hash' ':' :)
     or $state[$p:lk] = 1442                                (: 'http-request' ':' :)
     or $state[$p:lk] = 1443                                (: 'identity' ':' :)
     or $state[$p:lk] = 1444                                (: 'if' ':' :)
     or $state[$p:lk] = 1445                                (: 'insert' ':' :)
     or $state[$p:lk] = 1447                                (: 'label-elements' ':' :)
     or $state[$p:lk] = 1448                                (: 'library' ':' :)
     or $state[$p:lk] = 1449                                (: 'load' ':' :)
     or $state[$p:lk] = 1450                                (: 'make-absolute-uris' ':' :)
     or $state[$p:lk] = 1451                                (: 'namespace' ':' :)
     or $state[$p:lk] = 1452                                (: 'namespace-rename' ':' :)
     or $state[$p:lk] = 1453                                (: 'pack' ':' :)
     or $state[$p:lk] = 1454                                (: 'parameters' ':' :)
     or $state[$p:lk] = 1456                                (: 'pipeline' ':' :)
     or $state[$p:lk] = 1458                                (: 'rename' ':' :)
     or $state[$p:lk] = 1459                                (: 'replace' ':' :)
     or $state[$p:lk] = 1462                                (: 'set-attributes' ':' :)
     or $state[$p:lk] = 1463                                (: 'sink' ':' :)
     or $state[$p:lk] = 1464                                (: 'split-sequence' ':' :)
     or $state[$p:lk] = 1465                                (: 'step' ':' :)
     or $state[$p:lk] = 1466                                (: 'store' ':' :)
     or $state[$p:lk] = 1467                                (: 'string-replace' ':' :)
     or $state[$p:lk] = 1468                                (: 'try' ':' :)
     or $state[$p:lk] = 1469                                (: 'unescape-markup' ':' :)
     or $state[$p:lk] = 1470                                (: 'unwrap' ':' :)
     or $state[$p:lk] = 1471                                (: 'uuid' ':' :)
     or $state[$p:lk] = 1472                                (: 'validate-with-relax-ng' ':' :)
     or $state[$p:lk] = 1473                                (: 'validate-with-schematron' ':' :)
     or $state[$p:lk] = 1474                                (: 'validate-with-xml-schema' ':' :)
     or $state[$p:lk] = 1475                                (: 'variable' ':' :)
     or $state[$p:lk] = 1476                                (: 'viewport' ':' :)
     or $state[$p:lk] = 1478                                (: 'wrap' ':' :)
     or $state[$p:lk] = 1479                                (: 'wrap-sequence' ':' :)
     or $state[$p:lk] = 1480                                (: 'www-form-urldecode' ':' :)
     or $state[$p:lk] = 1481                                (: 'www-form-urlencode' ':' :)
     or $state[$p:lk] = 1482                                (: 'xinclude' ':' :)
     or $state[$p:lk] = 1483                                (: 'xquery' ':' :)
     or $state[$p:lk] = 1484                                (: 'xsl-formatter' ':' :)
     or $state[$p:lk] = 1485) then                          (: 'xslt' ':' :)
      let $state := p:parse-CName($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-NCName($input, $state)
      return $state
  return p:reduce($state, "QName", $count)
};

(:~
 : Try parsing QName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-QName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(47, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 5                                   (: 'add-attribute' :)
     or $state[$p:l1] = 16                                  (: 'add-xml-base' :)
     or $state[$p:l1] = 17                                  (: 'compare' :)
     or $state[$p:l1] = 19                                  (: 'count' :)
     or $state[$p:l1] = 20                                  (: 'default' :)
     or $state[$p:l1] = 21                                  (: 'delete' :)
     or $state[$p:l1] = 22                                  (: 'directory-list' :)
     or $state[$p:l1] = 23                                  (: 'else' :)
     or $state[$p:l1] = 25                                  (: 'error' :)
     or $state[$p:l1] = 27                                  (: 'escape-markup' :)
     or $state[$p:l1] = 28                                  (: 'exec' :)
     or $state[$p:l1] = 29                                  (: 'filter' :)
     or $state[$p:l1] = 30                                  (: 'for-each' :)
     or $state[$p:l1] = 31                                  (: 'hash' :)
     or $state[$p:l1] = 33                                  (: 'http-request' :)
     or $state[$p:l1] = 34                                  (: 'identity' :)
     or $state[$p:l1] = 35                                  (: 'if' :)
     or $state[$p:l1] = 36                                  (: 'insert' :)
     or $state[$p:l1] = 37                                  (: 'label-elements' :)
     or $state[$p:l1] = 39                                  (: 'library' :)
     or $state[$p:l1] = 40                                  (: 'load' :)
     or $state[$p:l1] = 41                                  (: 'make-absolute-uris' :)
     or $state[$p:l1] = 42                                  (: 'namespace' :)
     or $state[$p:l1] = 43                                  (: 'namespace-rename' :)
     or $state[$p:l1] = 44                                  (: 'pack' :)
     or $state[$p:l1] = 45                                  (: 'parameters' :)
     or $state[$p:l1] = 46                                  (: 'pipeline' :)
     or $state[$p:l1] = 48                                  (: 'rename' :)
     or $state[$p:l1] = 50                                  (: 'replace' :)
     or $state[$p:l1] = 51                                  (: 'set-attributes' :)
     or $state[$p:l1] = 54                                  (: 'sink' :)
     or $state[$p:l1] = 55                                  (: 'split-sequence' :)
     or $state[$p:l1] = 56                                  (: 'step' :)
     or $state[$p:l1] = 57                                  (: 'store' :)
     or $state[$p:l1] = 58                                  (: 'string-replace' :)
     or $state[$p:l1] = 59                                  (: 'try' :)
     or $state[$p:l1] = 60                                  (: 'unescape-markup' :)
     or $state[$p:l1] = 61                                  (: 'unwrap' :)
     or $state[$p:l1] = 62                                  (: 'uuid' :)
     or $state[$p:l1] = 63                                  (: 'validate-with-relax-ng' :)
     or $state[$p:l1] = 64                                  (: 'validate-with-schematron' :)
     or $state[$p:l1] = 65                                  (: 'validate-with-xml-schema' :)
     or $state[$p:l1] = 66                                  (: 'variable' :)
     or $state[$p:l1] = 67                                  (: 'viewport' :)
     or $state[$p:l1] = 68                                  (: 'wrap' :)
     or $state[$p:l1] = 70                                  (: 'wrap-sequence' :)
     or $state[$p:l1] = 71                                  (: 'www-form-urldecode' :)
     or $state[$p:l1] = 72                                  (: 'www-form-urlencode' :)
     or $state[$p:l1] = 73                                  (: 'xinclude' :)
     or $state[$p:l1] = 74                                  (: 'xquery' :)
     or $state[$p:l1] = 75                                  (: 'xsl-formatter' :)
     or $state[$p:l1] = 76                                  (: 'xslt' :)
     or $state[$p:l1] = 77) then                            (: 'xslt' :)
      let $state := p:lookahead2W(42, $input, $state)       (: Whitespace | ')' | ',' | ':' | '=' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:lk] = 1413                                (: NCName^Token ':' :)
     or $state[$p:lk] = 1424                                (: 'add-attribute' ':' :)
     or $state[$p:lk] = 1425                                (: 'add-xml-base' ':' :)
     or $state[$p:lk] = 1427                                (: 'compare' ':' :)
     or $state[$p:lk] = 1428                                (: 'count' ':' :)
     or $state[$p:lk] = 1429                                (: 'default' ':' :)
     or $state[$p:lk] = 1430                                (: 'delete' ':' :)
     or $state[$p:lk] = 1431                                (: 'directory-list' ':' :)
     or $state[$p:lk] = 1433                                (: 'else' ':' :)
     or $state[$p:lk] = 1435                                (: 'error' ':' :)
     or $state[$p:lk] = 1436                                (: 'escape-markup' ':' :)
     or $state[$p:lk] = 1437                                (: 'exec' ':' :)
     or $state[$p:lk] = 1438                                (: 'filter' ':' :)
     or $state[$p:lk] = 1439                                (: 'for-each' ':' :)
     or $state[$p:lk] = 1441                                (: 'hash' ':' :)
     or $state[$p:lk] = 1442                                (: 'http-request' ':' :)
     or $state[$p:lk] = 1443                                (: 'identity' ':' :)
     or $state[$p:lk] = 1444                                (: 'if' ':' :)
     or $state[$p:lk] = 1445                                (: 'insert' ':' :)
     or $state[$p:lk] = 1447                                (: 'label-elements' ':' :)
     or $state[$p:lk] = 1448                                (: 'library' ':' :)
     or $state[$p:lk] = 1449                                (: 'load' ':' :)
     or $state[$p:lk] = 1450                                (: 'make-absolute-uris' ':' :)
     or $state[$p:lk] = 1451                                (: 'namespace' ':' :)
     or $state[$p:lk] = 1452                                (: 'namespace-rename' ':' :)
     or $state[$p:lk] = 1453                                (: 'pack' ':' :)
     or $state[$p:lk] = 1454                                (: 'parameters' ':' :)
     or $state[$p:lk] = 1456                                (: 'pipeline' ':' :)
     or $state[$p:lk] = 1458                                (: 'rename' ':' :)
     or $state[$p:lk] = 1459                                (: 'replace' ':' :)
     or $state[$p:lk] = 1462                                (: 'set-attributes' ':' :)
     or $state[$p:lk] = 1463                                (: 'sink' ':' :)
     or $state[$p:lk] = 1464                                (: 'split-sequence' ':' :)
     or $state[$p:lk] = 1465                                (: 'step' ':' :)
     or $state[$p:lk] = 1466                                (: 'store' ':' :)
     or $state[$p:lk] = 1467                                (: 'string-replace' ':' :)
     or $state[$p:lk] = 1468                                (: 'try' ':' :)
     or $state[$p:lk] = 1469                                (: 'unescape-markup' ':' :)
     or $state[$p:lk] = 1470                                (: 'unwrap' ':' :)
     or $state[$p:lk] = 1471                                (: 'uuid' ':' :)
     or $state[$p:lk] = 1472                                (: 'validate-with-relax-ng' ':' :)
     or $state[$p:lk] = 1473                                (: 'validate-with-schematron' ':' :)
     or $state[$p:lk] = 1474                                (: 'validate-with-xml-schema' ':' :)
     or $state[$p:lk] = 1475                                (: 'variable' ':' :)
     or $state[$p:lk] = 1476                                (: 'viewport' ':' :)
     or $state[$p:lk] = 1478                                (: 'wrap' ':' :)
     or $state[$p:lk] = 1479                                (: 'wrap-sequence' ':' :)
     or $state[$p:lk] = 1480                                (: 'www-form-urldecode' ':' :)
     or $state[$p:lk] = 1481                                (: 'www-form-urlencode' ':' :)
     or $state[$p:lk] = 1482                                (: 'xinclude' ':' :)
     or $state[$p:lk] = 1483                                (: 'xquery' ':' :)
     or $state[$p:lk] = 1484                                (: 'xsl-formatter' ':' :)
     or $state[$p:lk] = 1485) then                          (: 'xslt' ':' :)
      let $state := p:try-CName($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:try-NCName($input, $state)
      return $state
  return p:reduce($state, "QName", $count)
};

(:~
 : Parse declareStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-declareStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 57) then                            (: 'step' :)
      let $state := p:lookahead2W(57, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 5                              (: NCName^Token :)
          or $state[$p:lk] = 16                             (: 'add-attribute' :)
          or $state[$p:lk] = 17                             (: 'add-xml-base' :)
          or $state[$p:lk] = 19                             (: 'compare' :)
          or $state[$p:lk] = 20                             (: 'count' :)
          or $state[$p:lk] = 21                             (: 'default' :)
          or $state[$p:lk] = 22                             (: 'delete' :)
          or $state[$p:lk] = 23                             (: 'directory-list' :)
          or $state[$p:lk] = 25                             (: 'else' :)
          or $state[$p:lk] = 27                             (: 'error' :)
          or $state[$p:lk] = 28                             (: 'escape-markup' :)
          or $state[$p:lk] = 29                             (: 'exec' :)
          or $state[$p:lk] = 30                             (: 'filter' :)
          or $state[$p:lk] = 31                             (: 'for-each' :)
          or $state[$p:lk] = 33                             (: 'hash' :)
          or $state[$p:lk] = 34                             (: 'http-request' :)
          or $state[$p:lk] = 35                             (: 'identity' :)
          or $state[$p:lk] = 36                             (: 'if' :)
          or $state[$p:lk] = 37                             (: 'insert' :)
          or $state[$p:lk] = 39                             (: 'label-elements' :)
          or $state[$p:lk] = 40                             (: 'library' :)
          or $state[$p:lk] = 41                             (: 'load' :)
          or $state[$p:lk] = 42                             (: 'make-absolute-uris' :)
          or $state[$p:lk] = 43                             (: 'namespace' :)
          or $state[$p:lk] = 44                             (: 'namespace-rename' :)
          or $state[$p:lk] = 45                             (: 'pack' :)
          or $state[$p:lk] = 46                             (: 'parameters' :)
          or $state[$p:lk] = 48                             (: 'pipeline' :)
          or $state[$p:lk] = 50                             (: 'rename' :)
          or $state[$p:lk] = 51                             (: 'replace' :)
          or $state[$p:lk] = 54                             (: 'set-attributes' :)
          or $state[$p:lk] = 55                             (: 'sink' :)
          or $state[$p:lk] = 56                             (: 'split-sequence' :)
          or $state[$p:lk] = 58                             (: 'store' :)
          or $state[$p:lk] = 59                             (: 'string-replace' :)
          or $state[$p:lk] = 60                             (: 'try' :)
          or $state[$p:lk] = 61                             (: 'unescape-markup' :)
          or $state[$p:lk] = 62                             (: 'unwrap' :)
          or $state[$p:lk] = 63                             (: 'uuid' :)
          or $state[$p:lk] = 64                             (: 'validate-with-relax-ng' :)
          or $state[$p:lk] = 65                             (: 'validate-with-schematron' :)
          or $state[$p:lk] = 66                             (: 'validate-with-xml-schema' :)
          or $state[$p:lk] = 67                             (: 'variable' :)
          or $state[$p:lk] = 68                             (: 'viewport' :)
          or $state[$p:lk] = 70                             (: 'wrap' :)
          or $state[$p:lk] = 71                             (: 'wrap-sequence' :)
          or $state[$p:lk] = 72                             (: 'www-form-urldecode' :)
          or $state[$p:lk] = 73                             (: 'www-form-urlencode' :)
          or $state[$p:lk] = 74                             (: 'xinclude' :)
          or $state[$p:lk] = 75                             (: 'xquery' :)
          or $state[$p:lk] = 76                             (: 'xsl-formatter' :)
          or $state[$p:lk] = 77                             (: 'xslt' :)
          or $state[$p:lk] = 1465                           (: 'step' ':' :)
          or $state[$p:lk] = 1593) then                     (: 'step' '=' :)
      let $state := p:parse-QName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(17, $input, $state)           (: Whitespace | 'step' :)
  let $state := p:shift(57, $input, $state)                 (: 'step' :)
  let $state := p:lookahead1W(50, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 7                             (: '(' :)
         and $state[$p:l1] != 78) then                      (: '{' :)
      let $state := p:parse-CName($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(25, $input, $state)           (: Whitespace | '(' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:parse-inports($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:parse-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(23, $input, $state)           (: Whitespace | EOF | '=>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:parse-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "declareStep", $count)
};

(:~
 : Try parsing declareStep.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-declareStep($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 57) then                            (: 'step' :)
      let $state := p:lookahead2W(57, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 5                              (: NCName^Token :)
          or $state[$p:lk] = 16                             (: 'add-attribute' :)
          or $state[$p:lk] = 17                             (: 'add-xml-base' :)
          or $state[$p:lk] = 19                             (: 'compare' :)
          or $state[$p:lk] = 20                             (: 'count' :)
          or $state[$p:lk] = 21                             (: 'default' :)
          or $state[$p:lk] = 22                             (: 'delete' :)
          or $state[$p:lk] = 23                             (: 'directory-list' :)
          or $state[$p:lk] = 25                             (: 'else' :)
          or $state[$p:lk] = 27                             (: 'error' :)
          or $state[$p:lk] = 28                             (: 'escape-markup' :)
          or $state[$p:lk] = 29                             (: 'exec' :)
          or $state[$p:lk] = 30                             (: 'filter' :)
          or $state[$p:lk] = 31                             (: 'for-each' :)
          or $state[$p:lk] = 33                             (: 'hash' :)
          or $state[$p:lk] = 34                             (: 'http-request' :)
          or $state[$p:lk] = 35                             (: 'identity' :)
          or $state[$p:lk] = 36                             (: 'if' :)
          or $state[$p:lk] = 37                             (: 'insert' :)
          or $state[$p:lk] = 39                             (: 'label-elements' :)
          or $state[$p:lk] = 40                             (: 'library' :)
          or $state[$p:lk] = 41                             (: 'load' :)
          or $state[$p:lk] = 42                             (: 'make-absolute-uris' :)
          or $state[$p:lk] = 43                             (: 'namespace' :)
          or $state[$p:lk] = 44                             (: 'namespace-rename' :)
          or $state[$p:lk] = 45                             (: 'pack' :)
          or $state[$p:lk] = 46                             (: 'parameters' :)
          or $state[$p:lk] = 48                             (: 'pipeline' :)
          or $state[$p:lk] = 50                             (: 'rename' :)
          or $state[$p:lk] = 51                             (: 'replace' :)
          or $state[$p:lk] = 54                             (: 'set-attributes' :)
          or $state[$p:lk] = 55                             (: 'sink' :)
          or $state[$p:lk] = 56                             (: 'split-sequence' :)
          or $state[$p:lk] = 58                             (: 'store' :)
          or $state[$p:lk] = 59                             (: 'string-replace' :)
          or $state[$p:lk] = 60                             (: 'try' :)
          or $state[$p:lk] = 61                             (: 'unescape-markup' :)
          or $state[$p:lk] = 62                             (: 'unwrap' :)
          or $state[$p:lk] = 63                             (: 'uuid' :)
          or $state[$p:lk] = 64                             (: 'validate-with-relax-ng' :)
          or $state[$p:lk] = 65                             (: 'validate-with-schematron' :)
          or $state[$p:lk] = 66                             (: 'validate-with-xml-schema' :)
          or $state[$p:lk] = 67                             (: 'variable' :)
          or $state[$p:lk] = 68                             (: 'viewport' :)
          or $state[$p:lk] = 70                             (: 'wrap' :)
          or $state[$p:lk] = 71                             (: 'wrap-sequence' :)
          or $state[$p:lk] = 72                             (: 'www-form-urldecode' :)
          or $state[$p:lk] = 73                             (: 'www-form-urlencode' :)
          or $state[$p:lk] = 74                             (: 'xinclude' :)
          or $state[$p:lk] = 75                             (: 'xquery' :)
          or $state[$p:lk] = 76                             (: 'xsl-formatter' :)
          or $state[$p:lk] = 77                             (: 'xslt' :)
          or $state[$p:lk] = 1465                           (: 'step' ':' :)
          or $state[$p:lk] = 1593) then                     (: 'step' '=' :)
      let $state := p:try-QName($input, $state)
      let $state := p:lookahead1W(8, $input, $state)        (: Whitespace | '=' :)
      let $state := p:shift(12, $input, $state)             (: '=' :)
      return $state
    else
      $state
  let $state := p:lookahead1W(17, $input, $state)           (: Whitespace | 'step' :)
  let $state := p:shift(57, $input, $state)                 (: 'step' :)
  let $state := p:lookahead1W(50, $input, $state)           (: Whitespace | NCName^Token | '(' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 7                             (: '(' :)
         and $state[$p:l1] != 78) then                      (: '{' :)
      let $state := p:try-CName($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(25, $input, $state)           (: Whitespace | '(' | '{' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 7) then                        (: '(' :)
      let $state := p:try-inports($input, $state)
      return $state
    else
      $state
  let $state := p:lookahead1W(20, $input, $state)           (: Whitespace | '{' :)
  let $state := p:shift(78, $input, $state)                 (: '{' :)
  let $state := p:lookahead1W(4, $input, $state)            (: EPSILON | Whitespace :)
  let $state := p:try-subpipeline($input, $state)
  let $state := p:lookahead1W(21, $input, $state)           (: Whitespace | '}' :)
  let $state := p:shift(79, $input, $state)                 (: '}' :)
  let $state := p:lookahead1W(23, $input, $state)           (: Whitespace | EOF | '=>' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] = 13) then                       (: '=>' :)
      let $state := p:shift(13, $input, $state)             (: '=>' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:try-outports($input, $state)
      return $state
    else
      $state
  return p:reduce($state, "declareStep", $count)
};

(:~
 : Parse NCName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-NCName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(47, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 5) then                             (: NCName^Token :)
      let $state := p:shift(5, $input, $state)              (: NCName^Token :)
      return $state
    else if ($state[$p:l1] = 16) then                       (: 'add-attribute' :)
      let $state := p:shift(16, $input, $state)             (: 'add-attribute' :)
      return $state
    else if ($state[$p:l1] = 17) then                       (: 'add-xml-base' :)
      let $state := p:shift(17, $input, $state)             (: 'add-xml-base' :)
      return $state
    else if ($state[$p:l1] = 19) then                       (: 'compare' :)
      let $state := p:shift(19, $input, $state)             (: 'compare' :)
      return $state
    else if ($state[$p:l1] = 20) then                       (: 'count' :)
      let $state := p:shift(20, $input, $state)             (: 'count' :)
      return $state
    else if ($state[$p:l1] = 22) then                       (: 'delete' :)
      let $state := p:shift(22, $input, $state)             (: 'delete' :)
      return $state
    else if ($state[$p:l1] = 23) then                       (: 'directory-list' :)
      let $state := p:shift(23, $input, $state)             (: 'directory-list' :)
      return $state
    else if ($state[$p:l1] = 27) then                       (: 'error' :)
      let $state := p:shift(27, $input, $state)             (: 'error' :)
      return $state
    else if ($state[$p:l1] = 28) then                       (: 'escape-markup' :)
      let $state := p:shift(28, $input, $state)             (: 'escape-markup' :)
      return $state
    else if ($state[$p:l1] = 29) then                       (: 'exec' :)
      let $state := p:shift(29, $input, $state)             (: 'exec' :)
      return $state
    else if ($state[$p:l1] = 30) then                       (: 'filter' :)
      let $state := p:shift(30, $input, $state)             (: 'filter' :)
      return $state
    else if ($state[$p:l1] = 33) then                       (: 'hash' :)
      let $state := p:shift(33, $input, $state)             (: 'hash' :)
      return $state
    else if ($state[$p:l1] = 34) then                       (: 'http-request' :)
      let $state := p:shift(34, $input, $state)             (: 'http-request' :)
      return $state
    else if ($state[$p:l1] = 35) then                       (: 'identity' :)
      let $state := p:shift(35, $input, $state)             (: 'identity' :)
      return $state
    else if ($state[$p:l1] = 37) then                       (: 'insert' :)
      let $state := p:shift(37, $input, $state)             (: 'insert' :)
      return $state
    else if ($state[$p:l1] = 39) then                       (: 'label-elements' :)
      let $state := p:shift(39, $input, $state)             (: 'label-elements' :)
      return $state
    else if ($state[$p:l1] = 41) then                       (: 'load' :)
      let $state := p:shift(41, $input, $state)             (: 'load' :)
      return $state
    else if ($state[$p:l1] = 42) then                       (: 'make-absolute-uris' :)
      let $state := p:shift(42, $input, $state)             (: 'make-absolute-uris' :)
      return $state
    else if ($state[$p:l1] = 44) then                       (: 'namespace-rename' :)
      let $state := p:shift(44, $input, $state)             (: 'namespace-rename' :)
      return $state
    else if ($state[$p:l1] = 45) then                       (: 'pack' :)
      let $state := p:shift(45, $input, $state)             (: 'pack' :)
      return $state
    else if ($state[$p:l1] = 46) then                       (: 'parameters' :)
      let $state := p:shift(46, $input, $state)             (: 'parameters' :)
      return $state
    else if ($state[$p:l1] = 50) then                       (: 'rename' :)
      let $state := p:shift(50, $input, $state)             (: 'rename' :)
      return $state
    else if ($state[$p:l1] = 51) then                       (: 'replace' :)
      let $state := p:shift(51, $input, $state)             (: 'replace' :)
      return $state
    else if ($state[$p:l1] = 54) then                       (: 'set-attributes' :)
      let $state := p:shift(54, $input, $state)             (: 'set-attributes' :)
      return $state
    else if ($state[$p:l1] = 55) then                       (: 'sink' :)
      let $state := p:shift(55, $input, $state)             (: 'sink' :)
      return $state
    else if ($state[$p:l1] = 56) then                       (: 'split-sequence' :)
      let $state := p:shift(56, $input, $state)             (: 'split-sequence' :)
      return $state
    else if ($state[$p:l1] = 58) then                       (: 'store' :)
      let $state := p:shift(58, $input, $state)             (: 'store' :)
      return $state
    else if ($state[$p:l1] = 59) then                       (: 'string-replace' :)
      let $state := p:shift(59, $input, $state)             (: 'string-replace' :)
      return $state
    else if ($state[$p:l1] = 61) then                       (: 'unescape-markup' :)
      let $state := p:shift(61, $input, $state)             (: 'unescape-markup' :)
      return $state
    else if ($state[$p:l1] = 62) then                       (: 'unwrap' :)
      let $state := p:shift(62, $input, $state)             (: 'unwrap' :)
      return $state
    else if ($state[$p:l1] = 63) then                       (: 'uuid' :)
      let $state := p:shift(63, $input, $state)             (: 'uuid' :)
      return $state
    else if ($state[$p:l1] = 64) then                       (: 'validate-with-relax-ng' :)
      let $state := p:shift(64, $input, $state)             (: 'validate-with-relax-ng' :)
      return $state
    else if ($state[$p:l1] = 65) then                       (: 'validate-with-schematron' :)
      let $state := p:shift(65, $input, $state)             (: 'validate-with-schematron' :)
      return $state
    else if ($state[$p:l1] = 66) then                       (: 'validate-with-xml-schema' :)
      let $state := p:shift(66, $input, $state)             (: 'validate-with-xml-schema' :)
      return $state
    else if ($state[$p:l1] = 70) then                       (: 'wrap' :)
      let $state := p:shift(70, $input, $state)             (: 'wrap' :)
      return $state
    else if ($state[$p:l1] = 71) then                       (: 'wrap-sequence' :)
      let $state := p:shift(71, $input, $state)             (: 'wrap-sequence' :)
      return $state
    else if ($state[$p:l1] = 72) then                       (: 'www-form-urldecode' :)
      let $state := p:shift(72, $input, $state)             (: 'www-form-urldecode' :)
      return $state
    else if ($state[$p:l1] = 73) then                       (: 'www-form-urlencode' :)
      let $state := p:shift(73, $input, $state)             (: 'www-form-urlencode' :)
      return $state
    else if ($state[$p:l1] = 74) then                       (: 'xinclude' :)
      let $state := p:shift(74, $input, $state)             (: 'xinclude' :)
      return $state
    else if ($state[$p:l1] = 75) then                       (: 'xquery' :)
      let $state := p:shift(75, $input, $state)             (: 'xquery' :)
      return $state
    else if ($state[$p:l1] = 77) then                       (: 'xslt' :)
      let $state := p:shift(77, $input, $state)             (: 'xslt' :)
      return $state
    else if ($state[$p:l1] = 76) then                       (: 'xsl-formatter' :)
      let $state := p:shift(76, $input, $state)             (: 'xsl-formatter' :)
      return $state
    else if ($state[$p:l1] = 36) then                       (: 'if' :)
      let $state := p:shift(36, $input, $state)             (: 'if' :)
      return $state
    else if ($state[$p:l1] = 31) then                       (: 'for-each' :)
      let $state := p:shift(31, $input, $state)             (: 'for-each' :)
      return $state
    else if ($state[$p:l1] = 60) then                       (: 'try' :)
      let $state := p:shift(60, $input, $state)             (: 'try' :)
      return $state
    else if ($state[$p:l1] = 68) then                       (: 'viewport' :)
      let $state := p:shift(68, $input, $state)             (: 'viewport' :)
      return $state
    else if ($state[$p:l1] = 21) then                       (: 'default' :)
      let $state := p:shift(21, $input, $state)             (: 'default' :)
      return $state
    else if ($state[$p:l1] = 40) then                       (: 'library' :)
      let $state := p:shift(40, $input, $state)             (: 'library' :)
      return $state
    else if ($state[$p:l1] = 43) then                       (: 'namespace' :)
      let $state := p:shift(43, $input, $state)             (: 'namespace' :)
      return $state
    else if ($state[$p:l1] = 48) then                       (: 'pipeline' :)
      let $state := p:shift(48, $input, $state)             (: 'pipeline' :)
      return $state
    else if ($state[$p:l1] = 57) then                       (: 'step' :)
      let $state := p:shift(57, $input, $state)             (: 'step' :)
      return $state
    else if ($state[$p:l1] = 67) then                       (: 'variable' :)
      let $state := p:shift(67, $input, $state)             (: 'variable' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(25, $input, $state)             (: 'else' :)
      return $state
  return p:reduce($state, "NCName", $count)
};

(:~
 : Try parsing NCName.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-NCName($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(47, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state :=
    if ($state[$p:l1] = 5) then                             (: NCName^Token :)
      let $state := p:shift(5, $input, $state)              (: NCName^Token :)
      return $state
    else if ($state[$p:l1] = 16) then                       (: 'add-attribute' :)
      let $state := p:shift(16, $input, $state)             (: 'add-attribute' :)
      return $state
    else if ($state[$p:l1] = 17) then                       (: 'add-xml-base' :)
      let $state := p:shift(17, $input, $state)             (: 'add-xml-base' :)
      return $state
    else if ($state[$p:l1] = 19) then                       (: 'compare' :)
      let $state := p:shift(19, $input, $state)             (: 'compare' :)
      return $state
    else if ($state[$p:l1] = 20) then                       (: 'count' :)
      let $state := p:shift(20, $input, $state)             (: 'count' :)
      return $state
    else if ($state[$p:l1] = 22) then                       (: 'delete' :)
      let $state := p:shift(22, $input, $state)             (: 'delete' :)
      return $state
    else if ($state[$p:l1] = 23) then                       (: 'directory-list' :)
      let $state := p:shift(23, $input, $state)             (: 'directory-list' :)
      return $state
    else if ($state[$p:l1] = 27) then                       (: 'error' :)
      let $state := p:shift(27, $input, $state)             (: 'error' :)
      return $state
    else if ($state[$p:l1] = 28) then                       (: 'escape-markup' :)
      let $state := p:shift(28, $input, $state)             (: 'escape-markup' :)
      return $state
    else if ($state[$p:l1] = 29) then                       (: 'exec' :)
      let $state := p:shift(29, $input, $state)             (: 'exec' :)
      return $state
    else if ($state[$p:l1] = 30) then                       (: 'filter' :)
      let $state := p:shift(30, $input, $state)             (: 'filter' :)
      return $state
    else if ($state[$p:l1] = 33) then                       (: 'hash' :)
      let $state := p:shift(33, $input, $state)             (: 'hash' :)
      return $state
    else if ($state[$p:l1] = 34) then                       (: 'http-request' :)
      let $state := p:shift(34, $input, $state)             (: 'http-request' :)
      return $state
    else if ($state[$p:l1] = 35) then                       (: 'identity' :)
      let $state := p:shift(35, $input, $state)             (: 'identity' :)
      return $state
    else if ($state[$p:l1] = 37) then                       (: 'insert' :)
      let $state := p:shift(37, $input, $state)             (: 'insert' :)
      return $state
    else if ($state[$p:l1] = 39) then                       (: 'label-elements' :)
      let $state := p:shift(39, $input, $state)             (: 'label-elements' :)
      return $state
    else if ($state[$p:l1] = 41) then                       (: 'load' :)
      let $state := p:shift(41, $input, $state)             (: 'load' :)
      return $state
    else if ($state[$p:l1] = 42) then                       (: 'make-absolute-uris' :)
      let $state := p:shift(42, $input, $state)             (: 'make-absolute-uris' :)
      return $state
    else if ($state[$p:l1] = 44) then                       (: 'namespace-rename' :)
      let $state := p:shift(44, $input, $state)             (: 'namespace-rename' :)
      return $state
    else if ($state[$p:l1] = 45) then                       (: 'pack' :)
      let $state := p:shift(45, $input, $state)             (: 'pack' :)
      return $state
    else if ($state[$p:l1] = 46) then                       (: 'parameters' :)
      let $state := p:shift(46, $input, $state)             (: 'parameters' :)
      return $state
    else if ($state[$p:l1] = 50) then                       (: 'rename' :)
      let $state := p:shift(50, $input, $state)             (: 'rename' :)
      return $state
    else if ($state[$p:l1] = 51) then                       (: 'replace' :)
      let $state := p:shift(51, $input, $state)             (: 'replace' :)
      return $state
    else if ($state[$p:l1] = 54) then                       (: 'set-attributes' :)
      let $state := p:shift(54, $input, $state)             (: 'set-attributes' :)
      return $state
    else if ($state[$p:l1] = 55) then                       (: 'sink' :)
      let $state := p:shift(55, $input, $state)             (: 'sink' :)
      return $state
    else if ($state[$p:l1] = 56) then                       (: 'split-sequence' :)
      let $state := p:shift(56, $input, $state)             (: 'split-sequence' :)
      return $state
    else if ($state[$p:l1] = 58) then                       (: 'store' :)
      let $state := p:shift(58, $input, $state)             (: 'store' :)
      return $state
    else if ($state[$p:l1] = 59) then                       (: 'string-replace' :)
      let $state := p:shift(59, $input, $state)             (: 'string-replace' :)
      return $state
    else if ($state[$p:l1] = 61) then                       (: 'unescape-markup' :)
      let $state := p:shift(61, $input, $state)             (: 'unescape-markup' :)
      return $state
    else if ($state[$p:l1] = 62) then                       (: 'unwrap' :)
      let $state := p:shift(62, $input, $state)             (: 'unwrap' :)
      return $state
    else if ($state[$p:l1] = 63) then                       (: 'uuid' :)
      let $state := p:shift(63, $input, $state)             (: 'uuid' :)
      return $state
    else if ($state[$p:l1] = 64) then                       (: 'validate-with-relax-ng' :)
      let $state := p:shift(64, $input, $state)             (: 'validate-with-relax-ng' :)
      return $state
    else if ($state[$p:l1] = 65) then                       (: 'validate-with-schematron' :)
      let $state := p:shift(65, $input, $state)             (: 'validate-with-schematron' :)
      return $state
    else if ($state[$p:l1] = 66) then                       (: 'validate-with-xml-schema' :)
      let $state := p:shift(66, $input, $state)             (: 'validate-with-xml-schema' :)
      return $state
    else if ($state[$p:l1] = 70) then                       (: 'wrap' :)
      let $state := p:shift(70, $input, $state)             (: 'wrap' :)
      return $state
    else if ($state[$p:l1] = 71) then                       (: 'wrap-sequence' :)
      let $state := p:shift(71, $input, $state)             (: 'wrap-sequence' :)
      return $state
    else if ($state[$p:l1] = 72) then                       (: 'www-form-urldecode' :)
      let $state := p:shift(72, $input, $state)             (: 'www-form-urldecode' :)
      return $state
    else if ($state[$p:l1] = 73) then                       (: 'www-form-urlencode' :)
      let $state := p:shift(73, $input, $state)             (: 'www-form-urlencode' :)
      return $state
    else if ($state[$p:l1] = 74) then                       (: 'xinclude' :)
      let $state := p:shift(74, $input, $state)             (: 'xinclude' :)
      return $state
    else if ($state[$p:l1] = 75) then                       (: 'xquery' :)
      let $state := p:shift(75, $input, $state)             (: 'xquery' :)
      return $state
    else if ($state[$p:l1] = 77) then                       (: 'xslt' :)
      let $state := p:shift(77, $input, $state)             (: 'xslt' :)
      return $state
    else if ($state[$p:l1] = 76) then                       (: 'xsl-formatter' :)
      let $state := p:shift(76, $input, $state)             (: 'xsl-formatter' :)
      return $state
    else if ($state[$p:l1] = 36) then                       (: 'if' :)
      let $state := p:shift(36, $input, $state)             (: 'if' :)
      return $state
    else if ($state[$p:l1] = 31) then                       (: 'for-each' :)
      let $state := p:shift(31, $input, $state)             (: 'for-each' :)
      return $state
    else if ($state[$p:l1] = 60) then                       (: 'try' :)
      let $state := p:shift(60, $input, $state)             (: 'try' :)
      return $state
    else if ($state[$p:l1] = 68) then                       (: 'viewport' :)
      let $state := p:shift(68, $input, $state)             (: 'viewport' :)
      return $state
    else if ($state[$p:l1] = 21) then                       (: 'default' :)
      let $state := p:shift(21, $input, $state)             (: 'default' :)
      return $state
    else if ($state[$p:l1] = 40) then                       (: 'library' :)
      let $state := p:shift(40, $input, $state)             (: 'library' :)
      return $state
    else if ($state[$p:l1] = 43) then                       (: 'namespace' :)
      let $state := p:shift(43, $input, $state)             (: 'namespace' :)
      return $state
    else if ($state[$p:l1] = 48) then                       (: 'pipeline' :)
      let $state := p:shift(48, $input, $state)             (: 'pipeline' :)
      return $state
    else if ($state[$p:l1] = 57) then                       (: 'step' :)
      let $state := p:shift(57, $input, $state)             (: 'step' :)
      return $state
    else if ($state[$p:l1] = 67) then                       (: 'variable' :)
      let $state := p:shift(67, $input, $state)             (: 'variable' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(25, $input, $state)             (: 'else' :)
      return $state
  return p:reduce($state, "NCName", $count)
};

(:~
 : Parse prefix.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-prefix($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:lookahead1(47, $input, $state)            (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
  let $state := p:parse-NCName($input, $state)
  let $state := p:lookahead1(2, $input, $state)             (: ':' :)
  let $state := p:shift(11, $input, $state)                 (: ':' :)
  return p:reduce($state, "prefix", $count)
};

(:~
 : Parse namespace.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-namespace($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state :=
    if ($state[$p:l1] = 43) then                            (: 'namespace' :)
      let $state := p:shift(43, $input, $state)             (: 'namespace' :)
      let $state := p:lookahead1W(4, $input, $state)        (: EPSILON | Whitespace :)
      let $state := p:parse-prefix($input, $state)
      let $state := p:lookahead1W(6, $input, $state)        (: Whitespace | quotedstr :)
      let $state := p:shift(4, $input, $state)              (: quotedstr :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(21, $input, $state)             (: 'default' :)
      let $state := p:lookahead1W(14, $input, $state)       (: Whitespace | 'namespace' :)
      let $state := p:shift(43, $input, $state)             (: 'namespace' :)
      let $state := p:lookahead1W(6, $input, $state)        (: Whitespace | quotedstr :)
      let $state := p:shift(4, $input, $state)              (: quotedstr :)
      return $state
  return p:reduce($state, "namespace", $count)
};

(:~
 : Parse the 1st loop of production document (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-document-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(48, $input, $state)         (: Whitespace | NCName^Token | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
    let $state :=
      if ($state[$p:l1] = 21) then                          (: 'default' :)
        let $state := p:lookahead2W(38, $input, $state)     (: Whitespace | ':' | '=' | 'namespace' :)
        return $state
      else if ($state[$p:l1] = 43) then                     (: 'namespace' :)
        let $state := p:lookahead2W(53, $input, $state)     (: Whitespace | NCName^Token | ':' | '=' | 'add-attribute' |
                                                               'add-xml-base' | 'compare' | 'count' | 'default' |
                                                               'delete' | 'directory-list' | 'else' | 'error' |
                                                               'escape-markup' | 'exec' | 'filter' | 'for-each' |
                                                               'hash' | 'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 683                              (: 'namespace' NCName^Token :)
      and $state[$p:lk] != 2091                             (: 'namespace' 'add-attribute' :)
      and $state[$p:lk] != 2219                             (: 'namespace' 'add-xml-base' :)
      and $state[$p:lk] != 2475                             (: 'namespace' 'compare' :)
      and $state[$p:lk] != 2603                             (: 'namespace' 'count' :)
      and $state[$p:lk] != 2731                             (: 'namespace' 'default' :)
      and $state[$p:lk] != 2859                             (: 'namespace' 'delete' :)
      and $state[$p:lk] != 2987                             (: 'namespace' 'directory-list' :)
      and $state[$p:lk] != 3243                             (: 'namespace' 'else' :)
      and $state[$p:lk] != 3499                             (: 'namespace' 'error' :)
      and $state[$p:lk] != 3627                             (: 'namespace' 'escape-markup' :)
      and $state[$p:lk] != 3755                             (: 'namespace' 'exec' :)
      and $state[$p:lk] != 3883                             (: 'namespace' 'filter' :)
      and $state[$p:lk] != 4011                             (: 'namespace' 'for-each' :)
      and $state[$p:lk] != 4267                             (: 'namespace' 'hash' :)
      and $state[$p:lk] != 4395                             (: 'namespace' 'http-request' :)
      and $state[$p:lk] != 4523                             (: 'namespace' 'identity' :)
      and $state[$p:lk] != 4651                             (: 'namespace' 'if' :)
      and $state[$p:lk] != 4779                             (: 'namespace' 'insert' :)
      and $state[$p:lk] != 5035                             (: 'namespace' 'label-elements' :)
      and $state[$p:lk] != 5163                             (: 'namespace' 'library' :)
      and $state[$p:lk] != 5291                             (: 'namespace' 'load' :)
      and $state[$p:lk] != 5419                             (: 'namespace' 'make-absolute-uris' :)
      and $state[$p:lk] != 5525                             (: 'default' 'namespace' :)
      and $state[$p:lk] != 5547                             (: 'namespace' 'namespace' :)
      and $state[$p:lk] != 5675                             (: 'namespace' 'namespace-rename' :)
      and $state[$p:lk] != 5803                             (: 'namespace' 'pack' :)
      and $state[$p:lk] != 5931                             (: 'namespace' 'parameters' :)
      and $state[$p:lk] != 6187                             (: 'namespace' 'pipeline' :)
      and $state[$p:lk] != 6443                             (: 'namespace' 'rename' :)
      and $state[$p:lk] != 6571                             (: 'namespace' 'replace' :)
      and $state[$p:lk] != 6955                             (: 'namespace' 'set-attributes' :)
      and $state[$p:lk] != 7083                             (: 'namespace' 'sink' :)
      and $state[$p:lk] != 7211                             (: 'namespace' 'split-sequence' :)
      and $state[$p:lk] != 7339                             (: 'namespace' 'step' :)
      and $state[$p:lk] != 7467                             (: 'namespace' 'store' :)
      and $state[$p:lk] != 7595                             (: 'namespace' 'string-replace' :)
      and $state[$p:lk] != 7723                             (: 'namespace' 'try' :)
      and $state[$p:lk] != 7851                             (: 'namespace' 'unescape-markup' :)
      and $state[$p:lk] != 7979                             (: 'namespace' 'unwrap' :)
      and $state[$p:lk] != 8107                             (: 'namespace' 'uuid' :)
      and $state[$p:lk] != 8235                             (: 'namespace' 'validate-with-relax-ng' :)
      and $state[$p:lk] != 8363                             (: 'namespace' 'validate-with-schematron' :)
      and $state[$p:lk] != 8491                             (: 'namespace' 'validate-with-xml-schema' :)
      and $state[$p:lk] != 8619                             (: 'namespace' 'variable' :)
      and $state[$p:lk] != 8747                             (: 'namespace' 'viewport' :)
      and $state[$p:lk] != 9003                             (: 'namespace' 'wrap' :)
      and $state[$p:lk] != 9131                             (: 'namespace' 'wrap-sequence' :)
      and $state[$p:lk] != 9259                             (: 'namespace' 'www-form-urldecode' :)
      and $state[$p:lk] != 9387                             (: 'namespace' 'www-form-urlencode' :)
      and $state[$p:lk] != 9515                             (: 'namespace' 'xinclude' :)
      and $state[$p:lk] != 9643                             (: 'namespace' 'xquery' :)
      and $state[$p:lk] != 9771                             (: 'namespace' 'xsl-formatter' :)
      and $state[$p:lk] != 9899) then                       (: 'namespace' 'xslt' :)
        $state
      else
        let $state := p:parse-namespace($input, $state)
        return p:parse-document-1($input, $state)
};

(:~
 : Parse document.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-document($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $state := p:parse-document-1($input, $state)
  let $state :=
    if ($state[$p:l1] = 40) then                            (: 'library' :)
      let $state := p:lookahead2W(32, $input, $state)       (: Whitespace | EOF | ':' | '=' :)
      let $state :=
        if ($state[$p:lk] = 1448) then                      (: 'library' ':' :)
          let $state := p:lookahead3(47, $input, $state)    (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
          return $state
        else if ($state[$p:lk] = 1576) then                 (: 'library' '=' :)
          let $state := p:lookahead3W(30, $input, $state)   (: Whitespace | 'pipeline' | 'step' :)
          return $state
        else
          $state
      return $state
    else if ($state[$p:l1] = 48                             (: 'step' :)
          or $state[$p:l1] = 57) then                       (: 'step' :)
      let $state := p:lookahead2W(57, $input, $state)       (: Whitespace | NCName^Token | '(' | ':' | '=' |
                                                               'add-attribute' | 'add-xml-base' | 'compare' | 'count' |
                                                               'default' | 'delete' | 'directory-list' | 'else' |
                                                               'error' | 'escape-markup' | 'exec' | 'filter' |
                                                               'for-each' | 'hash' | 'http-request' | 'identity' |
                                                               'if' | 'insert' | 'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' | '{' :)
      let $state :=
        if ($state[$p:lk] = 1456                            (: 'step' ':' :)
         or $state[$p:lk] = 1465) then                      (: 'step' ':' :)
          let $state := p:lookahead3(47, $input, $state)    (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
          return $state
        else if ($state[$p:lk] = 1584                       (: 'step' '=' :)
              or $state[$p:lk] = 1593) then                 (: 'step' '=' :)
          let $state := p:lookahead3W(30, $input, $state)   (: Whitespace | 'pipeline' | 'step' :)
          return $state
        else
          $state
      return $state
    else if ($state[$p:l1] = 5                              (: 'add-attribute' :)
          or $state[$p:l1] = 16                             (: 'add-xml-base' :)
          or $state[$p:l1] = 17                             (: 'compare' :)
          or $state[$p:l1] = 19                             (: 'count' :)
          or $state[$p:l1] = 20                             (: 'default' :)
          or $state[$p:l1] = 21                             (: 'delete' :)
          or $state[$p:l1] = 22                             (: 'directory-list' :)
          or $state[$p:l1] = 23                             (: 'else' :)
          or $state[$p:l1] = 25                             (: 'error' :)
          or $state[$p:l1] = 27                             (: 'escape-markup' :)
          or $state[$p:l1] = 28                             (: 'exec' :)
          or $state[$p:l1] = 29                             (: 'filter' :)
          or $state[$p:l1] = 30                             (: 'for-each' :)
          or $state[$p:l1] = 31                             (: 'hash' :)
          or $state[$p:l1] = 33                             (: 'http-request' :)
          or $state[$p:l1] = 34                             (: 'identity' :)
          or $state[$p:l1] = 35                             (: 'if' :)
          or $state[$p:l1] = 36                             (: 'insert' :)
          or $state[$p:l1] = 37                             (: 'label-elements' :)
          or $state[$p:l1] = 39                             (: 'load' :)
          or $state[$p:l1] = 41                             (: 'make-absolute-uris' :)
          or $state[$p:l1] = 42                             (: 'namespace' :)
          or $state[$p:l1] = 43                             (: 'namespace-rename' :)
          or $state[$p:l1] = 44                             (: 'pack' :)
          or $state[$p:l1] = 45                             (: 'parameters' :)
          or $state[$p:l1] = 46                             (: 'rename' :)
          or $state[$p:l1] = 50                             (: 'replace' :)
          or $state[$p:l1] = 51                             (: 'set-attributes' :)
          or $state[$p:l1] = 54                             (: 'sink' :)
          or $state[$p:l1] = 55                             (: 'split-sequence' :)
          or $state[$p:l1] = 56                             (: 'store' :)
          or $state[$p:l1] = 58                             (: 'string-replace' :)
          or $state[$p:l1] = 59                             (: 'try' :)
          or $state[$p:l1] = 60                             (: 'unescape-markup' :)
          or $state[$p:l1] = 61                             (: 'unwrap' :)
          or $state[$p:l1] = 62                             (: 'uuid' :)
          or $state[$p:l1] = 63                             (: 'validate-with-relax-ng' :)
          or $state[$p:l1] = 64                             (: 'validate-with-schematron' :)
          or $state[$p:l1] = 65                             (: 'validate-with-xml-schema' :)
          or $state[$p:l1] = 66                             (: 'variable' :)
          or $state[$p:l1] = 67                             (: 'viewport' :)
          or $state[$p:l1] = 68                             (: 'wrap' :)
          or $state[$p:l1] = 70                             (: 'wrap-sequence' :)
          or $state[$p:l1] = 71                             (: 'www-form-urldecode' :)
          or $state[$p:l1] = 72                             (: 'www-form-urlencode' :)
          or $state[$p:l1] = 73                             (: 'xinclude' :)
          or $state[$p:l1] = 74                             (: 'xquery' :)
          or $state[$p:l1] = 75                             (: 'xsl-formatter' :)
          or $state[$p:l1] = 76                             (: 'xslt' :)
          or $state[$p:l1] = 77) then                       (: 'xslt' :)
      let $state := p:lookahead2W(28, $input, $state)       (: Whitespace | ':' | '=' :)
      let $state :=
        if ($state[$p:lk] = 1413                            (: 'add-attribute' ':' :)
         or $state[$p:lk] = 1424                            (: 'add-xml-base' ':' :)
         or $state[$p:lk] = 1425                            (: 'compare' ':' :)
         or $state[$p:lk] = 1427                            (: 'count' ':' :)
         or $state[$p:lk] = 1428                            (: 'default' ':' :)
         or $state[$p:lk] = 1429                            (: 'delete' ':' :)
         or $state[$p:lk] = 1430                            (: 'directory-list' ':' :)
         or $state[$p:lk] = 1431                            (: 'else' ':' :)
         or $state[$p:lk] = 1433                            (: 'error' ':' :)
         or $state[$p:lk] = 1435                            (: 'escape-markup' ':' :)
         or $state[$p:lk] = 1436                            (: 'exec' ':' :)
         or $state[$p:lk] = 1437                            (: 'filter' ':' :)
         or $state[$p:lk] = 1438                            (: 'for-each' ':' :)
         or $state[$p:lk] = 1439                            (: 'hash' ':' :)
         or $state[$p:lk] = 1441                            (: 'http-request' ':' :)
         or $state[$p:lk] = 1442                            (: 'identity' ':' :)
         or $state[$p:lk] = 1443                            (: 'if' ':' :)
         or $state[$p:lk] = 1444                            (: 'insert' ':' :)
         or $state[$p:lk] = 1445                            (: 'label-elements' ':' :)
         or $state[$p:lk] = 1447                            (: 'load' ':' :)
         or $state[$p:lk] = 1449                            (: 'make-absolute-uris' ':' :)
         or $state[$p:lk] = 1450                            (: 'namespace' ':' :)
         or $state[$p:lk] = 1451                            (: 'namespace-rename' ':' :)
         or $state[$p:lk] = 1452                            (: 'pack' ':' :)
         or $state[$p:lk] = 1453                            (: 'parameters' ':' :)
         or $state[$p:lk] = 1454                            (: 'rename' ':' :)
         or $state[$p:lk] = 1458                            (: 'replace' ':' :)
         or $state[$p:lk] = 1459                            (: 'set-attributes' ':' :)
         or $state[$p:lk] = 1462                            (: 'sink' ':' :)
         or $state[$p:lk] = 1463                            (: 'split-sequence' ':' :)
         or $state[$p:lk] = 1464                            (: 'store' ':' :)
         or $state[$p:lk] = 1466                            (: 'string-replace' ':' :)
         or $state[$p:lk] = 1467                            (: 'try' ':' :)
         or $state[$p:lk] = 1468                            (: 'unescape-markup' ':' :)
         or $state[$p:lk] = 1469                            (: 'unwrap' ':' :)
         or $state[$p:lk] = 1470                            (: 'uuid' ':' :)
         or $state[$p:lk] = 1471                            (: 'validate-with-relax-ng' ':' :)
         or $state[$p:lk] = 1472                            (: 'validate-with-schematron' ':' :)
         or $state[$p:lk] = 1473                            (: 'validate-with-xml-schema' ':' :)
         or $state[$p:lk] = 1474                            (: 'variable' ':' :)
         or $state[$p:lk] = 1475                            (: 'viewport' ':' :)
         or $state[$p:lk] = 1476                            (: 'wrap' ':' :)
         or $state[$p:lk] = 1478                            (: 'wrap-sequence' ':' :)
         or $state[$p:lk] = 1479                            (: 'www-form-urldecode' ':' :)
         or $state[$p:lk] = 1480                            (: 'www-form-urlencode' ':' :)
         or $state[$p:lk] = 1481                            (: 'xinclude' ':' :)
         or $state[$p:lk] = 1482                            (: 'xquery' ':' :)
         or $state[$p:lk] = 1483                            (: 'xsl-formatter' ':' :)
         or $state[$p:lk] = 1484                            (: 'xslt' ':' :)
         or $state[$p:lk] = 1485) then                      (: 'xslt' ':' :)
          let $state := p:lookahead3(47, $input, $state)    (: NCName^Token | 'add-attribute' | 'add-xml-base' |
                                                               'compare' | 'count' | 'default' | 'delete' |
                                                               'directory-list' | 'else' | 'error' | 'escape-markup' |
                                                               'exec' | 'filter' | 'for-each' | 'hash' |
                                                               'http-request' | 'identity' | 'if' | 'insert' |
                                                               'label-elements' | 'library' | 'load' |
                                                               'make-absolute-uris' | 'namespace' | 'namespace-rename' |
                                                               'pack' | 'parameters' | 'pipeline' | 'rename' |
                                                               'replace' | 'set-attributes' | 'sink' |
                                                               'split-sequence' | 'step' | 'store' | 'string-replace' |
                                                               'try' | 'unescape-markup' | 'unwrap' | 'uuid' |
                                                               'validate-with-relax-ng' | 'validate-with-schematron' |
                                                               'validate-with-xml-schema' | 'variable' | 'viewport' |
                                                               'wrap' | 'wrap-sequence' | 'www-form-urldecode' |
                                                               'www-form-urlencode' | 'xinclude' | 'xquery' |
                                                               'xsl-formatter' | 'xslt' :)
          return $state
        else if ($state[$p:lk] = 1541                       (: 'add-attribute' '=' :)
              or $state[$p:lk] = 1552                       (: 'add-xml-base' '=' :)
              or $state[$p:lk] = 1553                       (: 'compare' '=' :)
              or $state[$p:lk] = 1555                       (: 'count' '=' :)
              or $state[$p:lk] = 1556                       (: 'default' '=' :)
              or $state[$p:lk] = 1557                       (: 'delete' '=' :)
              or $state[$p:lk] = 1558                       (: 'directory-list' '=' :)
              or $state[$p:lk] = 1559                       (: 'else' '=' :)
              or $state[$p:lk] = 1561                       (: 'error' '=' :)
              or $state[$p:lk] = 1563                       (: 'escape-markup' '=' :)
              or $state[$p:lk] = 1564                       (: 'exec' '=' :)
              or $state[$p:lk] = 1565                       (: 'filter' '=' :)
              or $state[$p:lk] = 1566                       (: 'for-each' '=' :)
              or $state[$p:lk] = 1567                       (: 'hash' '=' :)
              or $state[$p:lk] = 1569                       (: 'http-request' '=' :)
              or $state[$p:lk] = 1570                       (: 'identity' '=' :)
              or $state[$p:lk] = 1571                       (: 'if' '=' :)
              or $state[$p:lk] = 1572                       (: 'insert' '=' :)
              or $state[$p:lk] = 1573                       (: 'label-elements' '=' :)
              or $state[$p:lk] = 1575                       (: 'load' '=' :)
              or $state[$p:lk] = 1577                       (: 'make-absolute-uris' '=' :)
              or $state[$p:lk] = 1578                       (: 'namespace' '=' :)
              or $state[$p:lk] = 1579                       (: 'namespace-rename' '=' :)
              or $state[$p:lk] = 1580                       (: 'pack' '=' :)
              or $state[$p:lk] = 1581                       (: 'parameters' '=' :)
              or $state[$p:lk] = 1582                       (: 'rename' '=' :)
              or $state[$p:lk] = 1586                       (: 'replace' '=' :)
              or $state[$p:lk] = 1587                       (: 'set-attributes' '=' :)
              or $state[$p:lk] = 1590                       (: 'sink' '=' :)
              or $state[$p:lk] = 1591                       (: 'split-sequence' '=' :)
              or $state[$p:lk] = 1592                       (: 'store' '=' :)
              or $state[$p:lk] = 1594                       (: 'string-replace' '=' :)
              or $state[$p:lk] = 1595                       (: 'try' '=' :)
              or $state[$p:lk] = 1596                       (: 'unescape-markup' '=' :)
              or $state[$p:lk] = 1597                       (: 'unwrap' '=' :)
              or $state[$p:lk] = 1598                       (: 'uuid' '=' :)
              or $state[$p:lk] = 1599                       (: 'validate-with-relax-ng' '=' :)
              or $state[$p:lk] = 1600                       (: 'validate-with-schematron' '=' :)
              or $state[$p:lk] = 1601                       (: 'validate-with-xml-schema' '=' :)
              or $state[$p:lk] = 1602                       (: 'variable' '=' :)
              or $state[$p:lk] = 1603                       (: 'viewport' '=' :)
              or $state[$p:lk] = 1604                       (: 'wrap' '=' :)
              or $state[$p:lk] = 1606                       (: 'wrap-sequence' '=' :)
              or $state[$p:lk] = 1607                       (: 'www-form-urldecode' '=' :)
              or $state[$p:lk] = 1608                       (: 'www-form-urlencode' '=' :)
              or $state[$p:lk] = 1609                       (: 'xinclude' '=' :)
              or $state[$p:lk] = 1610                       (: 'xquery' '=' :)
              or $state[$p:lk] = 1611                       (: 'xsl-formatter' '=' :)
              or $state[$p:lk] = 1612                       (: 'xslt' '=' :)
              or $state[$p:lk] = 1613) then                 (: 'xslt' '=' :)
          let $state := p:lookahead3W(30, $input, $state)   (: Whitespace | 'pipeline' | 'step' :)
          return $state
        else
          $state
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] != 296                           (: 'library' EOF :)
         and $state[$p:lk] != 688                           (: 'pipeline' NCName^Token :)
         and $state[$p:lk] != 697                           (: 'step' NCName^Token :)
         and $state[$p:lk] != 944                           (: 'pipeline' '(' :)
         and $state[$p:lk] != 953                           (: 'step' '(' :)
         and $state[$p:lk] != 2096                          (: 'pipeline' 'add-attribute' :)
         and $state[$p:lk] != 2105                          (: 'step' 'add-attribute' :)
         and $state[$p:lk] != 2224                          (: 'pipeline' 'add-xml-base' :)
         and $state[$p:lk] != 2233                          (: 'step' 'add-xml-base' :)
         and $state[$p:lk] != 2480                          (: 'pipeline' 'compare' :)
         and $state[$p:lk] != 2489                          (: 'step' 'compare' :)
         and $state[$p:lk] != 2608                          (: 'pipeline' 'count' :)
         and $state[$p:lk] != 2617                          (: 'step' 'count' :)
         and $state[$p:lk] != 2736                          (: 'pipeline' 'default' :)
         and $state[$p:lk] != 2745                          (: 'step' 'default' :)
         and $state[$p:lk] != 2864                          (: 'pipeline' 'delete' :)
         and $state[$p:lk] != 2873                          (: 'step' 'delete' :)
         and $state[$p:lk] != 2992                          (: 'pipeline' 'directory-list' :)
         and $state[$p:lk] != 3001                          (: 'step' 'directory-list' :)
         and $state[$p:lk] != 3248                          (: 'pipeline' 'else' :)
         and $state[$p:lk] != 3257                          (: 'step' 'else' :)
         and $state[$p:lk] != 3504                          (: 'pipeline' 'error' :)
         and $state[$p:lk] != 3513                          (: 'step' 'error' :)
         and $state[$p:lk] != 3632                          (: 'pipeline' 'escape-markup' :)
         and $state[$p:lk] != 3641                          (: 'step' 'escape-markup' :)
         and $state[$p:lk] != 3760                          (: 'pipeline' 'exec' :)
         and $state[$p:lk] != 3769                          (: 'step' 'exec' :)
         and $state[$p:lk] != 3888                          (: 'pipeline' 'filter' :)
         and $state[$p:lk] != 3897                          (: 'step' 'filter' :)
         and $state[$p:lk] != 4016                          (: 'pipeline' 'for-each' :)
         and $state[$p:lk] != 4025                          (: 'step' 'for-each' :)
         and $state[$p:lk] != 4272                          (: 'pipeline' 'hash' :)
         and $state[$p:lk] != 4281                          (: 'step' 'hash' :)
         and $state[$p:lk] != 4400                          (: 'pipeline' 'http-request' :)
         and $state[$p:lk] != 4409                          (: 'step' 'http-request' :)
         and $state[$p:lk] != 4528                          (: 'pipeline' 'identity' :)
         and $state[$p:lk] != 4537                          (: 'step' 'identity' :)
         and $state[$p:lk] != 4656                          (: 'pipeline' 'if' :)
         and $state[$p:lk] != 4665                          (: 'step' 'if' :)
         and $state[$p:lk] != 4784                          (: 'pipeline' 'insert' :)
         and $state[$p:lk] != 4793                          (: 'step' 'insert' :)
         and $state[$p:lk] != 5040                          (: 'pipeline' 'label-elements' :)
         and $state[$p:lk] != 5049                          (: 'step' 'label-elements' :)
         and $state[$p:lk] != 5168                          (: 'pipeline' 'library' :)
         and $state[$p:lk] != 5177                          (: 'step' 'library' :)
         and $state[$p:lk] != 5296                          (: 'pipeline' 'load' :)
         and $state[$p:lk] != 5305                          (: 'step' 'load' :)
         and $state[$p:lk] != 5424                          (: 'pipeline' 'make-absolute-uris' :)
         and $state[$p:lk] != 5433                          (: 'step' 'make-absolute-uris' :)
         and $state[$p:lk] != 5552                          (: 'pipeline' 'namespace' :)
         and $state[$p:lk] != 5561                          (: 'step' 'namespace' :)
         and $state[$p:lk] != 5680                          (: 'pipeline' 'namespace-rename' :)
         and $state[$p:lk] != 5689                          (: 'step' 'namespace-rename' :)
         and $state[$p:lk] != 5808                          (: 'pipeline' 'pack' :)
         and $state[$p:lk] != 5817                          (: 'step' 'pack' :)
         and $state[$p:lk] != 5936                          (: 'pipeline' 'parameters' :)
         and $state[$p:lk] != 5945                          (: 'step' 'parameters' :)
         and $state[$p:lk] != 6192                          (: 'pipeline' 'pipeline' :)
         and $state[$p:lk] != 6201                          (: 'step' 'pipeline' :)
         and $state[$p:lk] != 6448                          (: 'pipeline' 'rename' :)
         and $state[$p:lk] != 6457                          (: 'step' 'rename' :)
         and $state[$p:lk] != 6576                          (: 'pipeline' 'replace' :)
         and $state[$p:lk] != 6585                          (: 'step' 'replace' :)
         and $state[$p:lk] != 6960                          (: 'pipeline' 'set-attributes' :)
         and $state[$p:lk] != 6969                          (: 'step' 'set-attributes' :)
         and $state[$p:lk] != 7088                          (: 'pipeline' 'sink' :)
         and $state[$p:lk] != 7097                          (: 'step' 'sink' :)
         and $state[$p:lk] != 7216                          (: 'pipeline' 'split-sequence' :)
         and $state[$p:lk] != 7225                          (: 'step' 'split-sequence' :)
         and $state[$p:lk] != 7344                          (: 'pipeline' 'step' :)
         and $state[$p:lk] != 7353                          (: 'step' 'step' :)
         and $state[$p:lk] != 7472                          (: 'pipeline' 'store' :)
         and $state[$p:lk] != 7481                          (: 'step' 'store' :)
         and $state[$p:lk] != 7600                          (: 'pipeline' 'string-replace' :)
         and $state[$p:lk] != 7609                          (: 'step' 'string-replace' :)
         and $state[$p:lk] != 7728                          (: 'pipeline' 'try' :)
         and $state[$p:lk] != 7737                          (: 'step' 'try' :)
         and $state[$p:lk] != 7856                          (: 'pipeline' 'unescape-markup' :)
         and $state[$p:lk] != 7865                          (: 'step' 'unescape-markup' :)
         and $state[$p:lk] != 7984                          (: 'pipeline' 'unwrap' :)
         and $state[$p:lk] != 7993                          (: 'step' 'unwrap' :)
         and $state[$p:lk] != 8112                          (: 'pipeline' 'uuid' :)
         and $state[$p:lk] != 8121                          (: 'step' 'uuid' :)
         and $state[$p:lk] != 8240                          (: 'pipeline' 'validate-with-relax-ng' :)
         and $state[$p:lk] != 8249                          (: 'step' 'validate-with-relax-ng' :)
         and $state[$p:lk] != 8368                          (: 'pipeline' 'validate-with-schematron' :)
         and $state[$p:lk] != 8377                          (: 'step' 'validate-with-schematron' :)
         and $state[$p:lk] != 8496                          (: 'pipeline' 'validate-with-xml-schema' :)
         and $state[$p:lk] != 8505                          (: 'step' 'validate-with-xml-schema' :)
         and $state[$p:lk] != 8624                          (: 'pipeline' 'variable' :)
         and $state[$p:lk] != 8633                          (: 'step' 'variable' :)
         and $state[$p:lk] != 8752                          (: 'pipeline' 'viewport' :)
         and $state[$p:lk] != 8761                          (: 'step' 'viewport' :)
         and $state[$p:lk] != 9008                          (: 'pipeline' 'wrap' :)
         and $state[$p:lk] != 9017                          (: 'step' 'wrap' :)
         and $state[$p:lk] != 9136                          (: 'pipeline' 'wrap-sequence' :)
         and $state[$p:lk] != 9145                          (: 'step' 'wrap-sequence' :)
         and $state[$p:lk] != 9264                          (: 'pipeline' 'www-form-urldecode' :)
         and $state[$p:lk] != 9273                          (: 'step' 'www-form-urldecode' :)
         and $state[$p:lk] != 9392                          (: 'pipeline' 'www-form-urlencode' :)
         and $state[$p:lk] != 9401                          (: 'step' 'www-form-urlencode' :)
         and $state[$p:lk] != 9520                          (: 'pipeline' 'xinclude' :)
         and $state[$p:lk] != 9529                          (: 'step' 'xinclude' :)
         and $state[$p:lk] != 9648                          (: 'pipeline' 'xquery' :)
         and $state[$p:lk] != 9657                          (: 'step' 'xquery' :)
         and $state[$p:lk] != 9776                          (: 'pipeline' 'xsl-formatter' :)
         and $state[$p:lk] != 9785                          (: 'step' 'xsl-formatter' :)
         and $state[$p:lk] != 9904                          (: 'pipeline' 'xslt' :)
         and $state[$p:lk] != 9913                          (: 'step' 'xslt' :)
         and $state[$p:lk] != 10032                         (: 'pipeline' '{' :)
         and $state[$p:lk] != 10041                         (: 'step' '{' :)
         and $state[$p:lk] != 787973                        (: NCName^Token '=' 'pipeline' :)
         and $state[$p:lk] != 787984                        (: 'add-attribute' '=' 'pipeline' :)
         and $state[$p:lk] != 787985                        (: 'add-xml-base' '=' 'pipeline' :)
         and $state[$p:lk] != 787987                        (: 'compare' '=' 'pipeline' :)
         and $state[$p:lk] != 787988                        (: 'count' '=' 'pipeline' :)
         and $state[$p:lk] != 787989                        (: 'default' '=' 'pipeline' :)
         and $state[$p:lk] != 787990                        (: 'delete' '=' 'pipeline' :)
         and $state[$p:lk] != 787991                        (: 'directory-list' '=' 'pipeline' :)
         and $state[$p:lk] != 787993                        (: 'else' '=' 'pipeline' :)
         and $state[$p:lk] != 787995                        (: 'error' '=' 'pipeline' :)
         and $state[$p:lk] != 787996                        (: 'escape-markup' '=' 'pipeline' :)
         and $state[$p:lk] != 787997                        (: 'exec' '=' 'pipeline' :)
         and $state[$p:lk] != 787998                        (: 'filter' '=' 'pipeline' :)
         and $state[$p:lk] != 787999                        (: 'for-each' '=' 'pipeline' :)
         and $state[$p:lk] != 788001                        (: 'hash' '=' 'pipeline' :)
         and $state[$p:lk] != 788002                        (: 'http-request' '=' 'pipeline' :)
         and $state[$p:lk] != 788003                        (: 'identity' '=' 'pipeline' :)
         and $state[$p:lk] != 788004                        (: 'if' '=' 'pipeline' :)
         and $state[$p:lk] != 788005                        (: 'insert' '=' 'pipeline' :)
         and $state[$p:lk] != 788007                        (: 'label-elements' '=' 'pipeline' :)
         and $state[$p:lk] != 788008                        (: 'library' '=' 'pipeline' :)
         and $state[$p:lk] != 788009                        (: 'load' '=' 'pipeline' :)
         and $state[$p:lk] != 788010                        (: 'make-absolute-uris' '=' 'pipeline' :)
         and $state[$p:lk] != 788011                        (: 'namespace' '=' 'pipeline' :)
         and $state[$p:lk] != 788012                        (: 'namespace-rename' '=' 'pipeline' :)
         and $state[$p:lk] != 788013                        (: 'pack' '=' 'pipeline' :)
         and $state[$p:lk] != 788014                        (: 'parameters' '=' 'pipeline' :)
         and $state[$p:lk] != 788016                        (: 'pipeline' '=' 'pipeline' :)
         and $state[$p:lk] != 788018                        (: 'rename' '=' 'pipeline' :)
         and $state[$p:lk] != 788019                        (: 'replace' '=' 'pipeline' :)
         and $state[$p:lk] != 788022                        (: 'set-attributes' '=' 'pipeline' :)
         and $state[$p:lk] != 788023                        (: 'sink' '=' 'pipeline' :)
         and $state[$p:lk] != 788024                        (: 'split-sequence' '=' 'pipeline' :)
         and $state[$p:lk] != 788025                        (: 'step' '=' 'pipeline' :)
         and $state[$p:lk] != 788026                        (: 'store' '=' 'pipeline' :)
         and $state[$p:lk] != 788027                        (: 'string-replace' '=' 'pipeline' :)
         and $state[$p:lk] != 788028                        (: 'try' '=' 'pipeline' :)
         and $state[$p:lk] != 788029                        (: 'unescape-markup' '=' 'pipeline' :)
         and $state[$p:lk] != 788030                        (: 'unwrap' '=' 'pipeline' :)
         and $state[$p:lk] != 788031                        (: 'uuid' '=' 'pipeline' :)
         and $state[$p:lk] != 788032                        (: 'validate-with-relax-ng' '=' 'pipeline' :)
         and $state[$p:lk] != 788033                        (: 'validate-with-schematron' '=' 'pipeline' :)
         and $state[$p:lk] != 788034                        (: 'validate-with-xml-schema' '=' 'pipeline' :)
         and $state[$p:lk] != 788035                        (: 'variable' '=' 'pipeline' :)
         and $state[$p:lk] != 788036                        (: 'viewport' '=' 'pipeline' :)
         and $state[$p:lk] != 788038                        (: 'wrap' '=' 'pipeline' :)
         and $state[$p:lk] != 788039                        (: 'wrap-sequence' '=' 'pipeline' :)
         and $state[$p:lk] != 788040                        (: 'www-form-urldecode' '=' 'pipeline' :)
         and $state[$p:lk] != 788041                        (: 'www-form-urlencode' '=' 'pipeline' :)
         and $state[$p:lk] != 788042                        (: 'xinclude' '=' 'pipeline' :)
         and $state[$p:lk] != 788043                        (: 'xquery' '=' 'pipeline' :)
         and $state[$p:lk] != 788044                        (: 'xsl-formatter' '=' 'pipeline' :)
         and $state[$p:lk] != 788045                        (: 'xslt' '=' 'pipeline' :)
         and $state[$p:lk] != 935429                        (: NCName^Token '=' 'step' :)
         and $state[$p:lk] != 935440                        (: 'add-attribute' '=' 'step' :)
         and $state[$p:lk] != 935441                        (: 'add-xml-base' '=' 'step' :)
         and $state[$p:lk] != 935443                        (: 'compare' '=' 'step' :)
         and $state[$p:lk] != 935444                        (: 'count' '=' 'step' :)
         and $state[$p:lk] != 935445                        (: 'default' '=' 'step' :)
         and $state[$p:lk] != 935446                        (: 'delete' '=' 'step' :)
         and $state[$p:lk] != 935447                        (: 'directory-list' '=' 'step' :)
         and $state[$p:lk] != 935449                        (: 'else' '=' 'step' :)
         and $state[$p:lk] != 935451                        (: 'error' '=' 'step' :)
         and $state[$p:lk] != 935452                        (: 'escape-markup' '=' 'step' :)
         and $state[$p:lk] != 935453                        (: 'exec' '=' 'step' :)
         and $state[$p:lk] != 935454                        (: 'filter' '=' 'step' :)
         and $state[$p:lk] != 935455                        (: 'for-each' '=' 'step' :)
         and $state[$p:lk] != 935457                        (: 'hash' '=' 'step' :)
         and $state[$p:lk] != 935458                        (: 'http-request' '=' 'step' :)
         and $state[$p:lk] != 935459                        (: 'identity' '=' 'step' :)
         and $state[$p:lk] != 935460                        (: 'if' '=' 'step' :)
         and $state[$p:lk] != 935461                        (: 'insert' '=' 'step' :)
         and $state[$p:lk] != 935463                        (: 'label-elements' '=' 'step' :)
         and $state[$p:lk] != 935464                        (: 'library' '=' 'step' :)
         and $state[$p:lk] != 935465                        (: 'load' '=' 'step' :)
         and $state[$p:lk] != 935466                        (: 'make-absolute-uris' '=' 'step' :)
         and $state[$p:lk] != 935467                        (: 'namespace' '=' 'step' :)
         and $state[$p:lk] != 935468                        (: 'namespace-rename' '=' 'step' :)
         and $state[$p:lk] != 935469                        (: 'pack' '=' 'step' :)
         and $state[$p:lk] != 935470                        (: 'parameters' '=' 'step' :)
         and $state[$p:lk] != 935472                        (: 'pipeline' '=' 'step' :)
         and $state[$p:lk] != 935474                        (: 'rename' '=' 'step' :)
         and $state[$p:lk] != 935475                        (: 'replace' '=' 'step' :)
         and $state[$p:lk] != 935478                        (: 'set-attributes' '=' 'step' :)
         and $state[$p:lk] != 935479                        (: 'sink' '=' 'step' :)
         and $state[$p:lk] != 935480                        (: 'split-sequence' '=' 'step' :)
         and $state[$p:lk] != 935481                        (: 'step' '=' 'step' :)
         and $state[$p:lk] != 935482                        (: 'store' '=' 'step' :)
         and $state[$p:lk] != 935483                        (: 'string-replace' '=' 'step' :)
         and $state[$p:lk] != 935484                        (: 'try' '=' 'step' :)
         and $state[$p:lk] != 935485                        (: 'unescape-markup' '=' 'step' :)
         and $state[$p:lk] != 935486                        (: 'unwrap' '=' 'step' :)
         and $state[$p:lk] != 935487                        (: 'uuid' '=' 'step' :)
         and $state[$p:lk] != 935488                        (: 'validate-with-relax-ng' '=' 'step' :)
         and $state[$p:lk] != 935489                        (: 'validate-with-schematron' '=' 'step' :)
         and $state[$p:lk] != 935490                        (: 'validate-with-xml-schema' '=' 'step' :)
         and $state[$p:lk] != 935491                        (: 'variable' '=' 'step' :)
         and $state[$p:lk] != 935492                        (: 'viewport' '=' 'step' :)
         and $state[$p:lk] != 935494                        (: 'wrap' '=' 'step' :)
         and $state[$p:lk] != 935495                        (: 'wrap-sequence' '=' 'step' :)
         and $state[$p:lk] != 935496                        (: 'www-form-urldecode' '=' 'step' :)
         and $state[$p:lk] != 935497                        (: 'www-form-urlencode' '=' 'step' :)
         and $state[$p:lk] != 935498                        (: 'xinclude' '=' 'step' :)
         and $state[$p:lk] != 935499                        (: 'xquery' '=' 'step' :)
         and $state[$p:lk] != 935500                        (: 'xsl-formatter' '=' 'step' :)
         and $state[$p:lk] != 935501) then                  (: 'xslt' '=' 'step' :)
      let $state := p:memoized($state, 0)
      return
        if ($state[$p:lk] != 0) then
          $state
        else
          let $backtrack := $state
          let $state := p:strip-result($state)
          let $state := p:try-declareStep($input, $state)
          return
            if (not($state[$p:error])) then
              p:memoize($backtrack, $state, -1, 0)
            else
              p:memoize($backtrack, $state, -2, 0)
    else
      $state
  let $state :=
    if ($state[$p:lk] = -1
     or $state[$p:lk] = 697                                 (: 'step' NCName^Token :)
     or $state[$p:lk] = 953                                 (: 'step' '(' :)
     or $state[$p:lk] = 2105                                (: 'step' 'add-attribute' :)
     or $state[$p:lk] = 2233                                (: 'step' 'add-xml-base' :)
     or $state[$p:lk] = 2489                                (: 'step' 'compare' :)
     or $state[$p:lk] = 2617                                (: 'step' 'count' :)
     or $state[$p:lk] = 2745                                (: 'step' 'default' :)
     or $state[$p:lk] = 2873                                (: 'step' 'delete' :)
     or $state[$p:lk] = 3001                                (: 'step' 'directory-list' :)
     or $state[$p:lk] = 3257                                (: 'step' 'else' :)
     or $state[$p:lk] = 3513                                (: 'step' 'error' :)
     or $state[$p:lk] = 3641                                (: 'step' 'escape-markup' :)
     or $state[$p:lk] = 3769                                (: 'step' 'exec' :)
     or $state[$p:lk] = 3897                                (: 'step' 'filter' :)
     or $state[$p:lk] = 4025                                (: 'step' 'for-each' :)
     or $state[$p:lk] = 4281                                (: 'step' 'hash' :)
     or $state[$p:lk] = 4409                                (: 'step' 'http-request' :)
     or $state[$p:lk] = 4537                                (: 'step' 'identity' :)
     or $state[$p:lk] = 4665                                (: 'step' 'if' :)
     or $state[$p:lk] = 4793                                (: 'step' 'insert' :)
     or $state[$p:lk] = 5049                                (: 'step' 'label-elements' :)
     or $state[$p:lk] = 5177                                (: 'step' 'library' :)
     or $state[$p:lk] = 5305                                (: 'step' 'load' :)
     or $state[$p:lk] = 5433                                (: 'step' 'make-absolute-uris' :)
     or $state[$p:lk] = 5561                                (: 'step' 'namespace' :)
     or $state[$p:lk] = 5689                                (: 'step' 'namespace-rename' :)
     or $state[$p:lk] = 5817                                (: 'step' 'pack' :)
     or $state[$p:lk] = 5945                                (: 'step' 'parameters' :)
     or $state[$p:lk] = 6201                                (: 'step' 'pipeline' :)
     or $state[$p:lk] = 6457                                (: 'step' 'rename' :)
     or $state[$p:lk] = 6585                                (: 'step' 'replace' :)
     or $state[$p:lk] = 6969                                (: 'step' 'set-attributes' :)
     or $state[$p:lk] = 7097                                (: 'step' 'sink' :)
     or $state[$p:lk] = 7225                                (: 'step' 'split-sequence' :)
     or $state[$p:lk] = 7353                                (: 'step' 'step' :)
     or $state[$p:lk] = 7481                                (: 'step' 'store' :)
     or $state[$p:lk] = 7609                                (: 'step' 'string-replace' :)
     or $state[$p:lk] = 7737                                (: 'step' 'try' :)
     or $state[$p:lk] = 7865                                (: 'step' 'unescape-markup' :)
     or $state[$p:lk] = 7993                                (: 'step' 'unwrap' :)
     or $state[$p:lk] = 8121                                (: 'step' 'uuid' :)
     or $state[$p:lk] = 8249                                (: 'step' 'validate-with-relax-ng' :)
     or $state[$p:lk] = 8377                                (: 'step' 'validate-with-schematron' :)
     or $state[$p:lk] = 8505                                (: 'step' 'validate-with-xml-schema' :)
     or $state[$p:lk] = 8633                                (: 'step' 'variable' :)
     or $state[$p:lk] = 8761                                (: 'step' 'viewport' :)
     or $state[$p:lk] = 9017                                (: 'step' 'wrap' :)
     or $state[$p:lk] = 9145                                (: 'step' 'wrap-sequence' :)
     or $state[$p:lk] = 9273                                (: 'step' 'www-form-urldecode' :)
     or $state[$p:lk] = 9401                                (: 'step' 'www-form-urlencode' :)
     or $state[$p:lk] = 9529                                (: 'step' 'xinclude' :)
     or $state[$p:lk] = 9657                                (: 'step' 'xquery' :)
     or $state[$p:lk] = 9785                                (: 'step' 'xsl-formatter' :)
     or $state[$p:lk] = 9913                                (: 'step' 'xslt' :)
     or $state[$p:lk] = 10041                               (: 'step' '{' :)
     or $state[$p:lk] = 935429                              (: NCName^Token '=' 'step' :)
     or $state[$p:lk] = 935440                              (: 'add-attribute' '=' 'step' :)
     or $state[$p:lk] = 935441                              (: 'add-xml-base' '=' 'step' :)
     or $state[$p:lk] = 935443                              (: 'compare' '=' 'step' :)
     or $state[$p:lk] = 935444                              (: 'count' '=' 'step' :)
     or $state[$p:lk] = 935445                              (: 'default' '=' 'step' :)
     or $state[$p:lk] = 935446                              (: 'delete' '=' 'step' :)
     or $state[$p:lk] = 935447                              (: 'directory-list' '=' 'step' :)
     or $state[$p:lk] = 935449                              (: 'else' '=' 'step' :)
     or $state[$p:lk] = 935451                              (: 'error' '=' 'step' :)
     or $state[$p:lk] = 935452                              (: 'escape-markup' '=' 'step' :)
     or $state[$p:lk] = 935453                              (: 'exec' '=' 'step' :)
     or $state[$p:lk] = 935454                              (: 'filter' '=' 'step' :)
     or $state[$p:lk] = 935455                              (: 'for-each' '=' 'step' :)
     or $state[$p:lk] = 935457                              (: 'hash' '=' 'step' :)
     or $state[$p:lk] = 935458                              (: 'http-request' '=' 'step' :)
     or $state[$p:lk] = 935459                              (: 'identity' '=' 'step' :)
     or $state[$p:lk] = 935460                              (: 'if' '=' 'step' :)
     or $state[$p:lk] = 935461                              (: 'insert' '=' 'step' :)
     or $state[$p:lk] = 935463                              (: 'label-elements' '=' 'step' :)
     or $state[$p:lk] = 935464                              (: 'library' '=' 'step' :)
     or $state[$p:lk] = 935465                              (: 'load' '=' 'step' :)
     or $state[$p:lk] = 935466                              (: 'make-absolute-uris' '=' 'step' :)
     or $state[$p:lk] = 935467                              (: 'namespace' '=' 'step' :)
     or $state[$p:lk] = 935468                              (: 'namespace-rename' '=' 'step' :)
     or $state[$p:lk] = 935469                              (: 'pack' '=' 'step' :)
     or $state[$p:lk] = 935470                              (: 'parameters' '=' 'step' :)
     or $state[$p:lk] = 935472                              (: 'pipeline' '=' 'step' :)
     or $state[$p:lk] = 935474                              (: 'rename' '=' 'step' :)
     or $state[$p:lk] = 935475                              (: 'replace' '=' 'step' :)
     or $state[$p:lk] = 935478                              (: 'set-attributes' '=' 'step' :)
     or $state[$p:lk] = 935479                              (: 'sink' '=' 'step' :)
     or $state[$p:lk] = 935480                              (: 'split-sequence' '=' 'step' :)
     or $state[$p:lk] = 935481                              (: 'step' '=' 'step' :)
     or $state[$p:lk] = 935482                              (: 'store' '=' 'step' :)
     or $state[$p:lk] = 935483                              (: 'string-replace' '=' 'step' :)
     or $state[$p:lk] = 935484                              (: 'try' '=' 'step' :)
     or $state[$p:lk] = 935485                              (: 'unescape-markup' '=' 'step' :)
     or $state[$p:lk] = 935486                              (: 'unwrap' '=' 'step' :)
     or $state[$p:lk] = 935487                              (: 'uuid' '=' 'step' :)
     or $state[$p:lk] = 935488                              (: 'validate-with-relax-ng' '=' 'step' :)
     or $state[$p:lk] = 935489                              (: 'validate-with-schematron' '=' 'step' :)
     or $state[$p:lk] = 935490                              (: 'validate-with-xml-schema' '=' 'step' :)
     or $state[$p:lk] = 935491                              (: 'variable' '=' 'step' :)
     or $state[$p:lk] = 935492                              (: 'viewport' '=' 'step' :)
     or $state[$p:lk] = 935494                              (: 'wrap' '=' 'step' :)
     or $state[$p:lk] = 935495                              (: 'wrap-sequence' '=' 'step' :)
     or $state[$p:lk] = 935496                              (: 'www-form-urldecode' '=' 'step' :)
     or $state[$p:lk] = 935497                              (: 'www-form-urlencode' '=' 'step' :)
     or $state[$p:lk] = 935498                              (: 'xinclude' '=' 'step' :)
     or $state[$p:lk] = 935499                              (: 'xquery' '=' 'step' :)
     or $state[$p:lk] = 935500                              (: 'xsl-formatter' '=' 'step' :)
     or $state[$p:lk] = 935501) then                        (: 'xslt' '=' 'step' :)
      let $state := p:parse-declareStep($input, $state)
      return $state
    else if ($state[$p:lk] = 296) then                      (: 'library' EOF :)
      let $state := p:parse-library($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-pipeline($input, $state)
      return $state
  let $state := p:lookahead1W(5, $input, $state)            (: Whitespace | EOF :)
  let $state := p:shift(2, $input, $state)                  (: EOF :)
  return p:reduce($state, "document", $count)
};

(:~
 : Parse start symbol document from given string.
 :
 : @param $s the string to be parsed.
 : @return the result as generated by parser actions.
 :)
declare function p:parse-document($s as xs:string) as item()*
{
  let $state := p:parse-document($s, (0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, false(), <memo/>))
  let $error := $state[$p:error]
  return
    if ($error) then
      element ERROR {$error/@*, p:error-message($s, $error)}
    else
      subsequence($state, $p:result)
};

p:parse-document(string(.))
