// For bnd
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.3.0'
	}
}

plugins {
	id 'java'
	id 'maven'
	id 'signing'
	id 'pmd'
}

apply plugin: 'biz.aQute.bnd.builder'

group = 'org.daisy.dotify'

sourceCompatibility = 1.8
targetCompatibility = 1.8
    
sourceSets {
	main {	java { srcDir 'src' }	resources { srcDir 'src' } }
	test {	java { srcDir 'test' }	resources { srcDir 'test' } }
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

def repoRevision = System.getenv("REPO_REVISION")!=null?System.getenv("REPO_REVISION"):repositoryRevision

javadoc {
	options.encoding = 'UTF-8'
	options.links('http://docs.oracle.com/javase/8/docs/api/')
}

repositories {
    mavenCentral()
    //mavenLocal()
    //maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
	compileOnly 'org.osgi:org.osgi.service.component.annotations:1.3.0'
	testCompileOnly 'org.osgi:org.osgi.service.component.annotations:1.3.0'
    testCompile group: "junit", name: "junit", version: "4.12"
    testCompile "org.mockito:mockito-core:1.10.19"
}

def matchesPackageInfo() {
	def v = (version =~ /([\d]+\.[\d]+)/)[0][1]
	//println v
	FileTree tree = fileTree(dir: 'src')
	tree.include('**/packageinfo')
	def hasMatch = false;
	tree.each {File f ->
    	String contents = f.getText('UTF-8')
    	hasMatch |= contents.matches("version \\Q$v\\E")
	}
	return hasMatch
}

// this is executed during the configuration phase
task verifyPackageInfo() {
	def hasPackageInfo = matchesPackageInfo()
	//println hasPackageInfo
	if (!hasPackageInfo) {
		def v = (version =~ /([\d]+\.[\d]+)/)[0][1]
		throw new GradleException("No packageinfo matching bundle version: $v")
	}
}

jar {
	manifest {
		attributes(
			'-sources': 'true',
			'Export-Package': 'org.daisy.dotify.api.*',
			'Service-Component': '*',
			'Automatic-Module-Name': "$moduleName",
			'Bundle-Name': "$moduleName",
			'Bundle-SymbolicName': "$moduleName",
			'Built-By': System.getProperty("user.name"),
			'Built-On': new Date().format('yyyy-MM-dd'),
			'Repository-Revision': "$repoRevision",
			'Repository-URL': "$repositoryURL",
			'Include-Resource': 'LICENSE, NOTICE'
		)
	}
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
	//Only upload if a git hash is supplied. On Travis only upload snapshots.
	enabled = repoRevision.size()==40 && System.getenv("TRAVIS_BUILD_ID")!=null
    repositories {
        mavenDeployer {
            if (isReleaseVersion) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.project {
                name 'dotify.api'
                packaging 'jar'
                description 'Dotify API'
                url "$repositoryURL"
                scm {
                    connection "$repositorySCM"
                    developerConnection "$repositorySCM"
                    url "$repositoryURL"
                }
                licenses {
                    license {
                        name 'LGPL'
                        url 'http://www.gnu.org/licenses/lgpl.html'
                    }
                }
                developers {
                    developer {
                        id 'joel'
                        name 'Joel HÃ¥kansson'
                    }
                }
            }
        }
    }
}

pmd.ruleSets = [
	'java-basic',
	'java-braces',
	//'java-clone',
	//'java-codesize',
	//'java-comments',
	//'java-controversial',
	//'java-coupling',
	//'java-design',
	//'java-empty',
	'java-finalizers',
	'java-imports',
	//'java-optimizations',
	'java-strictexception',
	//'java-strings',
	'java-typeresolution',
	//'java-unnecessary',
	'java-unusedcode'
]

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}