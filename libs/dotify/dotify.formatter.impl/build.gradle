// For bnd
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.3.0'
	}
}

plugins {
	id 'java'
	id 'maven'
	id 'signing'
	//id 'jacoco'
}

apply plugin: 'biz.aQute.bnd.builder'

group = 'org.daisy.dotify'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
	main {	java { srcDir 'src' }	resources { srcDir 'src' } }
	test {	java { srcDir 'test' srcDir 'integrationtest'}	resources { srcDir 'test' srcDir 'integrationtest'} }
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

def repoRevision = System.getenv("REPO_REVISION")!=null?System.getenv("REPO_REVISION"):repositoryRevision

javadoc {
	options.encoding = 'UTF-8'
	options.links('http://docs.oracle.com/javase/8/docs/api/')
}

repositories {
    mavenCentral()
    //mavenLocal()
    maven { url "https://oss.sonatype.org/content/groups/staging" }
    //maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compileOnly 'org.osgi:org.osgi.service.component.annotations:1.3.0'
    compile "org.daisy.dotify:dotify.api:4.5.0"
    compile "org.daisy.dotify:dotify.common:4.3.0"
    compile 'org.daisy.streamline:streamline-api:1.2.0'
    compile (group: 'org.daisy.libs', name: 'saxon-he', version: '9.5.1.5') {
		exclude module: 'Saxon-HE'
	}

    runtime 'com.fasterxml.woodstox:woodstox-core:5.1.0'
    
    testCompileOnly 'org.osgi:org.osgi.service.component.annotations:1.3.0'
    testCompile group: "junit", name: "junit", version: "4.12"
    testCompile ('org.daisy.braille:braille-utils.pef-tools:5.0.0') {
		exclude module: 'Saxon-HE'
	}
    testCompile "org.mockito:mockito-core:1.10.19"
    
	testRuntime group: group, name:'dotify.hyphenator.impl', version:'4.0.0'
	testRuntime group: group, name:'dotify.text.impl', version:'4.0.0'
	testRuntime group: group, name:'dotify.translator.impl', version:'4.0.0'
}

ext.writeTestsOverviewFile = { folderPath, fileName ->
	def folder = file(folderPath)
	def f = new File(folder, fileName)
	f.write('<?xml version="1.0" encoding="UTF-8"?>\n')
	f.append('<?xml-stylesheet href="display.xslt" type="text/xsl" ?>\n')
	f.append('<tests>\n')
	FileTree list = fileTree(dir: folder)
	list.include '**/*-input.obfl'
	list.each {
		def relpath = it.path.substring(projectDir.path.length()+folderPath.length()+2)
		def exp = relpath.substring(0, relpath.length()-11) + '-expected.pef'
		if (new File(folder, exp).exists()) {
			f.append('<test input="'+relpath+'" expected="' + exp + '"/>'+'\n')
		}
	}
	f.append('</tests>')
	return f
}

javadoc.dependsOn('updateTestsOverviewFile')

task updateTestsOverviewFile() {
	doLast() {
		// There are more tests in this folder with another naming standard, but they
		// don't suit the presentational format and are more of integration tests.
		// Additional tests should be written based on these.
		def r = writeTestsOverviewFile('integrationtest/org/daisy/dotify/formatter/test/resource-files', 'tests-overview.xml')
		ant {
			xslt (
				basedir: "integrationtest",
				destdir: (new File("${buildDir}/docs/tests")),
				style: "build-resources/display.xslt",
				includes: "**/tests-overview.xml",
				filenameparameter: "filename"
			) {
				mapper (
					type: "package",
					from: "*.xml",
					to: "*.html"
				)
				xmlcatalog {
					dtd (
						publicId: "-//W3C//DTD XHTML 1.0 Strict//EN",
						location: "build-resources/xhtml10/xhtml1-strict.dtd"
					)
				}
				param (
					name: 'timestamp', 
					expression: new Date().format("yyyy-MM-dd'T'HH:mmXXX")
				)
			}
		}
		r.delete()
	}
}

jar {
	manifest {
		attributes(
			'-sources': 'true',
			'Import-Package': 'org.daisy.dotify.api.engine; provide:=true,'+
								'org.daisy.dotify.api.formatter; provide:=true,'+
								'org.daisy.dotify.api.obfl; provide:=true,'+
								'org.daisy.dotify.api.writer; provide:=true,'+
								'org.daisy.streamline.api.tasks; provide:=true,*',
			////The split-package instruction is because a resource folder is included twice on the classpath
			//'Private-Package': 'org.daisy.dotify.formatter.impl.*;-split-package:=merge-first,',
			'Service-Component': '*',
			'Automatic-Module-Name': "$moduleName",
			'Bundle-Name': "$bundleName",
			'Bundle-SymbolicName': "$bundleName",
			'Built-By': System.getProperty("user.name"),
			'Built-On': new Date().format('yyyy-MM-dd'),
			'Repository-Revision': "$repoRevision",
			'Repository-URL': "$repositoryURL",
			'Include-Resource': 'LICENSE, NOTICE'
		)
	}
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
	//Only upload if a git hash is supplied. On Travis only upload snapshots.
	enabled = repoRevision.size()==40 && System.getenv("TRAVIS_BUILD_ID")!=null
    repositories {
        mavenDeployer {
            if (isReleaseVersion) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.project {
                name 'dotify.formatter.impl'
                packaging 'jar'
                description 'Dotify Formatter'
                url "$repositoryURL"
                scm {
                    connection "$repositorySCM"
                    developerConnection "$repositorySCM"
                    url "$repositoryURL"
                }
                licenses {
                    license {
                        name 'LGPL'
                        url 'http://www.gnu.org/licenses/lgpl.html'
                    }
                }
                developers {
                    developer {
                        id 'joel'
                        name 'Joel HÃ¥kansson'
                    }
                }
            }
        }
    }
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}