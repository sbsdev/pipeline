#!/bin/sh
# postinst script for daisy-pipeline2-cli
#
# see: dh_installdeb(1)

set -e

. /usr/share/debconf/confmodule

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

CLI_CONFIG_YML=${deb.pipeline.cli.home}/config.yml

backup_config_file() {
    local CONFIG_FILE=$1
    echo "####################################################################" > $CONFIG_FILE.bak
    echo "#              PLEASE DO NOT DELETE OR EDIT THIS FILE              #" >> $CONFIG_FILE.bak
    echo "#           THIS IS A BACKUP OF THE DEFAULT CONFIGURATION          #" >> $CONFIG_FILE.bak
    echo "# AND WILL BE USED FOR COMPARISON DURING UPGRADING OF THE PACKAGE  #" >> $CONFIG_FILE.bak
    echo "####################################################################" >> $CONFIG_FILE.bak
    cat $CONFIG_FILE >> $CONFIG_FILE.bak
    chmod a-w $CONFIG_FILE.bak
}

case "$1" in
    
    configure)
        
        if [ ! -e $CLI_CONFIG_YML ]; then
            echo "$CLI_CONFIG_YML: no such file" >&2 && exit 1
        fi
        
        # make a copy of the freshly installed default configuration file
        # if a *.bak file is already present it probably means dpkg-reconfigure was called
        [ -e $CLI_CONFIG_YML.bak ] || backup_config_file $CLI_CONFIG_YML
        
        if [ ! -e $CLI_CONFIG_YML.old ]; then
            
            # ----------------------------
            # first install or reconfigure
            # ----------------------------
            
            USERID_KEY=client_key
            PASSWORD_KEY=client_secret
            
            USERID=$(cat $CLI_CONFIG_YML | sed -n "s/^[ #]*$USERID_KEY:\s*\(.*\)/\1/p")
            db_get daisy-pipeline2/admin_userid && USERID="$RET" || true
            
            db_set daisy-pipeline2-cli/admin_userid $USERID
            db_set daisy-pipeline2-cli/admin_password $(cat $CLI_CONFIG_YML | sed -n "s/^[ #]*$PASSWORD_KEY:\s*\(.*\)/\1/p")
            
            # prompt for userid and password
            
            db_input high daisy-pipeline2-cli/admin_userid || true
            db_input high daisy-pipeline2-cli/admin_password || true
            db_go || true
            db_get daisy-pipeline2-cli/admin_userid && USERID="$RET" || true
            db_get daisy-pipeline2-cli/admin_password && PASSWORD="$RET" || true
            
            # clear password from database
            
            db_reset daisy-pipeline2-cli/admin_password || true
            
            # set userid and password in configuration files
            
            cp -f $CLI_CONFIG_YML $CLI_CONFIG_YML.tmp
            sed -e "s/^[ #]*\($USERID_KEY\):.*/\1: $USERID/" \
                -e "s/^[ #]*\($PASSWORD_KEY\):.*/\1: $PASSWORD/" \
                < $CLI_CONFIG_YML > $CLI_CONFIG_YML.tmp
            mv -f $CLI_CONFIG_YML.tmp $CLI_CONFIG_YML
            
        else
            
            # -------------------------------------------
            # upgrade, or install from Config-Files state
            # -------------------------------------------
            
            # merge old and new configuration files
            # if merging is not possible due to a missing *.bak.old file, keep the *.old file
            
            if [ -e $CLI_CONFIG_YML.old ] && [ -e $CLI_CONFIG_YML.bak.old ]; then
                for KEY in $(cat $CLI_CONFIG_YML | sed -n 's/^[ #]*\([0-9a-zA-Z_]*\):.*/\1/p'); do
                    OLD_ENTRY="$(cat $CLI_CONFIG_YML.old | sed -n "s/^\([ #]*$KEY:.*\)/\1/p")"
                    DEFAULT_ENTRY="$(cat $CLI_CONFIG_YML.bak.old | sed -n "s/\(^[ #]*$KEY:.*\)/\1/p")"
                    if [ "$OLD_ENTRY" != "$DEFAULT_ENTRY" ]; then
                        cp -f $CLI_CONFIG_YML $CLI_CONFIG_YML.tmp
                        sed -e "s|^[ #]*$KEY:.*$|$OLD_ENTRY|" < $CLI_CONFIG_YML > $CLI_CONFIG_YML.tmp
                        mv -f $CLI_CONFIG_YML.tmp $CLI_CONFIG_YML
                    fi
                done
                rm -f $CLI_CONFIG_YML.old $CLI_CONFIG_YML.bak.old
            fi
        fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
