
{{! does not work within html }}

<div class="gui-synopsis">

{{#inputs}}

### Inputs

<ul class="synopsis-inputs">
{{#all}}
<li class="synopsis-input details-on">
<div class="toggle-details"/>
<div class="synopsis-input-name">{{name}}</div>
<div class="synopsis-input-desc">
{{#desc.long}}
<div class="shortdesc">{{desc.short}}</div>
<div class="longdesc">{{{.}}}</div>
{{/desc.long}}
{{^desc.long}}
{{desc.short}}
{{/desc.long}}
</div>
{{#media-type.length}}
<div class="synopsis-input-media-type">
<b>Media-type</b>:
<ul class="media-types">
{{#media-type}}
<li>{{{.}}}</li>
{{/media-type}}
</ul>
</div>
{{/media-type.length}}
<div class="synopsis-input-sequence"><b>Sequence</b>: {{#sequence}}yes{{/sequence}}{{^sequence}}no{{/sequence}}</div>
</li>
{{/all}}
</ul>

{{/inputs}}

{{#reports}}

### Reports

<ul class="synopsis-reports">
{{#all}}
<li class="synopsis-report details-on">
<div class="toggle-details"/>
<div class="synopsis-report-name">{{name}}</div>
<div class="synopsis-report-desc">
{{#desc.long}}
<div class="shortdesc">{{desc.short}}</div>
<div class="longdesc">{{{.}}}</div>
{{/desc.long}}
{{^desc.long}}
{{desc.short}}
{{/desc.long}}
</div>
</li>
{{/all}}
</ul>

{{/reports}}

{{#outputs}}

### Outputs

<ul class="synopsis-outputs">
{{#all}}
<li class="synopsis-output details-on">
<div class="toggle-details"/>
<div class="synopsis-output-name">{{name}}</div>
<div class="synopsis-output-desc">
{{#desc.long}}
<div class="shortdesc">{{desc.short}}</div>
<div class="longdesc">{{{.}}}</div>
{{/desc.long}}
{{^desc.long}}
{{desc.short}}
{{/desc.long}}
</div>
{{#media-type.length}}
<div class="synopsis-output-media-type">
<b>Media-type</b>:
<ul class="media-types">
{{#media-type}}
<li>{{{.}}}</li>
{{/media-type}}
</ul>
</div>
{{/media-type.length}}
</li>
{{/all}}
</ul>

{{/outputs}}

{{#options}}

### Options

<ul class="synopsis-options">
{{#all}}
<li class="synopsis-option details-on">
<div class="toggle-details"/>
<div class="synopsis-option-name">{{name}}</div>
<div class="synopsis-option-desc">
{{#desc.long}}
<div class="shortdesc">{{desc.short}}</div>
<div class="longdesc">{{{.}}}</div>
{{/desc.long}}
{{^desc.long}}
{{desc.short}}
{{/desc.long}}
</div>
<div class="synopsis-option-data-type"><b>Possible values</b>: {{{data-type}}}</div>
{{#default}}
<div class="synopsis-option-default"><b>Default value</b>: {{{.}}}</div>
{{/default}}
{{^default}}
<div class="synopsis-option-required"><b>Required</b>: {{#required}}yes{{/required}}{{^required}}no{{/required}}</div>
{{/default}}
</li>
{{/all}}
</ul>

{{/options}}

<script type="text/javascript">
var allElements = [];
function showDetailsAndHideAllOther() {
  var windowTopBefore = window.pageYOffset;
  var topBefore = this.offsetTop;
  var i;
  for (i = 0; i < allElements.length; i++) {
    allElements[i].classList.remove('details-on');
	allElements[i].classList.add('details-off');
  }
  this.classList.remove('details-off');
  this.classList.add('details-on');
  window.scrollTo(0, windowTopBefore + this.offsetTop - topBefore);
}
var onload = function() {
  allElements = allElements.concat(Array.prototype.slice.call(document.getElementsByClassName('synopsis-input'), 0));
  allElements = allElements.concat(Array.prototype.slice.call(document.getElementsByClassName('synopsis-report'), 0));
  allElements = allElements.concat(Array.prototype.slice.call(document.getElementsByClassName('synopsis-output'), 0));
  allElements = allElements.concat(Array.prototype.slice.call(document.getElementsByClassName('synopsis-option'), 0));
  var i;
  for (i = 0; i < allElements.length; i++) {
    allElements[i].classList.remove('details-on');
    allElements[i].classList.add('details-off');
	allElements[i].addEventListener('click', showDetailsAndHideAllOther);
  }
}
if (window.addEventListener) {
  window.addEventListener('load', onload);
} else {
  window.attachEvent('onload', onload);
}
</script>
</div>



<div class="cli-synopsis hidden">

<pre>Usage: dp2 [GLOBAL_OPTIONS] {{id}} [OPTIONS]

Options:</pre>
<table>
{{#inputs}}
{{#all}}
<tr>
<td>--{{id}} <span style="text-transform: uppercase">{{id}}</span></td>
<td>{{desc.short}}</td>
</tr>
{{/all}}
{{/inputs}}
{{#options}}
{{#all}}
<tr>
<td>--{{id}} {{^required}}[{{/required}}<span style="text-transform: uppercase">{{id}}</span>{{^required}}]{{/required}}</td>
<td>{{name}}{{#default}} (default: <span class="synopsis-option-default">{{{.}}}</span>){{/default}}</td>
</tr>
{{/all}}
{{/options}}
<tr>
<td>-o,--output [OUTPUT]</td>
<td>Path where to store the results. This option is mandatory when the job is not executed in the background</td>
</tr>
<tr>
<td>-z,--zip</td>
<td>Write the output to a zip file rather than to a folder</td>
</tr>
<tr>
<td>-n,--nicename [NICENAME]</td>
<td>Set job's nice name</td>
</tr>
<tr>
<td>-r,--priority [PRIORITY]</td>
<td>Set job's priority (high|medium|low)</td>
</tr>
<tr>
<td>-q,--quiet</td>
<td>Do not print the job's messages</td>
</tr>
<tr>
<td>-p,--persistent</td>
<td>Delete the job after it is executed</td>
</tr>
<tr>
<td>-b,--background</td>
<td>Sends the job and exits</td>
</tr>
</table>
</div>

<script type="text/javascript">
var guiSynopsis = document.getElementsByClassName('gui-synopsis')[0];
var cliSynopsis = document.getElementsByClassName('cli-synopsis')[0];
function switchToCliView() {
  guiSynopsis.classList.add('hidden');
  cliSynopsis.classList.remove('hidden');
}
function switchToGuiView() {
  guiSynopsis.classList.remove('hidden');
  cliSynopsis.classList.add('hidden');
}
var loaded = false;
var onload = function() {
  if (loaded)
    return;
  var button = document.createElement('span');
  button.setAttribute('role', 'link');
  button.setAttribute('tabindex', '0');
  button.className = 'toggle-synopsis-button';
  button.addEventListener('click', switchToCliView);
  button.addEventListener('keyup', function(event) {
    if (event.keyCode == 13) {
      event.preventDefault();
      switchToCliView();
    }
  });
  guiSynopsis.insertBefore(button, guiSynopsis.firstChild);
  button = document.createElement('span');
  button.setAttribute('role', 'link');
  button.setAttribute('tabindex', '0');
  button.className = 'toggle-synopsis-button';
  button.addEventListener('click', switchToGuiView);
  button.addEventListener('keyup', function(event) {
    if (event.keyCode == 13) {
      event.preventDefault();
      switchToGuiView();
    }
  });
  cliSynopsis.insertBefore(button, cliSynopsis.firstChild);
  loaded = true;
}
if (window.addEventListener) {
  window.addEventListener('load', onload);
} else {
  window.attachEvent('onload', onload);
}
</script>
